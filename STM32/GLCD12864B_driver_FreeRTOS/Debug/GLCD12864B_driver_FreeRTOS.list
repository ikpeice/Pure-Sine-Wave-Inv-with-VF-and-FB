
GLCD12864B_driver_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  08007e70  08007e70  00008e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f8  080084f8  0000a0a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080084f8  080084f8  000094f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008500  08008500  0000a0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008500  08008500  00009500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008504  08008504  00009504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08008508  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fa8  200000a0  080085a8  0000a0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20005048  080085a8  0000b048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001add0  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ae  00000000  00000000  00024ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001780  00000000  00000000  00029350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001215  00000000  00000000  0002aad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264c2  00000000  00000000  0002bce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d752  00000000  00000000  000521a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd804  00000000  00000000  0006f8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d0fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006948  00000000  00000000  0014d140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00153a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e58 	.word	0x08007e58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08007e58 	.word	0x08007e58

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vDisplay_Control>:




void vDisplay_Control(void *argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	  delay_init ();
 80005e4:	f000 f848 	bl	8000678 <delay_init>
	//  test_pixel();
	//  //drawFullGrid();
	//  st7920_update();


	  delay_ms(100);
 80005e8:	2064      	movs	r0, #100	@ 0x64
 80005ea:	f000 f869 	bl	80006c0 <delay_ms>
	  lcd_init();
 80005ee:	f000 f9d5 	bl	800099c <lcd_init>
	  delay_ms(100);
 80005f2:	2064      	movs	r0, #100	@ 0x64
 80005f4:	f000 f864 	bl	80006c0 <delay_ms>

	  lcd_cls();
 80005f8:	f000 f978 	bl	80008ec <lcd_cls>
	//


	  //lcd_draw_topbar();

	  lcd_puts_3x5(1,2,"MIRI AIR+ BLE CONNECTED");
 80005fc:	4a11      	ldr	r2, [pc, #68]	@ (8000644 <vDisplay_Control+0x68>)
 80005fe:	2102      	movs	r1, #2
 8000600:	2001      	movs	r0, #1
 8000602:	f000 fe11 	bl	8001228 <lcd_puts_3x5>
	  lcd_draw_signalStrenght(89);
 8000606:	2059      	movs	r0, #89	@ 0x59
 8000608:	f000 fb3a 	bl	8000c80 <lcd_draw_signalStrenght>

	  lcd_draw_battery(2,105,50);
 800060c:	2232      	movs	r2, #50	@ 0x32
 800060e:	2169      	movs	r1, #105	@ 0x69
 8000610:	2002      	movs	r0, #2
 8000612:	f000 fc49 	bl	8000ea8 <lcd_draw_battery>
	  lcd_draw_H_line(8,2,128);
 8000616:	2280      	movs	r2, #128	@ 0x80
 8000618:	2102      	movs	r1, #2
 800061a:	2008      	movs	r0, #8
 800061c:	f000 faa4 	bl	8000b68 <lcd_draw_H_line>
	  lcd_draw_V_line(8,8,64);
 8000620:	2240      	movs	r2, #64	@ 0x40
 8000622:	2108      	movs	r1, #8
 8000624:	2008      	movs	r0, #8
 8000626:	f000 fae9 	bl	8000bfc <lcd_draw_V_line>
	  lcd_update();
 800062a:	f000 fce1 	bl	8000ff0 <lcd_update>
	//  lcd_update();

  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_7);
	  printf("Scree 1 running\n");
 800062e:	4806      	ldr	r0, [pc, #24]	@ (8000648 <vDisplay_Control+0x6c>)
 8000630:	f006 fd20 	bl	8007074 <puts>
	  menu_screen();
 8000634:	f001 f820 	bl	8001678 <menu_screen>

	  vTaskDelay(1000);
 8000638:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063c:	f004 fec2 	bl	80053c4 <vTaskDelay>
	  printf("Scree 1 running\n");
 8000640:	bf00      	nop
 8000642:	e7f4      	b.n	800062e <vDisplay_Control+0x52>
 8000644:	08007e70 	.word	0x08007e70
 8000648:	08007e88 	.word	0x08007e88

0800064c <vLed_Control>:
  }
  /* USER CODE END Dispaly_Control */
}

void vLed_Control(void *argument){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

	  for(;;)
	  {
		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_7);
 8000654:	2180      	movs	r1, #128	@ 0x80
 8000656:	4806      	ldr	r0, [pc, #24]	@ (8000670 <vLed_Control+0x24>)
 8000658:	f001 ff0d 	bl	8002476 <HAL_GPIO_TogglePin>
		  printf("Led blinking\n");
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <vLed_Control+0x28>)
 800065e:	f006 fd09 	bl	8007074 <puts>
		  vTaskDelay(1000);
 8000662:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000666:	f004 fead 	bl	80053c4 <vTaskDelay>
		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_7);
 800066a:	bf00      	nop
 800066c:	e7f2      	b.n	8000654 <vLed_Control+0x8>
 800066e:	bf00      	nop
 8000670:	40020800 	.word	0x40020800
 8000674:	08007e98 	.word	0x08007e98

08000678 <delay_init>:

extern TIM_HandleTypeDef htim1;


void delay_init ()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);  // change this according to ur setup
 800067c:	4802      	ldr	r0, [pc, #8]	@ (8000688 <delay_init+0x10>)
 800067e:	f002 fd49 	bl	8003114 <HAL_TIM_Base_Start>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000518 	.word	0x20000518

0800068c <delay_us>:

void delay_us (uint16_t delay)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <delay_us+0x30>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
 800069e:	bf00      	nop
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <delay_us+0x30>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3f9      	bcc.n	80006a0 <delay_us+0x14>
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000518 	.word	0x20000518

080006c0 <delay_ms>:

void delay_ms(uint16_t delay)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	80fb      	strh	r3, [r7, #6]
	vTaskDelay(delay);  // better use HAL_DElay in millis
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fe79 	bl	80053c4 <vTaskDelay>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e0:	4a04      	ldr	r2, [pc, #16]	@ (80006f4 <MX_FREERTOS_Init+0x18>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_FREERTOS_Init+0x1c>)
 80006e6:	f003 fe37 	bl	8004358 <osThreadNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a03      	ldr	r2, [pc, #12]	@ (80006fc <MX_FREERTOS_Init+0x20>)
 80006ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	080083dc 	.word	0x080083dc
 80006f8:	08000701 	.word	0x08000701
 80006fc:	200000bc 	.word	0x200000bc

08000700 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_7);
 8000708:	2180      	movs	r1, #128	@ 0x80
 800070a:	4804      	ldr	r0, [pc, #16]	@ (800071c <StartDefaultTask+0x1c>)
 800070c:	f001 feb3 	bl	8002476 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000710:	2064      	movs	r0, #100	@ 0x64
 8000712:	f003 feb3 	bl	800447c <osDelay>
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_7);
 8000716:	bf00      	nop
 8000718:	e7f6      	b.n	8000708 <StartDefaultTask+0x8>
 800071a:	bf00      	nop
 800071c:	40020800 	.word	0x40020800

08000720 <setPixel>:
/////////////////////////////////////

uint8_t framebuffer[64][16]={0};  // 64 rows, 128/8 = 16 columns


void setPixel(uint8_t x, uint8_t y, uint8_t color) {
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	460b      	mov	r3, r1
 800072c:	71bb      	strb	r3, [r7, #6]
 800072e:	4613      	mov	r3, r2
 8000730:	717b      	strb	r3, [r7, #5]
    if (x >= 64 || y >= 128) return;
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b3f      	cmp	r3, #63	@ 0x3f
 8000736:	d843      	bhi.n	80007c0 <setPixel+0xa0>
 8000738:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db3f      	blt.n	80007c0 <setPixel+0xa0>
    uint8_t page = y / 8;
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	08db      	lsrs	r3, r3, #3
 8000744:	73fb      	strb	r3, [r7, #15]
    uint8_t bit  = 7 - (y % 8);  // top row is bit 7
 8000746:	79bb      	ldrb	r3, [r7, #6]
 8000748:	43db      	mvns	r3, r3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f003 0307 	and.w	r3, r3, #7
 8000750:	73bb      	strb	r3, [r7, #14]
    if (color)
 8000752:	797b      	ldrb	r3, [r7, #5]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d018      	beq.n	800078a <setPixel+0x6a>
        framebuffer[x][page] |=  (1 << bit);
 8000758:	79fa      	ldrb	r2, [r7, #7]
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	491b      	ldr	r1, [pc, #108]	@ (80007cc <setPixel+0xac>)
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	440a      	add	r2, r1
 8000762:	4413      	add	r3, r2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b25a      	sxtb	r2, r3
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	b25b      	sxtb	r3, r3
 8000772:	4313      	orrs	r3, r2
 8000774:	b259      	sxtb	r1, r3
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	b2c8      	uxtb	r0, r1
 800077c:	4913      	ldr	r1, [pc, #76]	@ (80007cc <setPixel+0xac>)
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	440a      	add	r2, r1
 8000782:	4413      	add	r3, r2
 8000784:	4602      	mov	r2, r0
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	e01b      	b.n	80007c2 <setPixel+0xa2>
    else
        framebuffer[x][page] &= ~(1 << bit);
 800078a:	79fa      	ldrb	r2, [r7, #7]
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	490f      	ldr	r1, [pc, #60]	@ (80007cc <setPixel+0xac>)
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	440a      	add	r2, r1
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b25a      	sxtb	r2, r3
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	2101      	movs	r1, #1
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	43db      	mvns	r3, r3
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	4013      	ands	r3, r2
 80007aa:	b259      	sxtb	r1, r3
 80007ac:	79fa      	ldrb	r2, [r7, #7]
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	b2c8      	uxtb	r0, r1
 80007b2:	4906      	ldr	r1, [pc, #24]	@ (80007cc <setPixel+0xac>)
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	440a      	add	r2, r1
 80007b8:	4413      	add	r3, r2
 80007ba:	4602      	mov	r2, r0
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	e000      	b.n	80007c2 <setPixel+0xa2>
    if (x >= 64 || y >= 128) return;
 80007c0:	bf00      	nop
}
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	200000c0 	.word	0x200000c0

080007d0 <lcd_write>:
//Write instruction (code==0) or data (code==1) to LCD
void lcd_write(char lcdmode, unsigned char value)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	460a      	mov	r2, r1
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	4613      	mov	r3, r2
 80007de:	71bb      	strb	r3, [r7, #6]
	//DDRD = 0xFF;     //Set port for write operation
	uint8_t pin = 0x01;
 80007e0:	2301      	movs	r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 8; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	e00c      	b.n	8000804 <lcd_write+0x34>
	    MX_GPIO_Pin_Mode(LCD_DATA_GPIO, pin, 0);
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	4619      	mov	r1, r3
 80007f2:	4815      	ldr	r0, [pc, #84]	@ (8000848 <lcd_write+0x78>)
 80007f4:	f000 fdb4 	bl	8001360 <MX_GPIO_Pin_Mode>
	    pin <<= 1;  // Shift left by 1 for next iteration
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 8; i++) {
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	3301      	adds	r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	2b07      	cmp	r3, #7
 8000808:	ddef      	ble.n	80007ea <lcd_write+0x1a>
	}

	set_rw(0);	     //Write operation
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f81e 	bl	800084c <set_rw>
	set_rs(lcdmode); //0 for instruction, 1 for data
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f836 	bl	8000884 <set_rs>
	set_e(1);
 8000818:	2001      	movs	r0, #1
 800081a:	f000 f84d 	bl	80008b8 <set_e>
	//PORTD = value;
	LCD_DATA_GPIO->ODR = (LCD_DATA_GPIO->ODR & 0xFF00) | value;
 800081e:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <lcd_write+0x78>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	4907      	ldr	r1, [pc, #28]	@ (8000848 <lcd_write+0x78>)
 800082a:	4313      	orrs	r3, r2
 800082c:	614b      	str	r3, [r1, #20]
    delay_us(10);
 800082e:	200a      	movs	r0, #10
 8000830:	f7ff ff2c 	bl	800068c <delay_us>
	set_e(0);
 8000834:	2000      	movs	r0, #0
 8000836:	f000 f83f 	bl	80008b8 <set_e>

	set_rs(0);
 800083a:	2000      	movs	r0, #0
 800083c:	f000 f822 	bl	8000884 <set_rs>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40020400 	.word	0x40020400

0800084c <set_rw>:
	return value;
}

//Set RW line
void set_rw(char status)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
    if(status)
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d006      	beq.n	800086a <set_rw+0x1e>
	{
        //PORTC |= 2;
        HAL_GPIO_WritePin(LCD_RW_GPIO, LCD_RW_PIN, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000862:	4807      	ldr	r0, [pc, #28]	@ (8000880 <set_rw+0x34>)
 8000864:	f001 fdee 	bl	8002444 <HAL_GPIO_WritePin>
    else
	{
	    //PORTC &= ~(2);
	    HAL_GPIO_WritePin(LCD_RW_GPIO, LCD_RW_PIN, GPIO_PIN_RESET);
	}
}
 8000868:	e005      	b.n	8000876 <set_rw+0x2a>
	    HAL_GPIO_WritePin(LCD_RW_GPIO, LCD_RW_PIN, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000870:	4803      	ldr	r0, [pc, #12]	@ (8000880 <set_rw+0x34>)
 8000872:	f001 fde7 	bl	8002444 <HAL_GPIO_WritePin>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40020000 	.word	0x40020000

08000884 <set_rs>:

//Set RS line
void set_rs(char status)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
    if(status)
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <set_rs+0x1c>
	{
        //PORTC |= 1;
        HAL_GPIO_WritePin(LCD_RS_GPIO, LCD_RS_PIN, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2101      	movs	r1, #1
 8000898:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <set_rs+0x30>)
 800089a:	f001 fdd3 	bl	8002444 <HAL_GPIO_WritePin>
    else
	{
	    //PORTC &= ~(1);
	    HAL_GPIO_WritePin(LCD_RS_GPIO, LCD_RS_PIN, GPIO_PIN_RESET);
	}
}
 800089e:	e004      	b.n	80008aa <set_rs+0x26>
	    HAL_GPIO_WritePin(LCD_RS_GPIO, LCD_RS_PIN, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <set_rs+0x30>)
 80008a6:	f001 fdcd 	bl	8002444 <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020000 	.word	0x40020000

080008b8 <set_e>:

//Set E line
void set_e(char status)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
    if(status)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d005      	beq.n	80008d4 <set_e+0x1c>
	{
        //PORTC |= 4;
        HAL_GPIO_WritePin(LCD_E_GPIO, LCD_E_PIN, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2102      	movs	r1, #2
 80008cc:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <set_e+0x30>)
 80008ce:	f001 fdb9 	bl	8002444 <HAL_GPIO_WritePin>
    else
	{
	    //PORTC &= ~(4);
	    HAL_GPIO_WritePin(LCD_E_GPIO, LCD_E_PIN, GPIO_PIN_RESET);
	}
}
 80008d2:	e004      	b.n	80008de <set_e+0x26>
	    HAL_GPIO_WritePin(LCD_E_GPIO, LCD_E_PIN, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2102      	movs	r1, #2
 80008d8:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <set_e+0x30>)
 80008da:	f001 fdb3 	bl	8002444 <HAL_GPIO_WritePin>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40020000 	.word	0x40020000

080008ec <lcd_cls>:
	}
}

//Clear LCD
void lcd_cls(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
	int x, y,x1;
    for(x = 0; x < 64; x++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e048      	b.n	800098a <lcd_cls+0x9e>
    {
		for(y = 0; y < 16; y++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	e03f      	b.n	800097e <lcd_cls+0x92>
		{
			if(x > 31)  //Enter lower part of screen => go to next page
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2b1f      	cmp	r3, #31
 8000902:	dd1d      	ble.n	8000940 <lcd_cls+0x54>
			{
		        x1 = x % 32;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	425a      	negs	r2, r3
 8000908:	f003 031f 	and.w	r3, r3, #31
 800090c:	f002 021f 	and.w	r2, r2, #31
 8000910:	bf58      	it	pl
 8000912:	4253      	negpl	r3, r2
 8000914:	607b      	str	r3, [r7, #4]
		        //y |= 8;
				//Set address
	            lcd_write(LCD_CMD_MODE, 0x80 | x1);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	b25b      	sxtb	r3, r3
 800091a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800091e:	b25b      	sxtb	r3, r3
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff ff53 	bl	80007d0 <lcd_write>
	            lcd_write(LCD_CMD_MODE, 0x80 | y);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	b25b      	sxtb	r3, r3
 800092e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000932:	b25b      	sxtb	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff ff49 	bl	80007d0 <lcd_write>
 800093e:	e013      	b.n	8000968 <lcd_cls+0x7c>
		    }
			else{
				//Set address
	            lcd_write(LCD_CMD_MODE, 0x80 | x);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	b25b      	sxtb	r3, r3
 8000944:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000948:	b25b      	sxtb	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4619      	mov	r1, r3
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff ff3e 	bl	80007d0 <lcd_write>
	            lcd_write(LCD_CMD_MODE, 0x80 | y);
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	b25b      	sxtb	r3, r3
 8000958:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800095c:	b25b      	sxtb	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4619      	mov	r1, r3
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff ff34 	bl	80007d0 <lcd_write>
			}


            //Write data
            lcd_write(LCD_DATA_MODE, 0);
 8000968:	2100      	movs	r1, #0
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff ff30 	bl	80007d0 <lcd_write>
            lcd_write(LCD_DATA_MODE, 0);
 8000970:	2100      	movs	r1, #0
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff ff2c 	bl	80007d0 <lcd_write>
		for(y = 0; y < 16; y++)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	3301      	adds	r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	ddbc      	ble.n	80008fe <lcd_cls+0x12>
    for(x = 0; x < 64; x++)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3301      	adds	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b3f      	cmp	r3, #63	@ 0x3f
 800098e:	ddb3      	ble.n	80008f8 <lcd_cls+0xc>
        }
    }
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <lcd_init>:



//Init LCD
void lcd_init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
    //Reset
    //PORTC &= ~(8);
    HAL_GPIO_WritePin(LCD_RST_GPIO, LCD_RST_PIN, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a6:	481f      	ldr	r0, [pc, #124]	@ (8000a24 <lcd_init+0x88>)
 80009a8:	f001 fd4c 	bl	8002444 <HAL_GPIO_WritePin>
    delay_ms(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff fe87 	bl	80006c0 <delay_ms>
    //PORTC |= 8;
    HAL_GPIO_WritePin(LCD_RST_GPIO, LCD_RST_PIN, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009b8:	481a      	ldr	r0, [pc, #104]	@ (8000a24 <lcd_init+0x88>)
 80009ba:	f001 fd43 	bl	8002444 <HAL_GPIO_WritePin>
    delay_ms(40);
 80009be:	2028      	movs	r0, #40	@ 0x28
 80009c0:	f7ff fe7e 	bl	80006c0 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x30);	//Use 8-bit mode parallel
 80009c4:	2130      	movs	r1, #48	@ 0x30
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff ff02 	bl	80007d0 <lcd_write>
    delay_ms(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fe77 	bl	80006c0 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x0C); //All on Cursor on, Blink on , Display on
 80009d2:	210c      	movs	r1, #12
 80009d4:	2000      	movs	r0, #0
 80009d6:	f7ff fefb 	bl	80007d0 <lcd_write>
    delay_ms(1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff fe70 	bl	80006c0 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x01); //Perform CLS in text mode to eliminate random chars from screen
 80009e0:	2101      	movs	r1, #1
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fef4 	bl	80007d0 <lcd_write>
    delay_ms(20);
 80009e8:	2014      	movs	r0, #20
 80009ea:	f7ff fe69 	bl	80006c0 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x34); //Switch to extended mode, redefine function set
 80009ee:	2134      	movs	r1, #52	@ 0x34
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff feed 	bl	80007d0 <lcd_write>
    delay_us(1000);
 80009f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009fa:	f7ff fe47 	bl	800068c <delay_us>

    lcd_write(LCD_CMD_MODE, 0x36); //Add graphic mode
 80009fe:	2136      	movs	r1, #54	@ 0x36
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fee5 	bl	80007d0 <lcd_write>
    delay_us(1000);
 8000a06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a0a:	f7ff fe3f 	bl	800068c <delay_us>

    lcd_write(LCD_CMD_MODE, 0x12); //Display control and display ON
 8000a0e:	2112      	movs	r1, #18
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fedd 	bl	80007d0 <lcd_write>
    delay_us(1000);
 8000a16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a1a:	f7ff fe37 	bl	800068c <delay_us>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40020000 	.word	0x40020000

08000a28 <lcd_draw_pointer>:
            lcd_write(LCD_DATA_MODE, ch1);
    	}
    }
}

void lcd_draw_pointer(uint8_t new_x, uint8_t new_y) {
 8000a28:	b4b0      	push	{r4, r5, r7}
 8000a2a:	b089      	sub	sp, #36	@ 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]
	static uint8_t prev_x = 9;
	static uint8_t prev_y = 0;
	static uint8_t prev_buff[1][7]={0};

	if(new_x > 57)new_x = 57;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b39      	cmp	r3, #57	@ 0x39
 8000a3c:	d901      	bls.n	8000a42 <lcd_draw_pointer+0x1a>
 8000a3e:	2339      	movs	r3, #57	@ 0x39
 8000a40:	71fb      	strb	r3, [r7, #7]
	if(new_y > 15)new_y = 15;
 8000a42:	79bb      	ldrb	r3, [r7, #6]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d901      	bls.n	8000a4c <lcd_draw_pointer+0x24>
 8000a48:	230f      	movs	r3, #15
 8000a4a:	71bb      	strb	r3, [r7, #6]


    for (uint8_t row = 0; row < 7; row++) {
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	77fb      	strb	r3, [r7, #31]
 8000a50:	e024      	b.n	8000a9c <lcd_draw_pointer+0x74>
    	for(int col = 0; col < 1; col++){
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	e01b      	b.n	8000a90 <lcd_draw_pointer+0x68>
        	framebuffer[prev_x + row][prev_y + col] = prev_buff[col][row];
 8000a58:	7ffc      	ldrb	r4, [r7, #31]
 8000a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b54 <lcd_draw_pointer+0x12c>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	7ffb      	ldrb	r3, [r7, #31]
 8000a62:	18d0      	adds	r0, r2, r3
 8000a64:	4b3c      	ldr	r3, [pc, #240]	@ (8000b58 <lcd_draw_pointer+0x130>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	18d1      	adds	r1, r2, r3
 8000a6e:	4d3b      	ldr	r5, [pc, #236]	@ (8000b5c <lcd_draw_pointer+0x134>)
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	4613      	mov	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	442b      	add	r3, r5
 8000a7a:	4423      	add	r3, r4
 8000a7c:	781c      	ldrb	r4, [r3, #0]
 8000a7e:	4a38      	ldr	r2, [pc, #224]	@ (8000b60 <lcd_draw_pointer+0x138>)
 8000a80:	0103      	lsls	r3, r0, #4
 8000a82:	4413      	add	r3, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	4622      	mov	r2, r4
 8000a88:	701a      	strb	r2, [r3, #0]
    	for(int col = 0; col < 1; col++){
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	dde0      	ble.n	8000a58 <lcd_draw_pointer+0x30>
    for (uint8_t row = 0; row < 7; row++) {
 8000a96:	7ffb      	ldrb	r3, [r7, #31]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	77fb      	strb	r3, [r7, #31]
 8000a9c:	7ffb      	ldrb	r3, [r7, #31]
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d9d7      	bls.n	8000a52 <lcd_draw_pointer+0x2a>
    	}
    }

    for (uint8_t row = 0; row < 7; row++) {
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
 8000aa6:	e020      	b.n	8000aea <lcd_draw_pointer+0xc2>
    	for(int col = 0; col < 1; col++){
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	e017      	b.n	8000ade <lcd_draw_pointer+0xb6>
        	prev_buff[col][row] = framebuffer[new_x + row][new_y + col];
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	441a      	add	r2, r3
 8000ab4:	79b9      	ldrb	r1, [r7, #6]
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	440b      	add	r3, r1
 8000aba:	7df9      	ldrb	r1, [r7, #23]
 8000abc:	4828      	ldr	r0, [pc, #160]	@ (8000b60 <lcd_draw_pointer+0x138>)
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	4402      	add	r2, r0
 8000ac2:	4413      	add	r3, r2
 8000ac4:	781c      	ldrb	r4, [r3, #0]
 8000ac6:	4825      	ldr	r0, [pc, #148]	@ (8000b5c <lcd_draw_pointer+0x134>)
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4613      	mov	r3, r2
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	1a9b      	subs	r3, r3, r2
 8000ad0:	4403      	add	r3, r0
 8000ad2:	440b      	add	r3, r1
 8000ad4:	4622      	mov	r2, r4
 8000ad6:	701a      	strb	r2, [r3, #0]
    	for(int col = 0; col < 1; col++){
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	3301      	adds	r3, #1
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	dde4      	ble.n	8000aae <lcd_draw_pointer+0x86>
    for (uint8_t row = 0; row < 7; row++) {
 8000ae4:	7dfb      	ldrb	r3, [r7, #23]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	75fb      	strb	r3, [r7, #23]
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	d9db      	bls.n	8000aa8 <lcd_draw_pointer+0x80>
    	}
    }

    for (uint8_t row = 0; row < 7; row++) {
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e020      	b.n	8000b38 <lcd_draw_pointer+0x110>
    	for(int col = 0; col < 1; col++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	e017      	b.n	8000b2c <lcd_draw_pointer+0x104>
    		framebuffer[new_x + row][new_y + col] = pointer_bitmap[col][row];
 8000afc:	7bfc      	ldrb	r4, [r7, #15]
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	18d0      	adds	r0, r2, r3
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	18d1      	adds	r1, r2, r3
 8000b0a:	4d16      	ldr	r5, [pc, #88]	@ (8000b64 <lcd_draw_pointer+0x13c>)
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	1a9b      	subs	r3, r3, r2
 8000b14:	442b      	add	r3, r5
 8000b16:	4423      	add	r3, r4
 8000b18:	781c      	ldrb	r4, [r3, #0]
 8000b1a:	4a11      	ldr	r2, [pc, #68]	@ (8000b60 <lcd_draw_pointer+0x138>)
 8000b1c:	0103      	lsls	r3, r0, #4
 8000b1e:	4413      	add	r3, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	4622      	mov	r2, r4
 8000b24:	701a      	strb	r2, [r3, #0]
    	for(int col = 0; col < 1; col++){
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	dde4      	ble.n	8000afc <lcd_draw_pointer+0xd4>
    for (uint8_t row = 0; row < 7; row++) {
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	3301      	adds	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d9db      	bls.n	8000af6 <lcd_draw_pointer+0xce>
    	}
    }

    prev_x = new_x;
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <lcd_draw_pointer+0x12c>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	7013      	strb	r3, [r2, #0]
    prev_y = new_y;
 8000b44:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <lcd_draw_pointer+0x130>)
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	7013      	strb	r3, [r2, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3724      	adds	r7, #36	@ 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bcb0      	pop	{r4, r5, r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000000 	.word	0x20000000
 8000b58:	200004c0 	.word	0x200004c0
 8000b5c:	200004c4 	.word	0x200004c4
 8000b60:	200000c0 	.word	0x200000c0
 8000b64:	08007f70 	.word	0x08007f70

08000b68 <lcd_draw_H_line>:
                framebuffer[row][byte] &= ~(1 << bit);
        }
    }
}

void lcd_draw_H_line(uint8_t x, uint8_t y, uint8_t lenght){
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	460b      	mov	r3, r1
 8000b74:	71bb      	strb	r3, [r7, #6]
 8000b76:	4613      	mov	r3, r2
 8000b78:	717b      	strb	r3, [r7, #5]
	for(int col = y; col < lenght; col++){
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	e02f      	b.n	8000be0 <lcd_draw_H_line+0x78>
		if(col==128)break;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b80      	cmp	r3, #128	@ 0x80
 8000b84:	d031      	beq.n	8000bea <lcd_draw_H_line+0x82>
		uint8_t page = col / 8;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	da00      	bge.n	8000b8e <lcd_draw_H_line+0x26>
 8000b8c:	3307      	adds	r3, #7
 8000b8e:	10db      	asrs	r3, r3, #3
 8000b90:	72fb      	strb	r3, [r7, #11]
		uint8_t bit = 7 - (col % 8);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	425a      	negs	r2, r3
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	f002 0207 	and.w	r2, r2, #7
 8000b9e:	bf58      	it	pl
 8000ba0:	4253      	negpl	r3, r2
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	f1c3 0307 	rsb	r3, r3, #7
 8000ba8:	72bb      	strb	r3, [r7, #10]
		framebuffer[ x][page] |= (0x01 << bit);
 8000baa:	79fa      	ldrb	r2, [r7, #7]
 8000bac:	7afb      	ldrb	r3, [r7, #11]
 8000bae:	4912      	ldr	r1, [pc, #72]	@ (8000bf8 <lcd_draw_H_line+0x90>)
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	440a      	add	r2, r1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25a      	sxtb	r2, r3
 8000bba:	7abb      	ldrb	r3, [r7, #10]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b259      	sxtb	r1, r3
 8000bc8:	79fa      	ldrb	r2, [r7, #7]
 8000bca:	7afb      	ldrb	r3, [r7, #11]
 8000bcc:	b2c8      	uxtb	r0, r1
 8000bce:	490a      	ldr	r1, [pc, #40]	@ (8000bf8 <lcd_draw_H_line+0x90>)
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	440a      	add	r2, r1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	701a      	strb	r2, [r3, #0]
	for(int col = y; col < lenght; col++){
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	797b      	ldrb	r3, [r7, #5]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbcb      	blt.n	8000b80 <lcd_draw_H_line+0x18>
	}
}
 8000be8:	e000      	b.n	8000bec <lcd_draw_H_line+0x84>
		if(col==128)break;
 8000bea:	bf00      	nop
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	200000c0 	.word	0x200000c0

08000bfc <lcd_draw_V_line>:

void lcd_draw_V_line(uint8_t x, uint8_t y, uint8_t lenght){
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	460b      	mov	r3, r1
 8000c08:	71bb      	strb	r3, [r7, #6]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	717b      	strb	r3, [r7, #5]
	uint8_t page = y / 8;
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	08db      	lsrs	r3, r3, #3
 8000c12:	73bb      	strb	r3, [r7, #14]
	uint8_t bit = 7 - (y % 8);
 8000c14:	79bb      	ldrb	r3, [r7, #6]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	737b      	strb	r3, [r7, #13]
    for (uint8_t row = x; row < lenght; row++) {
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e01d      	b.n	8000c62 <lcd_draw_V_line+0x66>
    	if(x==64)break;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b40      	cmp	r3, #64	@ 0x40
 8000c2a:	d01f      	beq.n	8000c6c <lcd_draw_V_line+0x70>
    	framebuffer[ row][page] |= (0x01 << bit);
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	4912      	ldr	r1, [pc, #72]	@ (8000c7c <lcd_draw_V_line+0x80>)
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	440a      	add	r2, r1
 8000c36:	4413      	add	r3, r2
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b25a      	sxtb	r2, r3
 8000c3c:	7b7b      	ldrb	r3, [r7, #13]
 8000c3e:	2101      	movs	r1, #1
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	b25b      	sxtb	r3, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b259      	sxtb	r1, r3
 8000c4a:	7bfa      	ldrb	r2, [r7, #15]
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	b2c8      	uxtb	r0, r1
 8000c50:	490a      	ldr	r1, [pc, #40]	@ (8000c7c <lcd_draw_V_line+0x80>)
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	440a      	add	r2, r1
 8000c56:	4413      	add	r3, r2
 8000c58:	4602      	mov	r2, r0
 8000c5a:	701a      	strb	r2, [r3, #0]
    for (uint8_t row = x; row < lenght; row++) {
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	797b      	ldrb	r3, [r7, #5]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d3dd      	bcc.n	8000c26 <lcd_draw_V_line+0x2a>
    }
}
 8000c6a:	e000      	b.n	8000c6e <lcd_draw_V_line+0x72>
    	if(x==64)break;
 8000c6c:	bf00      	nop
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200000c0 	.word	0x200000c0

08000c80 <lcd_draw_signalStrenght>:

void lcd_draw_signalStrenght(uint8_t value){
 8000c80:	b480      	push	{r7}
 8000c82:	b087      	sub	sp, #28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]

	uint8_t page = 15;
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	743b      	strb	r3, [r7, #16]
	uint8_t y = 121;
 8000c8e:	2379      	movs	r3, #121	@ 0x79
 8000c90:	75fb      	strb	r3, [r7, #23]
	uint8_t num_bars = 7- (value/14);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	085b      	lsrs	r3, r3, #1
 8000c96:	4a82      	ldr	r2, [pc, #520]	@ (8000ea0 <lcd_draw_signalStrenght+0x220>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f1c3 0307 	rsb	r3, r3, #7
 8000ca4:	73fb      	strb	r3, [r7, #15]

    for(uint8_t row = 0; row < 7; row++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	75bb      	strb	r3, [r7, #22]
 8000caa:	e02c      	b.n	8000d06 <lcd_draw_signalStrenght+0x86>
    	for(uint8_t col = y; col < 128; col++){
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	757b      	strb	r3, [r7, #21]
 8000cb0:	e022      	b.n	8000cf8 <lcd_draw_signalStrenght+0x78>
    		uint8_t bit = 7 - (col % 8);
 8000cb2:	7d7b      	ldrb	r3, [r7, #21]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	733b      	strb	r3, [r7, #12]
    			framebuffer[ row][page] &= ~(0x01 << bit); // clear the bit
 8000cbe:	7dba      	ldrb	r2, [r7, #22]
 8000cc0:	7c3b      	ldrb	r3, [r7, #16]
 8000cc2:	4978      	ldr	r1, [pc, #480]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	440a      	add	r2, r1
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25a      	sxtb	r2, r3
 8000cce:	7b3b      	ldrb	r3, [r7, #12]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	b259      	sxtb	r1, r3
 8000ce0:	7dba      	ldrb	r2, [r7, #22]
 8000ce2:	7c3b      	ldrb	r3, [r7, #16]
 8000ce4:	b2c8      	uxtb	r0, r1
 8000ce6:	496f      	ldr	r1, [pc, #444]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	440a      	add	r2, r1
 8000cec:	4413      	add	r3, r2
 8000cee:	4602      	mov	r2, r0
 8000cf0:	701a      	strb	r2, [r3, #0]
    	for(uint8_t col = y; col < 128; col++){
 8000cf2:	7d7b      	ldrb	r3, [r7, #21]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	757b      	strb	r3, [r7, #21]
 8000cf8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dad8      	bge.n	8000cb2 <lcd_draw_signalStrenght+0x32>
    for(uint8_t row = 0; row < 7; row++) {
 8000d00:	7dbb      	ldrb	r3, [r7, #22]
 8000d02:	3301      	adds	r3, #1
 8000d04:	75bb      	strb	r3, [r7, #22]
 8000d06:	7dbb      	ldrb	r3, [r7, #22]
 8000d08:	2b06      	cmp	r3, #6
 8000d0a:	d9cf      	bls.n	8000cac <lcd_draw_signalStrenght+0x2c>
    		//lcd_update();
    	}
    }

	if(value < 14){
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b0d      	cmp	r3, #13
 8000d10:	d86c      	bhi.n	8000dec <lcd_draw_signalStrenght+0x16c>
	    for(uint8_t row = 0; row < 7; row++) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	753b      	strb	r3, [r7, #20]
 8000d16:	e065      	b.n	8000de4 <lcd_draw_signalStrenght+0x164>
	    	for(uint8_t col = y; col < 128; col++){
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	74fb      	strb	r3, [r7, #19]
 8000d1c:	e05b      	b.n	8000dd6 <lcd_draw_signalStrenght+0x156>
	    		uint8_t bit = 7 - (col % 8);
 8000d1e:	7cfb      	ldrb	r3, [r7, #19]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	737b      	strb	r3, [r7, #13]
	    		if(row == (col - y)){
 8000d2a:	7d3a      	ldrb	r2, [r7, #20]
 8000d2c:	7cf9      	ldrb	r1, [r7, #19]
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	1acb      	subs	r3, r1, r3
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d132      	bne.n	8000d9c <lcd_draw_signalStrenght+0x11c>
	    			framebuffer[ row][page] |= (0x01 << bit); // set the bit
 8000d36:	7d3a      	ldrb	r2, [r7, #20]
 8000d38:	7c3b      	ldrb	r3, [r7, #16]
 8000d3a:	495a      	ldr	r1, [pc, #360]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	440a      	add	r2, r1
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b25a      	sxtb	r2, r3
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	4313      	orrs	r3, r2
 8000d52:	b259      	sxtb	r1, r3
 8000d54:	7d3a      	ldrb	r2, [r7, #20]
 8000d56:	7c3b      	ldrb	r3, [r7, #16]
 8000d58:	b2c8      	uxtb	r0, r1
 8000d5a:	4952      	ldr	r1, [pc, #328]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	440a      	add	r2, r1
 8000d60:	4413      	add	r3, r2
 8000d62:	4602      	mov	r2, r0
 8000d64:	701a      	strb	r2, [r3, #0]
	    			framebuffer[ row][page] |= (0x01 << (6 - bit)); // set the bit
 8000d66:	7d3a      	ldrb	r2, [r7, #20]
 8000d68:	7c3b      	ldrb	r3, [r7, #16]
 8000d6a:	494e      	ldr	r1, [pc, #312]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	440a      	add	r2, r1
 8000d70:	4413      	add	r3, r2
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25a      	sxtb	r2, r3
 8000d76:	7b7b      	ldrb	r3, [r7, #13]
 8000d78:	f1c3 0306 	rsb	r3, r3, #6
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b259      	sxtb	r1, r3
 8000d88:	7d3a      	ldrb	r2, [r7, #20]
 8000d8a:	7c3b      	ldrb	r3, [r7, #16]
 8000d8c:	b2c8      	uxtb	r0, r1
 8000d8e:	4945      	ldr	r1, [pc, #276]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	440a      	add	r2, r1
 8000d94:	4413      	add	r3, r2
 8000d96:	4602      	mov	r2, r0
 8000d98:	701a      	strb	r2, [r3, #0]
	    			break;
 8000d9a:	e020      	b.n	8000dde <lcd_draw_signalStrenght+0x15e>
	    		}
	    		else{
	    			framebuffer[ row][page] &= ~(0x01 << bit); // clear the bit
 8000d9c:	7d3a      	ldrb	r2, [r7, #20]
 8000d9e:	7c3b      	ldrb	r3, [r7, #16]
 8000da0:	4940      	ldr	r1, [pc, #256]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	440a      	add	r2, r1
 8000da6:	4413      	add	r3, r2
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b25a      	sxtb	r2, r3
 8000dac:	7b7b      	ldrb	r3, [r7, #13]
 8000dae:	2101      	movs	r1, #1
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	4013      	ands	r3, r2
 8000dbc:	b259      	sxtb	r1, r3
 8000dbe:	7d3a      	ldrb	r2, [r7, #20]
 8000dc0:	7c3b      	ldrb	r3, [r7, #16]
 8000dc2:	b2c8      	uxtb	r0, r1
 8000dc4:	4937      	ldr	r1, [pc, #220]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	440a      	add	r2, r1
 8000dca:	4413      	add	r3, r2
 8000dcc:	4602      	mov	r2, r0
 8000dce:	701a      	strb	r2, [r3, #0]
	    	for(uint8_t col = y; col < 128; col++){
 8000dd0:	7cfb      	ldrb	r3, [r7, #19]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	74fb      	strb	r3, [r7, #19]
 8000dd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	da9f      	bge.n	8000d1e <lcd_draw_signalStrenght+0x9e>
	    for(uint8_t row = 0; row < 7; row++) {
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	753b      	strb	r3, [r7, #20]
 8000de4:	7d3b      	ldrb	r3, [r7, #20]
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d996      	bls.n	8000d18 <lcd_draw_signalStrenght+0x98>
	    	if(row==0)break;
	    	y++;
	    }
	}

}
 8000dea:	e053      	b.n	8000e94 <lcd_draw_signalStrenght+0x214>
	    for(uint8_t row = 6; row >= 0; row--) {
 8000dec:	2306      	movs	r3, #6
 8000dee:	74bb      	strb	r3, [r7, #18]
	    	for(uint8_t col = y; col < 128; col++){
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	747b      	strb	r3, [r7, #17]
 8000df4:	e03f      	b.n	8000e76 <lcd_draw_signalStrenght+0x1f6>
	    		uint8_t bit = 7 - (col % 8);
 8000df6:	7c7b      	ldrb	r3, [r7, #17]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	73bb      	strb	r3, [r7, #14]
	    		if(bit < num_bars){
 8000e02:	7bba      	ldrb	r2, [r7, #14]
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d21a      	bcs.n	8000e40 <lcd_draw_signalStrenght+0x1c0>
	    			framebuffer[ row][page] &= ~(0x01 << bit); // clear the bit
 8000e0a:	7cba      	ldrb	r2, [r7, #18]
 8000e0c:	7c3b      	ldrb	r3, [r7, #16]
 8000e0e:	4925      	ldr	r1, [pc, #148]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	440a      	add	r2, r1
 8000e14:	4413      	add	r3, r2
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	b259      	sxtb	r1, r3
 8000e2c:	7cba      	ldrb	r2, [r7, #18]
 8000e2e:	7c3b      	ldrb	r3, [r7, #16]
 8000e30:	b2c8      	uxtb	r0, r1
 8000e32:	491c      	ldr	r1, [pc, #112]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	440a      	add	r2, r1
 8000e38:	4413      	add	r3, r2
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e017      	b.n	8000e70 <lcd_draw_signalStrenght+0x1f0>
	    			framebuffer[ row][page] |= (0x01 << bit); // set the bit
 8000e40:	7cba      	ldrb	r2, [r7, #18]
 8000e42:	7c3b      	ldrb	r3, [r7, #16]
 8000e44:	4917      	ldr	r1, [pc, #92]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	440a      	add	r2, r1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b25a      	sxtb	r2, r3
 8000e50:	7bbb      	ldrb	r3, [r7, #14]
 8000e52:	2101      	movs	r1, #1
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	b259      	sxtb	r1, r3
 8000e5e:	7cba      	ldrb	r2, [r7, #18]
 8000e60:	7c3b      	ldrb	r3, [r7, #16]
 8000e62:	b2c8      	uxtb	r0, r1
 8000e64:	490f      	ldr	r1, [pc, #60]	@ (8000ea4 <lcd_draw_signalStrenght+0x224>)
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	440a      	add	r2, r1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	701a      	strb	r2, [r3, #0]
	    	for(uint8_t col = y; col < 128; col++){
 8000e70:	7c7b      	ldrb	r3, [r7, #17]
 8000e72:	3301      	adds	r3, #1
 8000e74:	747b      	strb	r3, [r7, #17]
 8000e76:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	dabb      	bge.n	8000df6 <lcd_draw_signalStrenght+0x176>
	    	if(row==0)break;
 8000e7e:	7cbb      	ldrb	r3, [r7, #18]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d006      	beq.n	8000e92 <lcd_draw_signalStrenght+0x212>
	    	y++;
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	3301      	adds	r3, #1
 8000e88:	75fb      	strb	r3, [r7, #23]
	    for(uint8_t row = 6; row >= 0; row--) {
 8000e8a:	7cbb      	ldrb	r3, [r7, #18]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	74bb      	strb	r3, [r7, #18]
	    	for(uint8_t col = y; col < 128; col++){
 8000e90:	e7ae      	b.n	8000df0 <lcd_draw_signalStrenght+0x170>
	    	if(row==0)break;
 8000e92:	bf00      	nop
}
 8000e94:	bf00      	nop
 8000e96:	371c      	adds	r7, #28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	92492493 	.word	0x92492493
 8000ea4:	200000c0 	.word	0x200000c0

08000ea8 <lcd_draw_battery>:

void lcd_draw_battery(uint8_t x, uint8_t y, uint8_t value){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	71bb      	strb	r3, [r7, #6]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	717b      	strb	r3, [r7, #5]

	uint8_t level = 11 - (value / 10);
 8000eba:	797b      	ldrb	r3, [r7, #5]
 8000ebc:	4a49      	ldr	r2, [pc, #292]	@ (8000fe4 <lcd_draw_battery+0x13c>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	08db      	lsrs	r3, r3, #3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f1c3 030b 	rsb	r3, r3, #11
 8000eca:	737b      	strb	r3, [r7, #13]
    for (uint8_t row = x; row < (x + 5); row++) {
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e07a      	b.n	8000fc8 <lcd_draw_battery+0x120>
        for (uint8_t col = y; col < y+12; col++) {
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	73bb      	strb	r3, [r7, #14]
 8000ed6:	e06e      	b.n	8000fb6 <lcd_draw_battery+0x10e>
            uint8_t byte = col / 8;
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	08db      	lsrs	r3, r3, #3
 8000edc:	733b      	strb	r3, [r7, #12]
            uint8_t bit = 7 - (col % 8);
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	72fb      	strb	r3, [r7, #11]

            // Read corresponding bit from miriair_bitmap
            uint8_t src_byte = battery_bitmap[row-x][(col-y)/8];
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	1ad2      	subs	r2, r2, r3
 8000ef0:	7bb9      	ldrb	r1, [r7, #14]
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	1acb      	subs	r3, r1, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da00      	bge.n	8000efc <lcd_draw_battery+0x54>
 8000efa:	3307      	adds	r3, #7
 8000efc:	10db      	asrs	r3, r3, #3
 8000efe:	4618      	mov	r0, r3
 8000f00:	4939      	ldr	r1, [pc, #228]	@ (8000fe8 <lcd_draw_battery+0x140>)
 8000f02:	0053      	lsls	r3, r2, #1
 8000f04:	440b      	add	r3, r1
 8000f06:	4403      	add	r3, r0
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	72bb      	strb	r3, [r7, #10]
            uint8_t bit_num = 7 -  ((col - y) % 8);
 8000f0c:	7bba      	ldrb	r2, [r7, #14]
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	425a      	negs	r2, r3
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	f002 0207 	and.w	r2, r2, #7
 8000f1c:	bf58      	it	pl
 8000f1e:	4253      	negpl	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	727b      	strb	r3, [r7, #9]
            uint8_t bit_val = (src_byte >> bit_num) & 0x01;
 8000f28:	7aba      	ldrb	r2, [r7, #10]
 8000f2a:	7a7b      	ldrb	r3, [r7, #9]
 8000f2c:	fa42 f303 	asr.w	r3, r2, r3
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	723b      	strb	r3, [r7, #8]

            if (bit_val || (col - y) >= level)
 8000f38:	7a3b      	ldrb	r3, [r7, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d105      	bne.n	8000f4a <lcd_draw_battery+0xa2>
 8000f3e:	7bba      	ldrb	r2, [r7, #14]
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	1ad2      	subs	r2, r2, r3
 8000f44:	7b7b      	ldrb	r3, [r7, #13]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	db18      	blt.n	8000f7c <lcd_draw_battery+0xd4>
                framebuffer[row][byte] |=  (1 << bit);
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	7b3b      	ldrb	r3, [r7, #12]
 8000f4e:	4927      	ldr	r1, [pc, #156]	@ (8000fec <lcd_draw_battery+0x144>)
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	440a      	add	r2, r1
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b25a      	sxtb	r2, r3
 8000f5a:	7afb      	ldrb	r3, [r7, #11]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b259      	sxtb	r1, r3
 8000f68:	7bfa      	ldrb	r2, [r7, #15]
 8000f6a:	7b3b      	ldrb	r3, [r7, #12]
 8000f6c:	b2c8      	uxtb	r0, r1
 8000f6e:	491f      	ldr	r1, [pc, #124]	@ (8000fec <lcd_draw_battery+0x144>)
 8000f70:	0112      	lsls	r2, r2, #4
 8000f72:	440a      	add	r2, r1
 8000f74:	4413      	add	r3, r2
 8000f76:	4602      	mov	r2, r0
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e019      	b.n	8000fb0 <lcd_draw_battery+0x108>
            else
                framebuffer[row][byte] &= ~(1 << bit);
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	7b3b      	ldrb	r3, [r7, #12]
 8000f80:	491a      	ldr	r1, [pc, #104]	@ (8000fec <lcd_draw_battery+0x144>)
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	440a      	add	r2, r1
 8000f86:	4413      	add	r3, r2
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b25a      	sxtb	r2, r3
 8000f8c:	7afb      	ldrb	r3, [r7, #11]
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	b259      	sxtb	r1, r3
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	b2c8      	uxtb	r0, r1
 8000fa4:	4911      	ldr	r1, [pc, #68]	@ (8000fec <lcd_draw_battery+0x144>)
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	440a      	add	r2, r1
 8000faa:	4413      	add	r3, r2
 8000fac:	4602      	mov	r2, r0
 8000fae:	701a      	strb	r2, [r3, #0]
        for (uint8_t col = y; col < y+12; col++) {
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	f103 020b 	add.w	r2, r3, #11
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	da8a      	bge.n	8000ed8 <lcd_draw_battery+0x30>
    for (uint8_t row = x; row < (x + 5); row++) {
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	1d1a      	adds	r2, r3, #4
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	f6bf af7f 	bge.w	8000ed2 <lcd_draw_battery+0x2a>
            //lcd_update();
        }

    }

}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	cccccccd 	.word	0xcccccccd
 8000fe8:	08007f64 	.word	0x08007f64
 8000fec:	200000c0 	.word	0x200000c0

08000ff0 <lcd_update>:


void lcd_update(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	uint8_t ch0;
	uint8_t ch1;
	uint8_t row_;
    for (uint8_t row = 0; row < 64; row++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e044      	b.n	8001086 <lcd_update+0x96>

    	for(int col = 0; col < 8; col++){
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	e03b      	b.n	800107a <lcd_update+0x8a>
            row_ = row % 32;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	71bb      	strb	r3, [r7, #6]
            uint8_t col_ = col;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	71fb      	strb	r3, [r7, #7]
        	if(row >= 32)  //Enter lower part of screen => go to next page
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	2b1f      	cmp	r3, #31
 8001012:	d903      	bls.n	800101c <lcd_update+0x2c>
        	{
                col_ |= 0x08;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	71fb      	strb	r3, [r7, #7]
            }
//        	else{
//
//        	}

        	lcd_write(LCD_CMD_MODE, 0x80 | row_);
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4619      	mov	r1, r3
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fbd2 	bl	80007d0 <lcd_write>
        	lcd_write(LCD_CMD_MODE, 0x80 + col_);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	3b80      	subs	r3, #128	@ 0x80
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4619      	mov	r1, r3
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff fbcb 	bl	80007d0 <lcd_write>

            ch0 = framebuffer[row][col*2];
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4915      	ldr	r1, [pc, #84]	@ (8001098 <lcd_update+0xa8>)
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	440a      	add	r2, r1
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	717b      	strb	r3, [r7, #5]
            ch1 = framebuffer[row][(col*2)+1];
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	3301      	adds	r3, #1
 8001054:	4910      	ldr	r1, [pc, #64]	@ (8001098 <lcd_update+0xa8>)
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	440a      	add	r2, r1
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	713b      	strb	r3, [r7, #4]


            lcd_write(LCD_DATA_MODE, ch0);
 8001060:	797b      	ldrb	r3, [r7, #5]
 8001062:	4619      	mov	r1, r3
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff fbb3 	bl	80007d0 <lcd_write>
            lcd_write(LCD_DATA_MODE, ch1);
 800106a:	793b      	ldrb	r3, [r7, #4]
 800106c:	4619      	mov	r1, r3
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff fbae 	bl	80007d0 <lcd_write>
    	for(int col = 0; col < 8; col++){
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	3301      	adds	r3, #1
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	2b07      	cmp	r3, #7
 800107e:	ddc0      	ble.n	8001002 <lcd_update+0x12>
    for (uint8_t row = 0; row < 64; row++) {
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	3301      	adds	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2b3f      	cmp	r3, #63	@ 0x3f
 800108a:	d9b7      	bls.n	8000ffc <lcd_update+0xc>
    	}
    }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000c0 	.word	0x200000c0

0800109c <lcd_putchar_>:
    }
}



void lcd_putchar_(uint8_t x, uint8_t y, char c) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	460b      	mov	r3, r1
 80010a8:	71bb      	strb	r3, [r7, #6]
 80010aa:	4613      	mov	r3, r2
 80010ac:	717b      	strb	r3, [r7, #5]
    if (c < 32 || c > 126) return;
 80010ae:	797b      	ldrb	r3, [r7, #5]
 80010b0:	2b1f      	cmp	r3, #31
 80010b2:	d93b      	bls.n	800112c <lcd_putchar_+0x90>
 80010b4:	797b      	ldrb	r3, [r7, #5]
 80010b6:	2b7e      	cmp	r3, #126	@ 0x7e
 80010b8:	d838      	bhi.n	800112c <lcd_putchar_+0x90>
    const uint8_t *bitmap = font_5x7[c - 32];
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	f1a3 0220 	sub.w	r2, r3, #32
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001134 <lcd_putchar_+0x98>)
 80010c8:	4413      	add	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
    uint8_t bits=0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
    for (uint8_t row = 0; row < 7; row++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	75fb      	strb	r3, [r7, #23]
 80010d4:	e026      	b.n	8001124 <lcd_putchar_+0x88>
    		bits = bitmap[row];
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4413      	add	r3, r2
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	73fb      	strb	r3, [r7, #15]
        for (uint8_t col = 0; col < 5; col++) {  // 5 visible columns
 80010e0:	2300      	movs	r3, #0
 80010e2:	75bb      	strb	r3, [r7, #22]
 80010e4:	e018      	b.n	8001118 <lcd_putchar_+0x7c>
            if (bits & (1 << (4 - col))) {       // MSB on left
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	7dbb      	ldrb	r3, [r7, #22]
 80010ea:	f1c3 0304 	rsb	r3, r3, #4
 80010ee:	fa42 f303 	asr.w	r3, r2, r3
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <lcd_putchar_+0x76>
                setPixel(x + row, y + col, 1);   // x grows right, y grows down
 80010fa:	79fa      	ldrb	r2, [r7, #7]
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	4413      	add	r3, r2
 8001100:	b2d8      	uxtb	r0, r3
 8001102:	79ba      	ldrb	r2, [r7, #6]
 8001104:	7dbb      	ldrb	r3, [r7, #22]
 8001106:	4413      	add	r3, r2
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fb07 	bl	8000720 <setPixel>
        for (uint8_t col = 0; col < 5; col++) {  // 5 visible columns
 8001112:	7dbb      	ldrb	r3, [r7, #22]
 8001114:	3301      	adds	r3, #1
 8001116:	75bb      	strb	r3, [r7, #22]
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	2b04      	cmp	r3, #4
 800111c:	d9e3      	bls.n	80010e6 <lcd_putchar_+0x4a>
    for (uint8_t row = 0; row < 7; row++) {
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	3301      	adds	r3, #1
 8001122:	75fb      	strb	r3, [r7, #23]
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	2b06      	cmp	r3, #6
 8001128:	d9d5      	bls.n	80010d6 <lcd_putchar_+0x3a>
 800112a:	e000      	b.n	800112e <lcd_putchar_+0x92>
    if (c < 32 || c > 126) return;
 800112c:	bf00      	nop
            }

        }
    }
}
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	08008140 	.word	0x08008140

08001138 <lcd_putchar_3x5>:

void lcd_putchar_3x5(uint8_t x, uint8_t y, char c) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	460b      	mov	r3, r1
 8001144:	71bb      	strb	r3, [r7, #6]
 8001146:	4613      	mov	r3, r2
 8001148:	717b      	strb	r3, [r7, #5]
    if (c < 32 || c > 0x5A) return;
 800114a:	797b      	ldrb	r3, [r7, #5]
 800114c:	2b1f      	cmp	r3, #31
 800114e:	d944      	bls.n	80011da <lcd_putchar_3x5+0xa2>
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	2b5a      	cmp	r3, #90	@ 0x5a
 8001154:	d841      	bhi.n	80011da <lcd_putchar_3x5+0xa2>

    if (c >= 'a' && c <= 'z') c -= 32;
 8001156:	797b      	ldrb	r3, [r7, #5]
 8001158:	2b60      	cmp	r3, #96	@ 0x60
 800115a:	d905      	bls.n	8001168 <lcd_putchar_3x5+0x30>
 800115c:	797b      	ldrb	r3, [r7, #5]
 800115e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001160:	d802      	bhi.n	8001168 <lcd_putchar_3x5+0x30>
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	3b20      	subs	r3, #32
 8001166:	717b      	strb	r3, [r7, #5]

    const uint8_t *bitmap = font_3x5[c - 32];
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	f1a3 0220 	sub.w	r2, r3, #32
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	4a1b      	ldr	r2, [pc, #108]	@ (80011e4 <lcd_putchar_3x5+0xac>)
 8001176:	4413      	add	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
    uint8_t bits=0;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
    for (uint8_t row = 0; row < 5; row++) {
 800117e:	2300      	movs	r3, #0
 8001180:	75fb      	strb	r3, [r7, #23]
 8001182:	e026      	b.n	80011d2 <lcd_putchar_3x5+0x9a>
    		bits = bitmap[row];
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	73fb      	strb	r3, [r7, #15]
        for (uint8_t col = 0; col < 3; col++) {  // 5 visible columns
 800118e:	2300      	movs	r3, #0
 8001190:	75bb      	strb	r3, [r7, #22]
 8001192:	e018      	b.n	80011c6 <lcd_putchar_3x5+0x8e>
            if (bits & (1 << (2 - col))) {       // MSB on left
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	7dbb      	ldrb	r3, [r7, #22]
 8001198:	f1c3 0302 	rsb	r3, r3, #2
 800119c:	fa42 f303 	asr.w	r3, r2, r3
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00b      	beq.n	80011c0 <lcd_putchar_3x5+0x88>
                setPixel(x + row, y + col, 1);   // x grows right, y grows down
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	4413      	add	r3, r2
 80011ae:	b2d8      	uxtb	r0, r3
 80011b0:	79ba      	ldrb	r2, [r7, #6]
 80011b2:	7dbb      	ldrb	r3, [r7, #22]
 80011b4:	4413      	add	r3, r2
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fab0 	bl	8000720 <setPixel>
        for (uint8_t col = 0; col < 3; col++) {  // 5 visible columns
 80011c0:	7dbb      	ldrb	r3, [r7, #22]
 80011c2:	3301      	adds	r3, #1
 80011c4:	75bb      	strb	r3, [r7, #22]
 80011c6:	7dbb      	ldrb	r3, [r7, #22]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d9e3      	bls.n	8001194 <lcd_putchar_3x5+0x5c>
    for (uint8_t row = 0; row < 5; row++) {
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	3301      	adds	r3, #1
 80011d0:	75fb      	strb	r3, [r7, #23]
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d9d5      	bls.n	8001184 <lcd_putchar_3x5+0x4c>
 80011d8:	e000      	b.n	80011dc <lcd_putchar_3x5+0xa4>
    if (c < 32 || c > 0x5A) return;
 80011da:	bf00      	nop
            }

        }
    }
}
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	08007f78 	.word	0x08007f78

080011e8 <lcd_puts>:




void lcd_puts(uint8_t x, uint8_t y, const char *str) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	603a      	str	r2, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	460b      	mov	r3, r1
 80011f6:	71bb      	strb	r3, [r7, #6]
    while (*str && y < (128 - 6)) { // stop early if too close to right edge
 80011f8:	e00b      	b.n	8001212 <lcd_puts+0x2a>
        lcd_putchar_(x, y, *str++);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	603a      	str	r2, [r7, #0]
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	79b9      	ldrb	r1, [r7, #6]
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff48 	bl	800109c <lcd_putchar_>
        y += 6;  // 5-pixel char + 1 space
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	3306      	adds	r3, #6
 8001210:	71bb      	strb	r3, [r7, #6]
    while (*str && y < (128 - 6)) { // stop early if too close to right edge
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <lcd_puts+0x38>
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	2b79      	cmp	r3, #121	@ 0x79
 800121e:	d9ec      	bls.n	80011fa <lcd_puts+0x12>
    }
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <lcd_puts_3x5>:

void lcd_puts_3x5(uint8_t x, uint8_t y, const char *str){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	603a      	str	r2, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
 8001234:	460b      	mov	r3, r1
 8001236:	71bb      	strb	r3, [r7, #6]
    while (*str && y < (128 - 6)) { // stop early if too close to right edge
 8001238:	e00b      	b.n	8001252 <lcd_puts_3x5+0x2a>
        lcd_putchar_3x5(x, y, *str++);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	603a      	str	r2, [r7, #0]
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	79b9      	ldrb	r1, [r7, #6]
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff76 	bl	8001138 <lcd_putchar_3x5>
        y += 4;  // 5-pixel char + 1 space
 800124c:	79bb      	ldrb	r3, [r7, #6]
 800124e:	3304      	adds	r3, #4
 8001250:	71bb      	strb	r3, [r7, #6]
    while (*str && y < (128 - 6)) { // stop early if too close to right edge
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <lcd_puts_3x5+0x38>
 800125a:	79bb      	ldrb	r3, [r7, #6]
 800125c:	2b79      	cmp	r3, #121	@ 0x79
 800125e:	d9ec      	bls.n	800123a <lcd_puts_3x5+0x12>
    }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b33      	ldr	r3, [pc, #204]	@ (8001350 <MX_GPIO_Init+0xe8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a32      	ldr	r2, [pc, #200]	@ (8001350 <MX_GPIO_Init+0xe8>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b30      	ldr	r3, [pc, #192]	@ (8001350 <MX_GPIO_Init+0xe8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <MX_GPIO_Init+0xe8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001350 <MX_GPIO_Init+0xe8>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <MX_GPIO_Init+0xe8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <MX_GPIO_Init+0xe8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a24      	ldr	r2, [pc, #144]	@ (8001350 <MX_GPIO_Init+0xe8>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <MX_GPIO_Init+0xe8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2191      	movs	r1, #145	@ 0x91
 80012d6:	481f      	ldr	r0, [pc, #124]	@ (8001354 <MX_GPIO_Init+0xec>)
 80012d8:	f001 f8b4 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80012dc:	2200      	movs	r2, #0
 80012de:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 80012e2:	481d      	ldr	r0, [pc, #116]	@ (8001358 <MX_GPIO_Init+0xf0>)
 80012e4:	f001 f8ae 	bl	8002444 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012e8:	2200      	movs	r2, #0
 80012ea:	21ff      	movs	r1, #255	@ 0xff
 80012ec:	481b      	ldr	r0, [pc, #108]	@ (800135c <MX_GPIO_Init+0xf4>)
 80012ee:	f001 f8a9 	bl	8002444 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC4 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7;
 80012f2:	2391      	movs	r3, #145	@ 0x91
 80012f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4619      	mov	r1, r3
 8001308:	4812      	ldr	r0, [pc, #72]	@ (8001354 <MX_GPIO_Init+0xec>)
 800130a:	f000 fe13 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800130e:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 8001312:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	480c      	ldr	r0, [pc, #48]	@ (8001358 <MX_GPIO_Init+0xf0>)
 8001328:	f000 fe04 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800132c:	23ff      	movs	r3, #255	@ 0xff
 800132e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <MX_GPIO_Init+0xf4>)
 8001344:	f000 fdf6 	bl	8001f34 <HAL_GPIO_Init>

}
 8001348:	bf00      	nop
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40023800 	.word	0x40023800
 8001354:	40020800 	.word	0x40020800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020400 	.word	0x40020400

08001360 <MX_GPIO_Pin_Mode>:

/* USER CODE BEGIN 2 */
void MX_GPIO_Pin_Mode(GPIO_TypeDef  *GPIOx, uint16_t GPIO_Pin, uint8_t mode){
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
 800136c:	4613      	mov	r3, r2
 800136e:	707b      	strb	r3, [r7, #1]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
	// 1. De-initialize the pin first (optional but recommended)
	HAL_GPIO_DeInit(GPIOx, GPIO_Pin);
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	4619      	mov	r1, r3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 ff69 	bl	800225c <HAL_GPIO_DeInit>

	if(mode){
 800138a:	787b      	ldrb	r3, [r7, #1]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00c      	beq.n	80013aa <MX_GPIO_Pin_Mode+0x4a>
		// 2. Reconfigure it as input
		GPIO_InitStruct.Pin = GPIO_Pin;
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;  // Or GPIO_PULLUP / GPIO_PULLDOWN
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fdc6 	bl	8001f34 <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
	}
}
 80013a8:	e00d      	b.n	80013c6 <MX_GPIO_Pin_Mode+0x66>
		GPIO_InitStruct.Pin = GPIO_Pin;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
 80013ae:	2301      	movs	r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fdb7 	bl	8001f34 <HAL_GPIO_Init>
}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d6:	f000 fc89 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013da:	f000 f833 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013de:	f7ff ff43 	bl	8001268 <MX_GPIO_Init>
  MX_TIM1_Init();
 80013e2:	f000 fb75 	bl	8001ad0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80013e6:	f000 fbe5 	bl	8001bb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(vDisplay_Control, "Disp_control", 256, NULL, 1, NULL);
 80013ea:	2300      	movs	r3, #0
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	2301      	movs	r3, #1
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2300      	movs	r3, #0
 80013f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013f8:	490d      	ldr	r1, [pc, #52]	@ (8001430 <main+0x60>)
 80013fa:	480e      	ldr	r0, [pc, #56]	@ (8001434 <main+0x64>)
 80013fc:	f003 fe9c 	bl	8005138 <xTaskCreate>
  xTaskCreate(vLed_Control, "led_control", 128, NULL, 1, NULL);
 8001400:	2300      	movs	r3, #0
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	2301      	movs	r3, #1
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2300      	movs	r3, #0
 800140a:	2280      	movs	r2, #128	@ 0x80
 800140c:	490a      	ldr	r1, [pc, #40]	@ (8001438 <main+0x68>)
 800140e:	480b      	ldr	r0, [pc, #44]	@ (800143c <main+0x6c>)
 8001410:	f003 fe92 	bl	8005138 <xTaskCreate>
  vTaskStartScheduler();
 8001414:	f004 f80c 	bl	8005430 <vTaskStartScheduler>
  printf("Never get here\n");
 8001418:	4809      	ldr	r0, [pc, #36]	@ (8001440 <main+0x70>)
 800141a:	f005 fe2b 	bl	8007074 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 800141e:	f002 ff51 	bl	80042c4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001422:	f7ff f95b 	bl	80006dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001426:	f002 ff71 	bl	800430c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800142a:	bf00      	nop
 800142c:	e7fd      	b.n	800142a <main+0x5a>
 800142e:	bf00      	nop
 8001430:	08007eb4 	.word	0x08007eb4
 8001434:	080005dd 	.word	0x080005dd
 8001438:	08007ec4 	.word	0x08007ec4
 800143c:	0800064d 	.word	0x0800064d
 8001440:	08007ed0 	.word	0x08007ed0

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	@ 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	2234      	movs	r2, #52	@ 0x34
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f005 feee 	bl	8007234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <SystemClock_Config+0xdc>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	4a2b      	ldr	r2, [pc, #172]	@ (8001520 <SystemClock_Config+0xdc>)
 8001472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001476:	6413      	str	r3, [r2, #64]	@ 0x40
 8001478:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <SystemClock_Config+0xdc>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001484:	2300      	movs	r3, #0
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <SystemClock_Config+0xe0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a25      	ldr	r2, [pc, #148]	@ (8001524 <SystemClock_Config+0xe0>)
 800148e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <SystemClock_Config+0xe0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a8:	2310      	movs	r3, #16
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ac:	2302      	movs	r3, #2
 80014ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014b4:	2308      	movs	r3, #8
 80014b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80014b8:	23b4      	movs	r3, #180	@ 0xb4
 80014ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014bc:	2302      	movs	r3, #2
 80014be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 fb33 	bl	8002b38 <HAL_RCC_OscConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014d8:	f000 f847 	bl	800156a <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014dc:	f000 ffe6 	bl	80024ac <HAL_PWREx_EnableOverDrive>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014e6:	f000 f840 	bl	800156a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ea:	230f      	movs	r3, #15
 80014ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80014ee:	2303      	movs	r3, #3
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001500:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	2105      	movs	r1, #5
 8001508:	4618      	mov	r0, r3
 800150a:	f001 f81f 	bl	800254c <HAL_RCC_ClockConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001514:	f000 f829 	bl	800156a <Error_Handler>
  }
}
 8001518:	bf00      	nop
 800151a:	3750      	adds	r7, #80	@ 0x50
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	40007000 	.word	0x40007000

08001528 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001530:	1d39      	adds	r1, r7, #4
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	2201      	movs	r2, #1
 8001538:	4803      	ldr	r0, [pc, #12]	@ (8001548 <__io_putchar+0x20>)
 800153a:	f002 fac3 	bl	8003ac4 <HAL_UART_Transmit>
	return ch;
 800153e:	687b      	ldr	r3, [r7, #4]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000560 	.word	0x20000560

0800154c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800155c:	d101      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800155e:	f000 fbe7 	bl	8001d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156e:	b672      	cpsid	i
}
 8001570:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001572:	bf00      	nop
 8001574:	e7fd      	b.n	8001572 <Error_Handler+0x8>
	...

08001578 <clear_screen>:

extern uint8_t framebuffer[64][16];
uint8_t signal_ = 14;
uint8_t batt = 0;

void clear_screen(void) {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
    for (uint8_t y = 10; y < 64; y++) {
 800157e:	230a      	movs	r3, #10
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	e02f      	b.n	80015e4 <clear_screen+0x6c>
        for (uint8_t x = 10; x < 128; x++) {
 8001584:	230a      	movs	r3, #10
 8001586:	71bb      	strb	r3, [r7, #6]
 8001588:	e025      	b.n	80015d6 <clear_screen+0x5e>
            uint8_t byte = x / 8;
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	717b      	strb	r3, [r7, #5]
            uint8_t bit = 7 - (x % 8);
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	43db      	mvns	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	713b      	strb	r3, [r7, #4]
            framebuffer[y][byte] &= ~(0x01 << bit);
 800159c:	79fa      	ldrb	r2, [r7, #7]
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	4915      	ldr	r1, [pc, #84]	@ (80015f8 <clear_screen+0x80>)
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	440a      	add	r2, r1
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b25a      	sxtb	r2, r3
 80015ac:	793b      	ldrb	r3, [r7, #4]
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	4013      	ands	r3, r2
 80015bc:	b259      	sxtb	r1, r3
 80015be:	79fa      	ldrb	r2, [r7, #7]
 80015c0:	797b      	ldrb	r3, [r7, #5]
 80015c2:	b2c8      	uxtb	r0, r1
 80015c4:	490c      	ldr	r1, [pc, #48]	@ (80015f8 <clear_screen+0x80>)
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	440a      	add	r2, r1
 80015ca:	4413      	add	r3, r2
 80015cc:	4602      	mov	r2, r0
 80015ce:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 10; x < 128; x++) {
 80015d0:	79bb      	ldrb	r3, [r7, #6]
 80015d2:	3301      	adds	r3, #1
 80015d4:	71bb      	strb	r3, [r7, #6]
 80015d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	dad5      	bge.n	800158a <clear_screen+0x12>
    for (uint8_t y = 10; y < 64; y++) {
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	3301      	adds	r3, #1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80015e8:	d9cc      	bls.n	8001584 <clear_screen+0xc>
        }
    }
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	200000c0 	.word	0x200000c0

080015fc <update_telemetry>:

void update_telemetry(){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	  lcd_draw_signalStrenght(signal_);
 8001600:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <update_telemetry+0x70>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fb3b 	bl	8000c80 <lcd_draw_signalStrenght>
	  lcd_draw_battery(2,105,batt);
 800160a:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <update_telemetry+0x74>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	2169      	movs	r1, #105	@ 0x69
 8001612:	2002      	movs	r0, #2
 8001614:	f7ff fc48 	bl	8000ea8 <lcd_draw_battery>
	  signal_ = random()%100;
 8001618:	f005 fbd6 	bl	8006dc8 <random>
 800161c:	4603      	mov	r3, r0
 800161e:	4a15      	ldr	r2, [pc, #84]	@ (8001674 <update_telemetry+0x78>)
 8001620:	fb82 1203 	smull	r1, r2, r2, r3
 8001624:	1151      	asrs	r1, r2, #5
 8001626:	17da      	asrs	r2, r3, #31
 8001628:	1a8a      	subs	r2, r1, r2
 800162a:	2164      	movs	r1, #100	@ 0x64
 800162c:	fb01 f202 	mul.w	r2, r1, r2
 8001630:	1a9a      	subs	r2, r3, r2
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <update_telemetry+0x70>)
 8001636:	701a      	strb	r2, [r3, #0]
	  batt = random()%100;
 8001638:	f005 fbc6 	bl	8006dc8 <random>
 800163c:	4603      	mov	r3, r0
 800163e:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <update_telemetry+0x78>)
 8001640:	fb82 1203 	smull	r1, r2, r2, r3
 8001644:	1151      	asrs	r1, r2, #5
 8001646:	17da      	asrs	r2, r3, #31
 8001648:	1a8a      	subs	r2, r1, r2
 800164a:	2164      	movs	r1, #100	@ 0x64
 800164c:	fb01 f202 	mul.w	r2, r1, r2
 8001650:	1a9a      	subs	r2, r3, r2
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <update_telemetry+0x74>)
 8001656:	701a      	strb	r2, [r3, #0]

	  if(signal_>=100)signal_=14;
 8001658:	4b04      	ldr	r3, [pc, #16]	@ (800166c <update_telemetry+0x70>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b63      	cmp	r3, #99	@ 0x63
 800165e:	d902      	bls.n	8001666 <update_telemetry+0x6a>
 8001660:	4b02      	ldr	r3, [pc, #8]	@ (800166c <update_telemetry+0x70>)
 8001662:	220e      	movs	r2, #14
 8001664:	701a      	strb	r2, [r3, #0]
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000030 	.word	0x20000030
 8001670:	200004cb 	.word	0x200004cb
 8001674:	51eb851f 	.word	0x51eb851f

08001678 <menu_screen>:

void menu_screen(){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
	bool exit = false;
 800167e:	2300      	movs	r3, #0
 8001680:	713b      	strb	r3, [r7, #4]
	uint8_t pointer_pos = 10, info_pos = 0;
 8001682:	230a      	movs	r3, #10
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	2300      	movs	r3, #0
 8001688:	71bb      	strb	r3, [r7, #6]
	bool pointer_dir = false;
 800168a:	2300      	movs	r3, #0
 800168c:	717b      	strb	r3, [r7, #5]

	while(!exit){
 800168e:	e06b      	b.n	8001768 <menu_screen+0xf0>
		clear_screen();
 8001690:	f7ff ff72 	bl	8001578 <clear_screen>
		update_telemetry();
 8001694:	f7ff ffb2 	bl	80015fc <update_telemetry>
		lcd_puts(10,10,parameters[info_pos + 0]);
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	4a39      	ldr	r2, [pc, #228]	@ (8001780 <menu_screen+0x108>)
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	461a      	mov	r2, r3
 80016a2:	210a      	movs	r1, #10
 80016a4:	200a      	movs	r0, #10
 80016a6:	f7ff fd9f 	bl	80011e8 <lcd_puts>
		lcd_puts(20,10,parameters[info_pos + 1]);
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4a34      	ldr	r2, [pc, #208]	@ (8001780 <menu_screen+0x108>)
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	461a      	mov	r2, r3
 80016b6:	210a      	movs	r1, #10
 80016b8:	2014      	movs	r0, #20
 80016ba:	f7ff fd95 	bl	80011e8 <lcd_puts>
		lcd_puts(30,10,parameters[info_pos + 2]);
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	3302      	adds	r3, #2
 80016c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001780 <menu_screen+0x108>)
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	461a      	mov	r2, r3
 80016ca:	210a      	movs	r1, #10
 80016cc:	201e      	movs	r0, #30
 80016ce:	f7ff fd8b 	bl	80011e8 <lcd_puts>
		lcd_puts(40,10,parameters[info_pos + 3]);
 80016d2:	79bb      	ldrb	r3, [r7, #6]
 80016d4:	3303      	adds	r3, #3
 80016d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001780 <menu_screen+0x108>)
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	461a      	mov	r2, r3
 80016de:	210a      	movs	r1, #10
 80016e0:	2028      	movs	r0, #40	@ 0x28
 80016e2:	f7ff fd81 	bl	80011e8 <lcd_puts>
		lcd_puts(50,10,parameters[info_pos + 4]);
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	3304      	adds	r3, #4
 80016ea:	4a25      	ldr	r2, [pc, #148]	@ (8001780 <menu_screen+0x108>)
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	461a      	mov	r2, r3
 80016f2:	210a      	movs	r1, #10
 80016f4:	2032      	movs	r0, #50	@ 0x32
 80016f6:	f7ff fd77 	bl	80011e8 <lcd_puts>
		if(pointer_pos<=50 && pointer_pos>=10)lcd_draw_pointer(pointer_pos,0);
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b32      	cmp	r3, #50	@ 0x32
 80016fe:	d807      	bhi.n	8001710 <menu_screen+0x98>
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b09      	cmp	r3, #9
 8001704:	d904      	bls.n	8001710 <menu_screen+0x98>
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f98c 	bl	8000a28 <lcd_draw_pointer>
		lcd_update();
 8001710:	f7ff fc6e 	bl	8000ff0 <lcd_update>
		vTaskDelay(1000);
 8001714:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001718:	f003 fe54 	bl	80053c4 <vTaskDelay>

		if(pointer_dir == false ){
 800171c:	797b      	ldrb	r3, [r7, #5]
 800171e:	f083 0301 	eor.w	r3, r3, #1
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00e      	beq.n	8001746 <menu_screen+0xce>
			pointer_pos +=10;
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	330a      	adds	r3, #10
 800172c:	71fb      	strb	r3, [r7, #7]
			if(pointer_pos>50)info_pos++;
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2b32      	cmp	r3, #50	@ 0x32
 8001732:	d902      	bls.n	800173a <menu_screen+0xc2>
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	3301      	adds	r3, #1
 8001738:	71bb      	strb	r3, [r7, #6]
			if(pointer_pos >= 110)pointer_dir = true;
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b6d      	cmp	r3, #109	@ 0x6d
 800173e:	d913      	bls.n	8001768 <menu_screen+0xf0>
 8001740:	2301      	movs	r3, #1
 8001742:	717b      	strb	r3, [r7, #5]
 8001744:	e010      	b.n	8001768 <menu_screen+0xf0>
		}
		else if(pointer_dir == true ){
 8001746:	797b      	ldrb	r3, [r7, #5]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00d      	beq.n	8001768 <menu_screen+0xf0>
			pointer_pos -=10;
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	3b0a      	subs	r3, #10
 8001750:	71fb      	strb	r3, [r7, #7]
			if(pointer_pos>=50)info_pos--;
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b31      	cmp	r3, #49	@ 0x31
 8001756:	d902      	bls.n	800175e <menu_screen+0xe6>
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	3b01      	subs	r3, #1
 800175c:	71bb      	strb	r3, [r7, #6]
			if(pointer_pos <= 10)pointer_dir = false;
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b0a      	cmp	r3, #10
 8001762:	d801      	bhi.n	8001768 <menu_screen+0xf0>
 8001764:	2300      	movs	r3, #0
 8001766:	717b      	strb	r3, [r7, #5]
	while(!exit){
 8001768:	793b      	ldrb	r3, [r7, #4]
 800176a:	f083 0301 	eor.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d18d      	bne.n	8001690 <menu_screen+0x18>
		}



	}
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_MspInit+0x54>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	4a11      	ldr	r2, [pc, #68]	@ (80017d8 <HAL_MspInit+0x54>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001798:	6453      	str	r3, [r2, #68]	@ 0x44
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_MspInit+0x54>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <HAL_MspInit+0x54>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	4a0a      	ldr	r2, [pc, #40]	@ (80017d8 <HAL_MspInit+0x54>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b6:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <HAL_MspInit+0x54>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	210f      	movs	r1, #15
 80017c6:	f06f 0001 	mvn.w	r0, #1
 80017ca:	f000 fb89 	bl	8001ee0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	@ 0x38
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	4b34      	ldr	r3, [pc, #208]	@ (80018c4 <HAL_InitTick+0xe8>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	4a33      	ldr	r2, [pc, #204]	@ (80018c4 <HAL_InitTick+0xe8>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fc:	4b31      	ldr	r3, [pc, #196]	@ (80018c4 <HAL_InitTick+0xe8>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001808:	f107 0210 	add.w	r2, r7, #16
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f000 ffb4 	bl	8002780 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800181c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001822:	f000 ff85 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8001826:	6378      	str	r0, [r7, #52]	@ 0x34
 8001828:	e004      	b.n	8001834 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800182a:	f000 ff81 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 800182e:	4603      	mov	r3, r0
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001836:	4a24      	ldr	r2, [pc, #144]	@ (80018c8 <HAL_InitTick+0xec>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	0c9b      	lsrs	r3, r3, #18
 800183e:	3b01      	subs	r3, #1
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001842:	4b22      	ldr	r3, [pc, #136]	@ (80018cc <HAL_InitTick+0xf0>)
 8001844:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001848:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <HAL_InitTick+0xf0>)
 800184c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001850:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001852:	4a1e      	ldr	r2, [pc, #120]	@ (80018cc <HAL_InitTick+0xf0>)
 8001854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001856:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001858:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <HAL_InitTick+0xf0>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <HAL_InitTick+0xf0>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001864:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <HAL_InitTick+0xf0>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800186a:	4818      	ldr	r0, [pc, #96]	@ (80018cc <HAL_InitTick+0xf0>)
 800186c:	f001 fc02 	bl	8003074 <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001876:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800187a:	2b00      	cmp	r3, #0
 800187c:	d11b      	bne.n	80018b6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800187e:	4813      	ldr	r0, [pc, #76]	@ (80018cc <HAL_InitTick+0xf0>)
 8001880:	f001 fcb0 	bl	80031e4 <HAL_TIM_Base_Start_IT>
 8001884:	4603      	mov	r3, r0
 8001886:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800188a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800188e:	2b00      	cmp	r3, #0
 8001890:	d111      	bne.n	80018b6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001892:	201c      	movs	r0, #28
 8001894:	f000 fb40 	bl	8001f18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	d808      	bhi.n	80018b0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800189e:	2200      	movs	r2, #0
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	201c      	movs	r0, #28
 80018a4:	f000 fb1c 	bl	8001ee0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a8:	4a09      	ldr	r2, [pc, #36]	@ (80018d0 <HAL_InitTick+0xf4>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e002      	b.n	80018b6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3738      	adds	r7, #56	@ 0x38
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	431bde83 	.word	0x431bde83
 80018cc:	200004cc 	.word	0x200004cc
 80018d0:	20000038 	.word	0x20000038

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <NMI_Handler+0x4>

080018dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <MemManage_Handler+0x4>

080018ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <TIM2_IRQHandler+0x10>)
 8001912:	f001 fcd7 	bl	80032c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200004cc 	.word	0x200004cc

08001920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_kill>:

int _kill(int pid, int sig)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800193a:	f005 fcc9 	bl	80072d0 <__errno>
 800193e:	4603      	mov	r3, r0
 8001940:	2216      	movs	r2, #22
 8001942:	601a      	str	r2, [r3, #0]
  return -1;
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_exit>:

void _exit (int status)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ffe7 	bl	8001930 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001962:	bf00      	nop
 8001964:	e7fd      	b.n	8001962 <_exit+0x12>

08001966 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e00a      	b.n	800198e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001978:	f3af 8000 	nop.w
 800197c:	4601      	mov	r1, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	60ba      	str	r2, [r7, #8]
 8001984:	b2ca      	uxtb	r2, r1
 8001986:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	429a      	cmp	r2, r3
 8001994:	dbf0      	blt.n	8001978 <_read+0x12>
  }

  return len;
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e009      	b.n	80019c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	60ba      	str	r2, [r7, #8]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fdb4 	bl	8001528 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbf1      	blt.n	80019b2 <_write+0x12>
  }
  return len;
 80019ce:	687b      	ldr	r3, [r7, #4]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_close>:

int _close(int file)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a00:	605a      	str	r2, [r3, #4]
  return 0;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_isatty>:

int _isatty(int file)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a18:	2301      	movs	r3, #1
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	@ (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f005 fc2e 	bl	80072d0 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	@ (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20020000 	.word	0x20020000
 8001aa0:	00004000 	.word	0x00004000
 8001aa4:	20000514 	.word	0x20000514
 8001aa8:	20005048 	.word	0x20005048

08001aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <MX_TIM1_Init+0x98>)
 8001aee:	4a1f      	ldr	r2, [pc, #124]	@ (8001b6c <MX_TIM1_Init+0x9c>)
 8001af0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <MX_TIM1_Init+0x98>)
 8001af4:	22b3      	movs	r2, #179	@ 0xb3
 8001af6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <MX_TIM1_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <MX_TIM1_Init+0x98>)
 8001b00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <MX_TIM1_Init+0x98>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <MX_TIM1_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <MX_TIM1_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b18:	4813      	ldr	r0, [pc, #76]	@ (8001b68 <MX_TIM1_Init+0x98>)
 8001b1a:	f001 faab 	bl	8003074 <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b24:	f7ff fd21 	bl	800156a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b2e:	f107 0308 	add.w	r3, r7, #8
 8001b32:	4619      	mov	r1, r3
 8001b34:	480c      	ldr	r0, [pc, #48]	@ (8001b68 <MX_TIM1_Init+0x98>)
 8001b36:	f001 fcb5 	bl	80034a4 <HAL_TIM_ConfigClockSource>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b40:	f7ff fd13 	bl	800156a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <MX_TIM1_Init+0x98>)
 8001b52:	f001 fed7 	bl	8003904 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b5c:	f7ff fd05 	bl	800156a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000518 	.word	0x20000518
 8001b6c:	40010000 	.word	0x40010000

08001b70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bac <HAL_TIM_Base_MspInit+0x3c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10d      	bne.n	8001b9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <HAL_TIM_Base_MspInit+0x40>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a09      	ldr	r2, [pc, #36]	@ (8001bb0 <HAL_TIM_Base_MspInit+0x40>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <HAL_TIM_Base_MspInit+0x40>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <MX_USART2_UART_Init+0x50>)
 8001bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bec:	f001 ff1a 	bl	8003a24 <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bf6:	f7ff fcb8 	bl	800156a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000560 	.word	0x20000560
 8001c04:	40004400 	.word	0x40004400

08001c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	@ (8001c8c <HAL_UART_MspInit+0x84>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d12b      	bne.n	8001c82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	4a17      	ldr	r2, [pc, #92]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a10      	ldr	r2, [pc, #64]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c62:	230c      	movs	r3, #12
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c72:	2307      	movs	r3, #7
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <HAL_UART_MspInit+0x8c>)
 8001c7e:	f000 f959 	bl	8001f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	@ 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40004400 	.word	0x40004400
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020000 	.word	0x40020000

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c9c:	f7ff ff06 	bl	8001aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ca2:	490d      	ldr	r1, [pc, #52]	@ (8001cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f005 fb09 	bl	80072dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7ff fb81 	bl	80013d0 <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001cdc:	08008508 	.word	0x08008508
  ldr r2, =_sbss
 8001ce0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001ce4:	20005048 	.word	0x20005048

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d2c <HAL_Init+0x40>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <HAL_Init+0x40>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <HAL_Init+0x40>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 f8d8 	bl	8001eca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	200f      	movs	r0, #15
 8001d1c:	f7ff fd5e 	bl	80017dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fd30 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_IncTick+0x20>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_IncTick+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	@ (8001d54 <HAL_IncTick+0x24>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	2000003c 	.word	0x2000003c
 8001d54:	200005a8 	.word	0x200005a8

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200005a8 	.word	0x200005a8

08001d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 0307 	and.w	r3, r3, #7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	db0b      	blt.n	8001dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	4907      	ldr	r1, [pc, #28]	@ (8001e0c <__NVIC_EnableIRQ+0x38>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2001      	movs	r0, #1
 8001df6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000e100 	.word	0xe000e100

08001e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	db0a      	blt.n	8001e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	490c      	ldr	r1, [pc, #48]	@ (8001e5c <__NVIC_SetPriority+0x4c>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	440b      	add	r3, r1
 8001e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e38:	e00a      	b.n	8001e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4908      	ldr	r1, [pc, #32]	@ (8001e60 <__NVIC_SetPriority+0x50>)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	3b04      	subs	r3, #4
 8001e48:	0112      	lsls	r2, r2, #4
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	761a      	strb	r2, [r3, #24]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000e100 	.word	0xe000e100
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	@ 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f1c3 0307 	rsb	r3, r3, #7
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	bf28      	it	cs
 8001e82:	2304      	movcs	r3, #4
 8001e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d902      	bls.n	8001e94 <NVIC_EncodePriority+0x30>
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3b03      	subs	r3, #3
 8001e92:	e000      	b.n	8001e96 <NVIC_EncodePriority+0x32>
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eac:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	4313      	orrs	r3, r2
         );
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3724      	adds	r7, #36	@ 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ff4c 	bl	8001d70 <__NVIC_SetPriorityGrouping>
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef2:	f7ff ff61 	bl	8001db8 <__NVIC_GetPriorityGrouping>
 8001ef6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	6978      	ldr	r0, [r7, #20]
 8001efe:	f7ff ffb1 	bl	8001e64 <NVIC_EncodePriority>
 8001f02:	4602      	mov	r2, r0
 8001f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff80 	bl	8001e10 <__NVIC_SetPriority>
}
 8001f10:	bf00      	nop
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff54 	bl	8001dd4 <__NVIC_EnableIRQ>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	@ 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e165      	b.n	800221c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f50:	2201      	movs	r2, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	f040 8154 	bne.w	8002216 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d005      	beq.n	8001f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d130      	bne.n	8001fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 0201 	and.w	r2, r3, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d017      	beq.n	8002024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d123      	bne.n	8002078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	08da      	lsrs	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	69b9      	ldr	r1, [r7, #24]
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80ae 	beq.w	8002216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b5d      	ldr	r3, [pc, #372]	@ (8002234 <HAL_GPIO_Init+0x300>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002234 <HAL_GPIO_Init+0x300>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002234 <HAL_GPIO_Init+0x300>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d6:	4a58      	ldr	r2, [pc, #352]	@ (8002238 <HAL_GPIO_Init+0x304>)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4f      	ldr	r2, [pc, #316]	@ (800223c <HAL_GPIO_Init+0x308>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d025      	beq.n	800214e <HAL_GPIO_Init+0x21a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4e      	ldr	r2, [pc, #312]	@ (8002240 <HAL_GPIO_Init+0x30c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01f      	beq.n	800214a <HAL_GPIO_Init+0x216>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4d      	ldr	r2, [pc, #308]	@ (8002244 <HAL_GPIO_Init+0x310>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0x212>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4c      	ldr	r2, [pc, #304]	@ (8002248 <HAL_GPIO_Init+0x314>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0x20e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4b      	ldr	r2, [pc, #300]	@ (800224c <HAL_GPIO_Init+0x318>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x20a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4a      	ldr	r2, [pc, #296]	@ (8002250 <HAL_GPIO_Init+0x31c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x206>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a49      	ldr	r2, [pc, #292]	@ (8002254 <HAL_GPIO_Init+0x320>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x202>
 8002132:	2306      	movs	r3, #6
 8002134:	e00c      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 8002136:	2307      	movs	r3, #7
 8002138:	e00a      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800213a:	2305      	movs	r3, #5
 800213c:	e008      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800213e:	2304      	movs	r3, #4
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 8002142:	2303      	movs	r3, #3
 8002144:	e004      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 8002146:	2302      	movs	r3, #2
 8002148:	e002      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800214e:	2300      	movs	r3, #0
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	f002 0203 	and.w	r2, r2, #3
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	4093      	lsls	r3, r2
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002160:	4935      	ldr	r1, [pc, #212]	@ (8002238 <HAL_GPIO_Init+0x304>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800216e:	4b3a      	ldr	r3, [pc, #232]	@ (8002258 <HAL_GPIO_Init+0x324>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002192:	4a31      	ldr	r2, [pc, #196]	@ (8002258 <HAL_GPIO_Init+0x324>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002198:	4b2f      	ldr	r3, [pc, #188]	@ (8002258 <HAL_GPIO_Init+0x324>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021bc:	4a26      	ldr	r2, [pc, #152]	@ (8002258 <HAL_GPIO_Init+0x324>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021c2:	4b25      	ldr	r3, [pc, #148]	@ (8002258 <HAL_GPIO_Init+0x324>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002258 <HAL_GPIO_Init+0x324>)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <HAL_GPIO_Init+0x324>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002210:	4a11      	ldr	r2, [pc, #68]	@ (8002258 <HAL_GPIO_Init+0x324>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	f67f ae96 	bls.w	8001f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3724      	adds	r7, #36	@ 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40013800 	.word	0x40013800
 800223c:	40020000 	.word	0x40020000
 8002240:	40020400 	.word	0x40020400
 8002244:	40020800 	.word	0x40020800
 8002248:	40020c00 	.word	0x40020c00
 800224c:	40021000 	.word	0x40021000
 8002250:	40021400 	.word	0x40021400
 8002254:	40021800 	.word	0x40021800
 8002258:	40013c00 	.word	0x40013c00

0800225c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e0c7      	b.n	8002408 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002278:	2201      	movs	r2, #1
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	429a      	cmp	r2, r3
 8002290:	f040 80b7 	bne.w	8002402 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002294:	4a62      	ldr	r2, [pc, #392]	@ (8002420 <HAL_GPIO_DeInit+0x1c4>)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	4013      	ands	r3, r2
 80022b4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a5a      	ldr	r2, [pc, #360]	@ (8002424 <HAL_GPIO_DeInit+0x1c8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d025      	beq.n	800230a <HAL_GPIO_DeInit+0xae>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a59      	ldr	r2, [pc, #356]	@ (8002428 <HAL_GPIO_DeInit+0x1cc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01f      	beq.n	8002306 <HAL_GPIO_DeInit+0xaa>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a58      	ldr	r2, [pc, #352]	@ (800242c <HAL_GPIO_DeInit+0x1d0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d019      	beq.n	8002302 <HAL_GPIO_DeInit+0xa6>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a57      	ldr	r2, [pc, #348]	@ (8002430 <HAL_GPIO_DeInit+0x1d4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_DeInit+0xa2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a56      	ldr	r2, [pc, #344]	@ (8002434 <HAL_GPIO_DeInit+0x1d8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00d      	beq.n	80022fa <HAL_GPIO_DeInit+0x9e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a55      	ldr	r2, [pc, #340]	@ (8002438 <HAL_GPIO_DeInit+0x1dc>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_DeInit+0x9a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a54      	ldr	r2, [pc, #336]	@ (800243c <HAL_GPIO_DeInit+0x1e0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_GPIO_DeInit+0x96>
 80022ee:	2306      	movs	r3, #6
 80022f0:	e00c      	b.n	800230c <HAL_GPIO_DeInit+0xb0>
 80022f2:	2307      	movs	r3, #7
 80022f4:	e00a      	b.n	800230c <HAL_GPIO_DeInit+0xb0>
 80022f6:	2305      	movs	r3, #5
 80022f8:	e008      	b.n	800230c <HAL_GPIO_DeInit+0xb0>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e006      	b.n	800230c <HAL_GPIO_DeInit+0xb0>
 80022fe:	2303      	movs	r3, #3
 8002300:	e004      	b.n	800230c <HAL_GPIO_DeInit+0xb0>
 8002302:	2302      	movs	r3, #2
 8002304:	e002      	b.n	800230c <HAL_GPIO_DeInit+0xb0>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_GPIO_DeInit+0xb0>
 800230a:	2300      	movs	r3, #0
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	f002 0203 	and.w	r2, r2, #3
 8002312:	0092      	lsls	r2, r2, #2
 8002314:	4093      	lsls	r3, r2
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	429a      	cmp	r2, r3
 800231a:	d132      	bne.n	8002382 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800231c:	4b48      	ldr	r3, [pc, #288]	@ (8002440 <HAL_GPIO_DeInit+0x1e4>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	43db      	mvns	r3, r3
 8002324:	4946      	ldr	r1, [pc, #280]	@ (8002440 <HAL_GPIO_DeInit+0x1e4>)
 8002326:	4013      	ands	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800232a:	4b45      	ldr	r3, [pc, #276]	@ (8002440 <HAL_GPIO_DeInit+0x1e4>)
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43db      	mvns	r3, r3
 8002332:	4943      	ldr	r1, [pc, #268]	@ (8002440 <HAL_GPIO_DeInit+0x1e4>)
 8002334:	4013      	ands	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002338:	4b41      	ldr	r3, [pc, #260]	@ (8002440 <HAL_GPIO_DeInit+0x1e4>)
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	43db      	mvns	r3, r3
 8002340:	493f      	ldr	r1, [pc, #252]	@ (8002440 <HAL_GPIO_DeInit+0x1e4>)
 8002342:	4013      	ands	r3, r2
 8002344:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002346:	4b3e      	ldr	r3, [pc, #248]	@ (8002440 <HAL_GPIO_DeInit+0x1e4>)
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	43db      	mvns	r3, r3
 800234e:	493c      	ldr	r1, [pc, #240]	@ (8002440 <HAL_GPIO_DeInit+0x1e4>)
 8002350:	4013      	ands	r3, r2
 8002352:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	220f      	movs	r2, #15
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002364:	4a2e      	ldr	r2, [pc, #184]	@ (8002420 <HAL_GPIO_DeInit+0x1c4>)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	43da      	mvns	r2, r3
 8002374:	482a      	ldr	r0, [pc, #168]	@ (8002420 <HAL_GPIO_DeInit+0x1c4>)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	400a      	ands	r2, r1
 800237c:	3302      	adds	r3, #2
 800237e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2103      	movs	r1, #3
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	08d2      	lsrs	r2, r2, #3
 80023b8:	4019      	ands	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2103      	movs	r1, #3
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	401a      	ands	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	2101      	movs	r1, #1
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2103      	movs	r1, #3
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	401a      	ands	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3301      	adds	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f af34 	bls.w	8002278 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40013800 	.word	0x40013800
 8002424:	40020000 	.word	0x40020000
 8002428:	40020400 	.word	0x40020400
 800242c:	40020800 	.word	0x40020800
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40021000 	.word	0x40021000
 8002438:	40021400 	.word	0x40021400
 800243c:	40021800 	.word	0x40021800
 8002440:	40013c00 	.word	0x40013c00

08002444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	4613      	mov	r3, r2
 8002452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002454:	787b      	ldrb	r3, [r7, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002460:	e003      	b.n	800246a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	619a      	str	r2, [r3, #24]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	041a      	lsls	r2, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43d9      	mvns	r1, r3
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	400b      	ands	r3, r1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4b20      	ldr	r3, [pc, #128]	@ (800253c <HAL_PWREx_EnableOverDrive+0x90>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	4a1f      	ldr	r2, [pc, #124]	@ (800253c <HAL_PWREx_EnableOverDrive+0x90>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c6:	4b1d      	ldr	r3, [pc, #116]	@ (800253c <HAL_PWREx_EnableOverDrive+0x90>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002540 <HAL_PWREx_EnableOverDrive+0x94>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024d8:	f7ff fc3e 	bl	8001d58 <HAL_GetTick>
 80024dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024de:	e009      	b.n	80024f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024e0:	f7ff fc3a 	bl	8001d58 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024ee:	d901      	bls.n	80024f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e01f      	b.n	8002534 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024f4:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <HAL_PWREx_EnableOverDrive+0x98>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002500:	d1ee      	bne.n	80024e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002508:	f7ff fc26 	bl	8001d58 <HAL_GetTick>
 800250c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800250e:	e009      	b.n	8002524 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002510:	f7ff fc22 	bl	8001d58 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800251e:	d901      	bls.n	8002524 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e007      	b.n	8002534 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002524:	4b07      	ldr	r3, [pc, #28]	@ (8002544 <HAL_PWREx_EnableOverDrive+0x98>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002530:	d1ee      	bne.n	8002510 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	420e0040 	.word	0x420e0040
 8002544:	40007000 	.word	0x40007000
 8002548:	420e0044 	.word	0x420e0044

0800254c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0cc      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002560:	4b68      	ldr	r3, [pc, #416]	@ (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d90c      	bls.n	8002588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b65      	ldr	r3, [pc, #404]	@ (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b63      	ldr	r3, [pc, #396]	@ (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b59      	ldr	r3, [pc, #356]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a58      	ldr	r2, [pc, #352]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b8:	4b53      	ldr	r3, [pc, #332]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a52      	ldr	r2, [pc, #328]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b50      	ldr	r3, [pc, #320]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	494d      	ldr	r1, [pc, #308]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d044      	beq.n	800266c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d119      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d003      	beq.n	800260a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002606:	2b03      	cmp	r3, #3
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b3f      	ldr	r3, [pc, #252]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e06f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	4b3b      	ldr	r3, [pc, #236]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e067      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262a:	4b37      	ldr	r3, [pc, #220]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f023 0203 	bic.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4934      	ldr	r1, [pc, #208]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263c:	f7ff fb8c 	bl	8001d58 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	e00a      	b.n	800265a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7ff fb88 	bl	8001d58 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e04f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b2b      	ldr	r3, [pc, #172]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 020c 	and.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1eb      	bne.n	8002644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d20c      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b22      	ldr	r3, [pc, #136]	@ (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e032      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4916      	ldr	r1, [pc, #88]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026be:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490e      	ldr	r1, [pc, #56]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026d2:	f000 f887 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	490a      	ldr	r1, [pc, #40]	@ (800270c <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	5ccb      	ldrb	r3, [r1, r3]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff f872 	bl	80017dc <HAL_InitTick>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40023c00 	.word	0x40023c00
 8002708:	40023800 	.word	0x40023800
 800270c:	08008400 	.word	0x08008400
 8002710:	20000034 	.word	0x20000034
 8002714:	20000038 	.word	0x20000038

08002718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	@ (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000034 	.word	0x20000034

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	@ (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	08008410 	.word	0x08008410

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffdc 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	@ (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	08008410 	.word	0x08008410

08002780 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	220f      	movs	r2, #15
 800278e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002790:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0203 	and.w	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800279c:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027b4:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	08db      	lsrs	r3, r3, #3
 80027ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027c2:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <HAL_RCC_GetClockConfig+0x60>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 020f 	and.w	r2, r3, #15
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40023c00 	.word	0x40023c00

080027e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e8:	b0a6      	sub	sp, #152	@ 0x98
 80027ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280a:	4bc8      	ldr	r3, [pc, #800]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b0c      	cmp	r3, #12
 8002814:	f200 817e 	bhi.w	8002b14 <HAL_RCC_GetSysClockFreq+0x330>
 8002818:	a201      	add	r2, pc, #4	@ (adr r2, 8002820 <HAL_RCC_GetSysClockFreq+0x3c>)
 800281a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281e:	bf00      	nop
 8002820:	08002855 	.word	0x08002855
 8002824:	08002b15 	.word	0x08002b15
 8002828:	08002b15 	.word	0x08002b15
 800282c:	08002b15 	.word	0x08002b15
 8002830:	0800285d 	.word	0x0800285d
 8002834:	08002b15 	.word	0x08002b15
 8002838:	08002b15 	.word	0x08002b15
 800283c:	08002b15 	.word	0x08002b15
 8002840:	08002865 	.word	0x08002865
 8002844:	08002b15 	.word	0x08002b15
 8002848:	08002b15 	.word	0x08002b15
 800284c:	08002b15 	.word	0x08002b15
 8002850:	080029cf 	.word	0x080029cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4bb6      	ldr	r3, [pc, #728]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800285a:	e15f      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800285c:	4bb5      	ldr	r3, [pc, #724]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 800285e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002862:	e15b      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002864:	4bb1      	ldr	r3, [pc, #708]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800286c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002870:	4bae      	ldr	r3, [pc, #696]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d031      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287c:	4bab      	ldr	r3, [pc, #684]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	2200      	movs	r2, #0
 8002884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002886:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800288a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002890:	2300      	movs	r3, #0
 8002892:	667b      	str	r3, [r7, #100]	@ 0x64
 8002894:	4ba7      	ldr	r3, [pc, #668]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 8002896:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800289a:	462a      	mov	r2, r5
 800289c:	fb03 f202 	mul.w	r2, r3, r2
 80028a0:	2300      	movs	r3, #0
 80028a2:	4621      	mov	r1, r4
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	4aa2      	ldr	r2, [pc, #648]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 80028ac:	4621      	mov	r1, r4
 80028ae:	fba1 1202 	umull	r1, r2, r1, r2
 80028b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80028b4:	460a      	mov	r2, r1
 80028b6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80028b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80028ba:	4413      	add	r3, r2
 80028bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c2:	2200      	movs	r2, #0
 80028c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80028c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80028d0:	f7fd fcee 	bl	80002b0 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028de:	e064      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e0:	4b92      	ldr	r3, [pc, #584]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	2200      	movs	r2, #0
 80028e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80028ea:	657a      	str	r2, [r7, #84]	@ 0x54
 80028ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028f4:	2300      	movs	r3, #0
 80028f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80028fc:	4622      	mov	r2, r4
 80028fe:	462b      	mov	r3, r5
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	0159      	lsls	r1, r3, #5
 800290a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290e:	0150      	lsls	r0, r2, #5
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4621      	mov	r1, r4
 8002916:	1a51      	subs	r1, r2, r1
 8002918:	6139      	str	r1, [r7, #16]
 800291a:	4629      	mov	r1, r5
 800291c:	eb63 0301 	sbc.w	r3, r3, r1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800292e:	4659      	mov	r1, fp
 8002930:	018b      	lsls	r3, r1, #6
 8002932:	4651      	mov	r1, sl
 8002934:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002938:	4651      	mov	r1, sl
 800293a:	018a      	lsls	r2, r1, #6
 800293c:	4651      	mov	r1, sl
 800293e:	ebb2 0801 	subs.w	r8, r2, r1
 8002942:	4659      	mov	r1, fp
 8002944:	eb63 0901 	sbc.w	r9, r3, r1
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002954:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002958:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800295c:	4690      	mov	r8, r2
 800295e:	4699      	mov	r9, r3
 8002960:	4623      	mov	r3, r4
 8002962:	eb18 0303 	adds.w	r3, r8, r3
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	462b      	mov	r3, r5
 800296a:	eb49 0303 	adc.w	r3, r9, r3
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800297c:	4629      	mov	r1, r5
 800297e:	028b      	lsls	r3, r1, #10
 8002980:	4621      	mov	r1, r4
 8002982:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002986:	4621      	mov	r1, r4
 8002988:	028a      	lsls	r2, r1, #10
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002992:	2200      	movs	r2, #0
 8002994:	643b      	str	r3, [r7, #64]	@ 0x40
 8002996:	647a      	str	r2, [r7, #68]	@ 0x44
 8002998:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800299c:	f7fd fc88 	bl	80002b0 <__aeabi_uldivmod>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4613      	mov	r3, r2
 80029a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029aa:	4b60      	ldr	r3, [pc, #384]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0c1b      	lsrs	r3, r3, #16
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	3301      	adds	r3, #1
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80029bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80029cc:	e0a6      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ce:	4b57      	ldr	r3, [pc, #348]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029da:	4b54      	ldr	r3, [pc, #336]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d02a      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e6:	4b51      	ldr	r3, [pc, #324]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	2200      	movs	r2, #0
 80029ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029f8:	2100      	movs	r1, #0
 80029fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 80029fc:	fb03 f201 	mul.w	r2, r3, r1
 8002a00:	2300      	movs	r3, #0
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	4a4a      	ldr	r2, [pc, #296]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a10:	460a      	mov	r2, r1
 8002a12:	673a      	str	r2, [r7, #112]	@ 0x70
 8002a14:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a16:	4413      	add	r3, r2
 8002a18:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a1e:	2200      	movs	r2, #0
 8002a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a22:	637a      	str	r2, [r7, #52]	@ 0x34
 8002a24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a28:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002a2c:	f7fd fc40 	bl	80002b0 <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4613      	mov	r3, r2
 8002a36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a3a:	e05b      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	2200      	movs	r2, #0
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a58:	4642      	mov	r2, r8
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	f04f 0000 	mov.w	r0, #0
 8002a60:	f04f 0100 	mov.w	r1, #0
 8002a64:	0159      	lsls	r1, r3, #5
 8002a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a6a:	0150      	lsls	r0, r2, #5
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4641      	mov	r1, r8
 8002a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a76:	4649      	mov	r1, r9
 8002a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a90:	ebb2 040a 	subs.w	r4, r2, sl
 8002a94:	eb63 050b 	sbc.w	r5, r3, fp
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	00eb      	lsls	r3, r5, #3
 8002aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aa6:	00e2      	lsls	r2, r4, #3
 8002aa8:	4614      	mov	r4, r2
 8002aaa:	461d      	mov	r5, r3
 8002aac:	4643      	mov	r3, r8
 8002aae:	18e3      	adds	r3, r4, r3
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	464b      	mov	r3, r9
 8002ab4:	eb45 0303 	adc.w	r3, r5, r3
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	028b      	lsls	r3, r1, #10
 8002aca:	4621      	mov	r1, r4
 8002acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	028a      	lsls	r2, r1, #10
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002adc:	2200      	movs	r2, #0
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	61fa      	str	r2, [r7, #28]
 8002ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ae6:	f7fd fbe3 	bl	80002b0 <__aeabi_uldivmod>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4613      	mov	r3, r2
 8002af0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002af4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	0f1b      	lsrs	r3, r3, #28
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002b12:	e003      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3798      	adds	r7, #152	@ 0x98
 8002b24:	46bd      	mov	sp, r7
 8002b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	017d7840 	.word	0x017d7840

08002b38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e28d      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8083 	beq.w	8002c5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b58:	4b94      	ldr	r3, [pc, #592]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d019      	beq.n	8002b98 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b64:	4b91      	ldr	r3, [pc, #580]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b70:	4b8e      	ldr	r3, [pc, #568]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b7c:	d00c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d112      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8a:	4b88      	ldr	r3, [pc, #544]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	4b84      	ldr	r3, [pc, #528]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05b      	beq.n	8002c5c <HAL_RCC_OscConfig+0x124>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d157      	bne.n	8002c5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e25a      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x90>
 8002bba:	4b7c      	ldr	r3, [pc, #496]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7b      	ldr	r2, [pc, #492]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xcc>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0xb4>
 8002bd2:	4b76      	ldr	r3, [pc, #472]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a75      	ldr	r2, [pc, #468]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b73      	ldr	r3, [pc, #460]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a72      	ldr	r2, [pc, #456]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xcc>
 8002bec:	4b6f      	ldr	r3, [pc, #444]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6e      	ldr	r2, [pc, #440]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b6c      	ldr	r3, [pc, #432]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6b      	ldr	r2, [pc, #428]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7ff f8a4 	bl	8001d58 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7ff f8a0 	bl	8001d58 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	@ 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e21f      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b61      	ldr	r3, [pc, #388]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xdc>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7ff f890 	bl	8001d58 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7ff f88c 	bl	8001d58 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	@ 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e20b      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	4b57      	ldr	r3, [pc, #348]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x104>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d06f      	beq.n	8002d4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c6a:	4b50      	ldr	r3, [pc, #320]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d017      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c76:	4b4d      	ldr	r3, [pc, #308]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d105      	bne.n	8002c8e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c82:	4b4a      	ldr	r3, [pc, #296]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8e:	4b47      	ldr	r3, [pc, #284]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c96:	2b0c      	cmp	r3, #12
 8002c98:	d11c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b44      	ldr	r3, [pc, #272]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d116      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	4b41      	ldr	r3, [pc, #260]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_RCC_OscConfig+0x186>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e1d3      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4937      	ldr	r1, [pc, #220]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	e03a      	b.n	8002d4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cdc:	4b34      	ldr	r3, [pc, #208]	@ (8002db0 <HAL_RCC_OscConfig+0x278>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7ff f839 	bl	8001d58 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cea:	f7ff f835 	bl	8001d58 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1b4      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b28      	ldr	r3, [pc, #160]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4925      	ldr	r1, [pc, #148]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
 8002d1c:	e015      	b.n	8002d4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1e:	4b24      	ldr	r3, [pc, #144]	@ (8002db0 <HAL_RCC_OscConfig+0x278>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7ff f818 	bl	8001d58 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7ff f814 	bl	8001d58 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e193      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d036      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d016      	beq.n	8002d8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5e:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe fff8 	bl	8001d58 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7fe fff4 	bl	8001d58 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e173      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x234>
 8002d8a:	e01b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8c:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7fe ffe1 	bl	8001d58 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	e00e      	b.n	8002db8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7fe ffdd 	bl	8001d58 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d907      	bls.n	8002db8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e15c      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
 8002dac:	40023800 	.word	0x40023800
 8002db0:	42470000 	.word	0x42470000
 8002db4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	4b8a      	ldr	r3, [pc, #552]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ea      	bne.n	8002d9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8097 	beq.w	8002f00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd6:	4b83      	ldr	r3, [pc, #524]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	4a7e      	ldr	r2, [pc, #504]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	4b79      	ldr	r3, [pc, #484]	@ (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d118      	bne.n	8002e40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0e:	4b76      	ldr	r3, [pc, #472]	@ (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a75      	ldr	r2, [pc, #468]	@ (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe ff9d 	bl	8001d58 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e22:	f7fe ff99 	bl	8001d58 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e118      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe8 <HAL_RCC_OscConfig+0x4b0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x31e>
 8002e48:	4b66      	ldr	r3, [pc, #408]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4c:	4a65      	ldr	r2, [pc, #404]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e54:	e01c      	b.n	8002e90 <HAL_RCC_OscConfig+0x358>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x340>
 8002e5e:	4b61      	ldr	r3, [pc, #388]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	4a60      	ldr	r2, [pc, #384]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e64:	f043 0304 	orr.w	r3, r3, #4
 8002e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0x358>
 8002e78:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	4a59      	ldr	r2, [pc, #356]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e84:	4b57      	ldr	r3, [pc, #348]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e88:	4a56      	ldr	r2, [pc, #344]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002e8a:	f023 0304 	bic.w	r3, r3, #4
 8002e8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe ff5e 	bl	8001d58 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fe ff5a 	bl	8001d58 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0d7      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ee      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x368>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe ff48 	bl	8001d58 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe ff44 	bl	8001d58 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0c1      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee2:	4b40      	ldr	r3, [pc, #256]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ee      	bne.n	8002ecc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80ad 	beq.w	8003064 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0a:	4b36      	ldr	r3, [pc, #216]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d060      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d145      	bne.n	8002faa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b33      	ldr	r3, [pc, #204]	@ (8002fec <HAL_RCC_OscConfig+0x4b4>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe ff18 	bl	8001d58 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe ff14 	bl	8001d58 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e093      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	4b29      	ldr	r3, [pc, #164]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	071b      	lsls	r3, r3, #28
 8002f76:	491b      	ldr	r1, [pc, #108]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fec <HAL_RCC_OscConfig+0x4b4>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe fee9 	bl	8001d58 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe fee5 	bl	8001d58 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e064      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9c:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x452>
 8002fa8:	e05c      	b.n	8003064 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b10      	ldr	r3, [pc, #64]	@ (8002fec <HAL_RCC_OscConfig+0x4b4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fed2 	bl	8001d58 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe fece 	bl	8001d58 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e04d      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x480>
 8002fd6:	e045      	b.n	8003064 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e040      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8003070 <HAL_RCC_OscConfig+0x538>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d030      	beq.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d129      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d122      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003028:	4293      	cmp	r3, r2
 800302a:	d119      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	3b01      	subs	r3, #1
 800303a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d10f      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d107      	bne.n	8003060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800

08003074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e041      	b.n	800310a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fe fd68 	bl	8001b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f000 fae6 	bl	8003684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d001      	beq.n	800312c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e046      	b.n	80031ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a23      	ldr	r2, [pc, #140]	@ (80031c8 <HAL_TIM_Base_Start+0xb4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d022      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003146:	d01d      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1f      	ldr	r2, [pc, #124]	@ (80031cc <HAL_TIM_Base_Start+0xb8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d018      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1e      	ldr	r2, [pc, #120]	@ (80031d0 <HAL_TIM_Base_Start+0xbc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1c      	ldr	r2, [pc, #112]	@ (80031d4 <HAL_TIM_Base_Start+0xc0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00e      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1b      	ldr	r2, [pc, #108]	@ (80031d8 <HAL_TIM_Base_Start+0xc4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	@ (80031dc <HAL_TIM_Base_Start+0xc8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_TIM_Base_Start+0x70>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a18      	ldr	r2, [pc, #96]	@ (80031e0 <HAL_TIM_Base_Start+0xcc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d111      	bne.n	80031a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b06      	cmp	r3, #6
 8003194:	d010      	beq.n	80031b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a6:	e007      	b.n	80031b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40010000 	.word	0x40010000
 80031cc:	40000400 	.word	0x40000400
 80031d0:	40000800 	.word	0x40000800
 80031d4:	40000c00 	.word	0x40000c00
 80031d8:	40010400 	.word	0x40010400
 80031dc:	40014000 	.word	0x40014000
 80031e0:	40001800 	.word	0x40001800

080031e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d001      	beq.n	80031fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e04e      	b.n	800329a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a23      	ldr	r2, [pc, #140]	@ (80032a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d022      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003226:	d01d      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1f      	ldr	r2, [pc, #124]	@ (80032ac <HAL_TIM_Base_Start_IT+0xc8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d018      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1e      	ldr	r2, [pc, #120]	@ (80032b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d013      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1c      	ldr	r2, [pc, #112]	@ (80032b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00e      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1b      	ldr	r2, [pc, #108]	@ (80032b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a19      	ldr	r2, [pc, #100]	@ (80032bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a18      	ldr	r2, [pc, #96]	@ (80032c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d111      	bne.n	8003288 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b06      	cmp	r3, #6
 8003274:	d010      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003286:	e007      	b.n	8003298 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40000400 	.word	0x40000400
 80032b0:	40000800 	.word	0x40000800
 80032b4:	40000c00 	.word	0x40000c00
 80032b8:	40010400 	.word	0x40010400
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40001800 	.word	0x40001800

080032c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d020      	beq.n	8003328 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01b      	beq.n	8003328 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0202 	mvn.w	r2, #2
 80032f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f999 	bl	8003646 <HAL_TIM_IC_CaptureCallback>
 8003314:	e005      	b.n	8003322 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f98b 	bl	8003632 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f99c 	bl	800365a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0204 	mvn.w	r2, #4
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f973 	bl	8003646 <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f965 	bl	8003632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f976 	bl	800365a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0208 	mvn.w	r2, #8
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2204      	movs	r2, #4
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f94d 	bl	8003646 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f93f 	bl	8003632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f950 	bl	800365a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0210 	mvn.w	r2, #16
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2208      	movs	r2, #8
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f927 	bl	8003646 <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f919 	bl	8003632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f92a 	bl	800365a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0201 	mvn.w	r2, #1
 8003428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe f88e 	bl	800154c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fade 	bl	8003a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8fb 	bl	800366e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0220 	mvn.w	r2, #32
 8003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fab0 	bl	80039fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_TIM_ConfigClockSource+0x1c>
 80034bc:	2302      	movs	r3, #2
 80034be:	e0b4      	b.n	800362a <HAL_TIM_ConfigClockSource+0x186>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f8:	d03e      	beq.n	8003578 <HAL_TIM_ConfigClockSource+0xd4>
 80034fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034fe:	f200 8087 	bhi.w	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003506:	f000 8086 	beq.w	8003616 <HAL_TIM_ConfigClockSource+0x172>
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350e:	d87f      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003510:	2b70      	cmp	r3, #112	@ 0x70
 8003512:	d01a      	beq.n	800354a <HAL_TIM_ConfigClockSource+0xa6>
 8003514:	2b70      	cmp	r3, #112	@ 0x70
 8003516:	d87b      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003518:	2b60      	cmp	r3, #96	@ 0x60
 800351a:	d050      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x11a>
 800351c:	2b60      	cmp	r3, #96	@ 0x60
 800351e:	d877      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b50      	cmp	r3, #80	@ 0x50
 8003522:	d03c      	beq.n	800359e <HAL_TIM_ConfigClockSource+0xfa>
 8003524:	2b50      	cmp	r3, #80	@ 0x50
 8003526:	d873      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d058      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x13a>
 800352c:	2b40      	cmp	r3, #64	@ 0x40
 800352e:	d86f      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b30      	cmp	r3, #48	@ 0x30
 8003532:	d064      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 8003534:	2b30      	cmp	r3, #48	@ 0x30
 8003536:	d86b      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b20      	cmp	r3, #32
 800353a:	d060      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 800353c:	2b20      	cmp	r3, #32
 800353e:	d867      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d05c      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 8003544:	2b10      	cmp	r3, #16
 8003546:	d05a      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 8003548:	e062      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800355a:	f000 f9b3 	bl	80038c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800356c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	609a      	str	r2, [r3, #8]
      break;
 8003576:	e04f      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003588:	f000 f99c 	bl	80038c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800359a:	609a      	str	r2, [r3, #8]
      break;
 800359c:	e03c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035aa:	461a      	mov	r2, r3
 80035ac:	f000 f910 	bl	80037d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2150      	movs	r1, #80	@ 0x50
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f969 	bl	800388e <TIM_ITRx_SetConfig>
      break;
 80035bc:	e02c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ca:	461a      	mov	r2, r3
 80035cc:	f000 f92f 	bl	800382e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2160      	movs	r1, #96	@ 0x60
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f959 	bl	800388e <TIM_ITRx_SetConfig>
      break;
 80035dc:	e01c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	461a      	mov	r2, r3
 80035ec:	f000 f8f0 	bl	80037d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2140      	movs	r1, #64	@ 0x40
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f949 	bl	800388e <TIM_ITRx_SetConfig>
      break;
 80035fc:	e00c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f000 f940 	bl	800388e <TIM_ITRx_SetConfig>
      break;
 800360e:	e003      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      break;
 8003614:	e000      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a43      	ldr	r2, [pc, #268]	@ (80037a4 <TIM_Base_SetConfig+0x120>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a2:	d00f      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a40      	ldr	r2, [pc, #256]	@ (80037a8 <TIM_Base_SetConfig+0x124>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00b      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a3f      	ldr	r2, [pc, #252]	@ (80037ac <TIM_Base_SetConfig+0x128>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d007      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a3e      	ldr	r2, [pc, #248]	@ (80037b0 <TIM_Base_SetConfig+0x12c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d003      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a3d      	ldr	r2, [pc, #244]	@ (80037b4 <TIM_Base_SetConfig+0x130>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d108      	bne.n	80036d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a32      	ldr	r2, [pc, #200]	@ (80037a4 <TIM_Base_SetConfig+0x120>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02b      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e4:	d027      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a2f      	ldr	r2, [pc, #188]	@ (80037a8 <TIM_Base_SetConfig+0x124>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d023      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a2e      	ldr	r2, [pc, #184]	@ (80037ac <TIM_Base_SetConfig+0x128>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01f      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2d      	ldr	r2, [pc, #180]	@ (80037b0 <TIM_Base_SetConfig+0x12c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01b      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2c      	ldr	r2, [pc, #176]	@ (80037b4 <TIM_Base_SetConfig+0x130>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d017      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2b      	ldr	r2, [pc, #172]	@ (80037b8 <TIM_Base_SetConfig+0x134>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a2a      	ldr	r2, [pc, #168]	@ (80037bc <TIM_Base_SetConfig+0x138>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00f      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a29      	ldr	r2, [pc, #164]	@ (80037c0 <TIM_Base_SetConfig+0x13c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00b      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a28      	ldr	r2, [pc, #160]	@ (80037c4 <TIM_Base_SetConfig+0x140>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a27      	ldr	r2, [pc, #156]	@ (80037c8 <TIM_Base_SetConfig+0x144>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d003      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a26      	ldr	r2, [pc, #152]	@ (80037cc <TIM_Base_SetConfig+0x148>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d108      	bne.n	8003748 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a0e      	ldr	r2, [pc, #56]	@ (80037a4 <TIM_Base_SetConfig+0x120>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <TIM_Base_SetConfig+0xf2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a10      	ldr	r2, [pc, #64]	@ (80037b4 <TIM_Base_SetConfig+0x130>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d103      	bne.n	800377e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f043 0204 	orr.w	r2, r3, #4
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40010000 	.word	0x40010000
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800
 80037b0:	40000c00 	.word	0x40000c00
 80037b4:	40010400 	.word	0x40010400
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40014400 	.word	0x40014400
 80037c0:	40014800 	.word	0x40014800
 80037c4:	40001800 	.word	0x40001800
 80037c8:	40001c00 	.word	0x40001c00
 80037cc:	40002000 	.word	0x40002000

080037d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f023 0201 	bic.w	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f023 030a 	bic.w	r3, r3, #10
 800380c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800382e:	b480      	push	{r7}
 8003830:	b087      	sub	sp, #28
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f023 0210 	bic.w	r2, r3, #16
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	031b      	lsls	r3, r3, #12
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800386a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f043 0307 	orr.w	r3, r3, #7
 80038b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	021a      	lsls	r2, r3, #8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	609a      	str	r2, [r3, #8]
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003918:	2302      	movs	r3, #2
 800391a:	e05a      	b.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a21      	ldr	r2, [pc, #132]	@ (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d022      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003968:	d01d      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1d      	ldr	r2, [pc, #116]	@ (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d018      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1b      	ldr	r2, [pc, #108]	@ (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1a      	ldr	r2, [pc, #104]	@ (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00e      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a18      	ldr	r2, [pc, #96]	@ (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a17      	ldr	r2, [pc, #92]	@ (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a15      	ldr	r2, [pc, #84]	@ (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10c      	bne.n	80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40010000 	.word	0x40010000
 80039e4:	40000400 	.word	0x40000400
 80039e8:	40000800 	.word	0x40000800
 80039ec:	40000c00 	.word	0x40000c00
 80039f0:	40010400 	.word	0x40010400
 80039f4:	40014000 	.word	0x40014000
 80039f8:	40001800 	.word	0x40001800

080039fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e042      	b.n	8003abc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe f8dc 	bl	8001c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	@ 0x24
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f973 	bl	8003d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	@ 0x28
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d175      	bne.n	8003bd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_UART_Transmit+0x2c>
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e06e      	b.n	8003bd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2221      	movs	r2, #33	@ 0x21
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b02:	f7fe f929 	bl	8001d58 <HAL_GetTick>
 8003b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	88fa      	ldrh	r2, [r7, #6]
 8003b0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	88fa      	ldrh	r2, [r7, #6]
 8003b12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b1c:	d108      	bne.n	8003b30 <HAL_UART_Transmit+0x6c>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d104      	bne.n	8003b30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	e003      	b.n	8003b38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b38:	e02e      	b.n	8003b98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2200      	movs	r2, #0
 8003b42:	2180      	movs	r1, #128	@ 0x80
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f848 	bl	8003bda <UART_WaitOnFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e03a      	b.n	8003bd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10b      	bne.n	8003b7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	3302      	adds	r3, #2
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	e007      	b.n	8003b8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3301      	adds	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1cb      	bne.n	8003b3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2140      	movs	r1, #64	@ 0x40
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f814 	bl	8003bda <UART_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e006      	b.n	8003bd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bea:	e03b      	b.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf2:	d037      	beq.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7fe f8b0 	bl	8001d58 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	6a3a      	ldr	r2, [r7, #32]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d302      	bcc.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e03a      	b.n	8003c84 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d023      	beq.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b80      	cmp	r3, #128	@ 0x80
 8003c20:	d020      	beq.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b40      	cmp	r3, #64	@ 0x40
 8003c26:	d01d      	beq.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d116      	bne.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f81d 	bl	8003c8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2208      	movs	r2, #8
 8003c56:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e00f      	b.n	8003c84 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d0b4      	beq.n	8003bec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b095      	sub	sp, #84	@ 0x54
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e5      	bne.n	8003c94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3314      	adds	r3, #20
 8003cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f023 0301 	bic.w	r3, r3, #1
 8003cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3314      	adds	r3, #20
 8003ce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e5      	bne.n	8003cc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d119      	bne.n	8003d38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f023 0310 	bic.w	r3, r3, #16
 8003d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d24:	61ba      	str	r2, [r7, #24]
 8003d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	6979      	ldr	r1, [r7, #20]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	613b      	str	r3, [r7, #16]
   return(result);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e5      	bne.n	8003d04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d46:	bf00      	nop
 8003d48:	3754      	adds	r7, #84	@ 0x54
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d58:	b0c0      	sub	sp, #256	@ 0x100
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d70:	68d9      	ldr	r1, [r3, #12]
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	ea40 0301 	orr.w	r3, r0, r1
 8003d7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003dac:	f021 010c 	bic.w	r1, r1, #12
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dce:	6999      	ldr	r1, [r3, #24]
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	ea40 0301 	orr.w	r3, r0, r1
 8003dda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b8f      	ldr	r3, [pc, #572]	@ (8004020 <UART_SetConfig+0x2cc>)
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d005      	beq.n	8003df4 <UART_SetConfig+0xa0>
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b8d      	ldr	r3, [pc, #564]	@ (8004024 <UART_SetConfig+0x2d0>)
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d104      	bne.n	8003dfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003df4:	f7fe fcb0 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8003df8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003dfc:	e003      	b.n	8003e06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dfe:	f7fe fc97 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003e02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e10:	f040 810c 	bne.w	800402c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e26:	4622      	mov	r2, r4
 8003e28:	462b      	mov	r3, r5
 8003e2a:	1891      	adds	r1, r2, r2
 8003e2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e2e:	415b      	adcs	r3, r3
 8003e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e36:	4621      	mov	r1, r4
 8003e38:	eb12 0801 	adds.w	r8, r2, r1
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	eb43 0901 	adc.w	r9, r3, r1
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e56:	4690      	mov	r8, r2
 8003e58:	4699      	mov	r9, r3
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	eb18 0303 	adds.w	r3, r8, r3
 8003e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e64:	462b      	mov	r3, r5
 8003e66:	eb49 0303 	adc.w	r3, r9, r3
 8003e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e82:	460b      	mov	r3, r1
 8003e84:	18db      	adds	r3, r3, r3
 8003e86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e88:	4613      	mov	r3, r2
 8003e8a:	eb42 0303 	adc.w	r3, r2, r3
 8003e8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e98:	f7fc fa0a 	bl	80002b0 <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4b61      	ldr	r3, [pc, #388]	@ (8004028 <UART_SetConfig+0x2d4>)
 8003ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	011c      	lsls	r4, r3, #4
 8003eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003eb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003eb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	1891      	adds	r1, r2, r2
 8003ec2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ec4:	415b      	adcs	r3, r3
 8003ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ec8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ecc:	4641      	mov	r1, r8
 8003ece:	eb12 0a01 	adds.w	sl, r2, r1
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ee4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eec:	4692      	mov	sl, r2
 8003eee:	469b      	mov	fp, r3
 8003ef0:	4643      	mov	r3, r8
 8003ef2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003efa:	464b      	mov	r3, r9
 8003efc:	eb4b 0303 	adc.w	r3, fp, r3
 8003f00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	18db      	adds	r3, r3, r3
 8003f1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f1e:	4613      	mov	r3, r2
 8003f20:	eb42 0303 	adc.w	r3, r2, r3
 8003f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f2e:	f7fc f9bf 	bl	80002b0 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4611      	mov	r1, r2
 8003f38:	4b3b      	ldr	r3, [pc, #236]	@ (8004028 <UART_SetConfig+0x2d4>)
 8003f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	2264      	movs	r2, #100	@ 0x64
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	1acb      	subs	r3, r1, r3
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f4e:	4b36      	ldr	r3, [pc, #216]	@ (8004028 <UART_SetConfig+0x2d4>)
 8003f50:	fba3 2302 	umull	r2, r3, r3, r2
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f5c:	441c      	add	r4, r3
 8003f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f70:	4642      	mov	r2, r8
 8003f72:	464b      	mov	r3, r9
 8003f74:	1891      	adds	r1, r2, r2
 8003f76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f78:	415b      	adcs	r3, r3
 8003f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f80:	4641      	mov	r1, r8
 8003f82:	1851      	adds	r1, r2, r1
 8003f84:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f86:	4649      	mov	r1, r9
 8003f88:	414b      	adcs	r3, r1
 8003f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f98:	4659      	mov	r1, fp
 8003f9a:	00cb      	lsls	r3, r1, #3
 8003f9c:	4651      	mov	r1, sl
 8003f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa2:	4651      	mov	r1, sl
 8003fa4:	00ca      	lsls	r2, r1, #3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	4642      	mov	r2, r8
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	460a      	mov	r2, r1
 8003fb8:	eb42 0303 	adc.w	r3, r2, r3
 8003fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	18db      	adds	r3, r3, r3
 8003fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fda:	4613      	mov	r3, r2
 8003fdc:	eb42 0303 	adc.w	r3, r2, r3
 8003fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fe6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fea:	f7fc f961 	bl	80002b0 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8004028 <UART_SetConfig+0x2d4>)
 8003ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	2164      	movs	r1, #100	@ 0x64
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	3332      	adds	r3, #50	@ 0x32
 8004006:	4a08      	ldr	r2, [pc, #32]	@ (8004028 <UART_SetConfig+0x2d4>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	f003 0207 	and.w	r2, r3, #7
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4422      	add	r2, r4
 800401a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800401c:	e106      	b.n	800422c <UART_SetConfig+0x4d8>
 800401e:	bf00      	nop
 8004020:	40011000 	.word	0x40011000
 8004024:	40011400 	.word	0x40011400
 8004028:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800402c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004030:	2200      	movs	r2, #0
 8004032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004036:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800403a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800403e:	4642      	mov	r2, r8
 8004040:	464b      	mov	r3, r9
 8004042:	1891      	adds	r1, r2, r2
 8004044:	6239      	str	r1, [r7, #32]
 8004046:	415b      	adcs	r3, r3
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
 800404a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800404e:	4641      	mov	r1, r8
 8004050:	1854      	adds	r4, r2, r1
 8004052:	4649      	mov	r1, r9
 8004054:	eb43 0501 	adc.w	r5, r3, r1
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	00eb      	lsls	r3, r5, #3
 8004062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004066:	00e2      	lsls	r2, r4, #3
 8004068:	4614      	mov	r4, r2
 800406a:	461d      	mov	r5, r3
 800406c:	4643      	mov	r3, r8
 800406e:	18e3      	adds	r3, r4, r3
 8004070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004074:	464b      	mov	r3, r9
 8004076:	eb45 0303 	adc.w	r3, r5, r3
 800407a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800408a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800409a:	4629      	mov	r1, r5
 800409c:	008b      	lsls	r3, r1, #2
 800409e:	4621      	mov	r1, r4
 80040a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040a4:	4621      	mov	r1, r4
 80040a6:	008a      	lsls	r2, r1, #2
 80040a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040ac:	f7fc f900 	bl	80002b0 <__aeabi_uldivmod>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4b60      	ldr	r3, [pc, #384]	@ (8004238 <UART_SetConfig+0x4e4>)
 80040b6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	011c      	lsls	r4, r3, #4
 80040be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	1891      	adds	r1, r2, r2
 80040d6:	61b9      	str	r1, [r7, #24]
 80040d8:	415b      	adcs	r3, r3
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e0:	4641      	mov	r1, r8
 80040e2:	1851      	adds	r1, r2, r1
 80040e4:	6139      	str	r1, [r7, #16]
 80040e6:	4649      	mov	r1, r9
 80040e8:	414b      	adcs	r3, r1
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040f8:	4659      	mov	r1, fp
 80040fa:	00cb      	lsls	r3, r1, #3
 80040fc:	4651      	mov	r1, sl
 80040fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004102:	4651      	mov	r1, sl
 8004104:	00ca      	lsls	r2, r1, #3
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	4603      	mov	r3, r0
 800410c:	4642      	mov	r2, r8
 800410e:	189b      	adds	r3, r3, r2
 8004110:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004114:	464b      	mov	r3, r9
 8004116:	460a      	mov	r2, r1
 8004118:	eb42 0303 	adc.w	r3, r2, r3
 800411c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	67bb      	str	r3, [r7, #120]	@ 0x78
 800412a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004138:	4649      	mov	r1, r9
 800413a:	008b      	lsls	r3, r1, #2
 800413c:	4641      	mov	r1, r8
 800413e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004142:	4641      	mov	r1, r8
 8004144:	008a      	lsls	r2, r1, #2
 8004146:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800414a:	f7fc f8b1 	bl	80002b0 <__aeabi_uldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4611      	mov	r1, r2
 8004154:	4b38      	ldr	r3, [pc, #224]	@ (8004238 <UART_SetConfig+0x4e4>)
 8004156:	fba3 2301 	umull	r2, r3, r3, r1
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	2264      	movs	r2, #100	@ 0x64
 800415e:	fb02 f303 	mul.w	r3, r2, r3
 8004162:	1acb      	subs	r3, r1, r3
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	3332      	adds	r3, #50	@ 0x32
 8004168:	4a33      	ldr	r2, [pc, #204]	@ (8004238 <UART_SetConfig+0x4e4>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004174:	441c      	add	r4, r3
 8004176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800417a:	2200      	movs	r2, #0
 800417c:	673b      	str	r3, [r7, #112]	@ 0x70
 800417e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004180:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004184:	4642      	mov	r2, r8
 8004186:	464b      	mov	r3, r9
 8004188:	1891      	adds	r1, r2, r2
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	415b      	adcs	r3, r3
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004194:	4641      	mov	r1, r8
 8004196:	1851      	adds	r1, r2, r1
 8004198:	6039      	str	r1, [r7, #0]
 800419a:	4649      	mov	r1, r9
 800419c:	414b      	adcs	r3, r1
 800419e:	607b      	str	r3, [r7, #4]
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041ac:	4659      	mov	r1, fp
 80041ae:	00cb      	lsls	r3, r1, #3
 80041b0:	4651      	mov	r1, sl
 80041b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041b6:	4651      	mov	r1, sl
 80041b8:	00ca      	lsls	r2, r1, #3
 80041ba:	4610      	mov	r0, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	4642      	mov	r2, r8
 80041c2:	189b      	adds	r3, r3, r2
 80041c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041c6:	464b      	mov	r3, r9
 80041c8:	460a      	mov	r2, r1
 80041ca:	eb42 0303 	adc.w	r3, r2, r3
 80041ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80041da:	667a      	str	r2, [r7, #100]	@ 0x64
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041e8:	4649      	mov	r1, r9
 80041ea:	008b      	lsls	r3, r1, #2
 80041ec:	4641      	mov	r1, r8
 80041ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f2:	4641      	mov	r1, r8
 80041f4:	008a      	lsls	r2, r1, #2
 80041f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041fa:	f7fc f859 	bl	80002b0 <__aeabi_uldivmod>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <UART_SetConfig+0x4e4>)
 8004204:	fba3 1302 	umull	r1, r3, r3, r2
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	2164      	movs	r1, #100	@ 0x64
 800420c:	fb01 f303 	mul.w	r3, r1, r3
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	3332      	adds	r3, #50	@ 0x32
 8004216:	4a08      	ldr	r2, [pc, #32]	@ (8004238 <UART_SetConfig+0x4e4>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	f003 020f 	and.w	r2, r3, #15
 8004222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4422      	add	r2, r4
 800422a:	609a      	str	r2, [r3, #8]
}
 800422c:	bf00      	nop
 800422e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004232:	46bd      	mov	sp, r7
 8004234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004238:	51eb851f 	.word	0x51eb851f

0800423c <__NVIC_SetPriority>:
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	6039      	str	r1, [r7, #0]
 8004246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424c:	2b00      	cmp	r3, #0
 800424e:	db0a      	blt.n	8004266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	b2da      	uxtb	r2, r3
 8004254:	490c      	ldr	r1, [pc, #48]	@ (8004288 <__NVIC_SetPriority+0x4c>)
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	0112      	lsls	r2, r2, #4
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	440b      	add	r3, r1
 8004260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004264:	e00a      	b.n	800427c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4908      	ldr	r1, [pc, #32]	@ (800428c <__NVIC_SetPriority+0x50>)
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	3b04      	subs	r3, #4
 8004274:	0112      	lsls	r2, r2, #4
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	440b      	add	r3, r1
 800427a:	761a      	strb	r2, [r3, #24]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	e000e100 	.word	0xe000e100
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <SysTick_Handler+0x1c>)
 8004296:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004298:	f001 fd18 	bl	8005ccc <xTaskGetSchedulerState>
 800429c:	4603      	mov	r3, r0
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d001      	beq.n	80042a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80042a2:	f002 fb11 	bl	80068c8 <xPortSysTickHandler>
  }
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	e000e010 	.word	0xe000e010

080042b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042b4:	2100      	movs	r1, #0
 80042b6:	f06f 0004 	mvn.w	r0, #4
 80042ba:	f7ff ffbf 	bl	800423c <__NVIC_SetPriority>
#endif
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ca:	f3ef 8305 	mrs	r3, IPSR
 80042ce:	603b      	str	r3, [r7, #0]
  return(result);
 80042d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80042d6:	f06f 0305 	mvn.w	r3, #5
 80042da:	607b      	str	r3, [r7, #4]
 80042dc:	e00c      	b.n	80042f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80042de:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <osKernelInitialize+0x44>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80042e6:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <osKernelInitialize+0x44>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	e002      	b.n	80042f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
 80042f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042f8:	687b      	ldr	r3, [r7, #4]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	200005ac 	.word	0x200005ac

0800430c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004312:	f3ef 8305 	mrs	r3, IPSR
 8004316:	603b      	str	r3, [r7, #0]
  return(result);
 8004318:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <osKernelStart+0x1a>
    stat = osErrorISR;
 800431e:	f06f 0305 	mvn.w	r3, #5
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	e010      	b.n	8004348 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004326:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <osKernelStart+0x48>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d109      	bne.n	8004342 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800432e:	f7ff ffbf 	bl	80042b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004332:	4b08      	ldr	r3, [pc, #32]	@ (8004354 <osKernelStart+0x48>)
 8004334:	2202      	movs	r2, #2
 8004336:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004338:	f001 f87a 	bl	8005430 <vTaskStartScheduler>
      stat = osOK;
 800433c:	2300      	movs	r3, #0
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	e002      	b.n	8004348 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295
 8004346:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004348:	687b      	ldr	r3, [r7, #4]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200005ac 	.word	0x200005ac

08004358 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b08e      	sub	sp, #56	@ 0x38
 800435c:	af04      	add	r7, sp, #16
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004368:	f3ef 8305 	mrs	r3, IPSR
 800436c:	617b      	str	r3, [r7, #20]
  return(result);
 800436e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004370:	2b00      	cmp	r3, #0
 8004372:	d17e      	bne.n	8004472 <osThreadNew+0x11a>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d07b      	beq.n	8004472 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800437e:	2318      	movs	r3, #24
 8004380:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d045      	beq.n	800441e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <osThreadNew+0x48>
        name = attr->name;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <osThreadNew+0x6e>
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b38      	cmp	r3, #56	@ 0x38
 80043b8:	d805      	bhi.n	80043c6 <osThreadNew+0x6e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <osThreadNew+0x72>
        return (NULL);
 80043c6:	2300      	movs	r3, #0
 80043c8:	e054      	b.n	8004474 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	089b      	lsrs	r3, r3, #2
 80043d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00e      	beq.n	8004400 <osThreadNew+0xa8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b5b      	cmp	r3, #91	@ 0x5b
 80043e8:	d90a      	bls.n	8004400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <osThreadNew+0xa8>
        mem = 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e010      	b.n	8004422 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10c      	bne.n	8004422 <osThreadNew+0xca>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d108      	bne.n	8004422 <osThreadNew+0xca>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <osThreadNew+0xca>
          mem = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	e001      	b.n	8004422 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d110      	bne.n	800444a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004430:	9202      	str	r2, [sp, #8]
 8004432:	9301      	str	r3, [sp, #4]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	6a3a      	ldr	r2, [r7, #32]
 800443c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fe1a 	bl	8005078 <xTaskCreateStatic>
 8004444:	4603      	mov	r3, r0
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	e013      	b.n	8004472 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d110      	bne.n	8004472 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	b29a      	uxth	r2, r3
 8004454:	f107 0310 	add.w	r3, r7, #16
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 fe68 	bl	8005138 <xTaskCreate>
 8004468:	4603      	mov	r3, r0
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <osThreadNew+0x11a>
            hTask = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004472:	693b      	ldr	r3, [r7, #16]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3728      	adds	r7, #40	@ 0x28
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004484:	f3ef 8305 	mrs	r3, IPSR
 8004488:	60bb      	str	r3, [r7, #8]
  return(result);
 800448a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <osDelay+0x1c>
    stat = osErrorISR;
 8004490:	f06f 0305 	mvn.w	r3, #5
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e007      	b.n	80044a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 ff8e 	bl	80053c4 <vTaskDelay>
    }
  }

  return (stat);
 80044a8:	68fb      	ldr	r3, [r7, #12]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a07      	ldr	r2, [pc, #28]	@ (80044e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80044c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4a06      	ldr	r2, [pc, #24]	@ (80044e4 <vApplicationGetIdleTaskMemory+0x30>)
 80044ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2280      	movs	r2, #128	@ 0x80
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	200005b0 	.word	0x200005b0
 80044e4:	2000060c 	.word	0x2000060c

080044e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a07      	ldr	r2, [pc, #28]	@ (8004514 <vApplicationGetTimerTaskMemory+0x2c>)
 80044f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4a06      	ldr	r2, [pc, #24]	@ (8004518 <vApplicationGetTimerTaskMemory+0x30>)
 80044fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004506:	601a      	str	r2, [r3, #0]
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	2000080c 	.word	0x2000080c
 8004518:	20000868 	.word	0x20000868

0800451c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f103 0208 	add.w	r2, r3, #8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f04f 32ff 	mov.w	r2, #4294967295
 8004534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f103 0208 	add.w	r2, r3, #8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f103 0208 	add.w	r2, r3, #8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d103      	bne.n	80045de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	e00c      	b.n	80045f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3308      	adds	r3, #8
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e002      	b.n	80045ec <vListInsert+0x2e>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d2f6      	bcs.n	80045e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6892      	ldr	r2, [r2, #8]
 8004646:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6852      	ldr	r2, [r2, #4]
 8004650:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	429a      	cmp	r2, r3
 800465a:	d103      	bne.n	8004664 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	1e5a      	subs	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10b      	bne.n	80046b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046aa:	bf00      	nop
 80046ac:	bf00      	nop
 80046ae:	e7fd      	b.n	80046ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046b0:	f002 f87a 	bl	80067a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046bc:	68f9      	ldr	r1, [r7, #12]
 80046be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	441a      	add	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e0:	3b01      	subs	r3, #1
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	441a      	add	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	22ff      	movs	r2, #255	@ 0xff
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	22ff      	movs	r2, #255	@ 0xff
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d114      	bne.n	8004730 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01a      	beq.n	8004744 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3310      	adds	r3, #16
 8004712:	4618      	mov	r0, r3
 8004714:	f001 f91a 	bl	800594c <xTaskRemoveFromEventList>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d012      	beq.n	8004744 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800471e:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <xQueueGenericReset+0xd0>)
 8004720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	e009      	b.n	8004744 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3310      	adds	r3, #16
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fef1 	bl	800451c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3324      	adds	r3, #36	@ 0x24
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff feec 	bl	800451c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004744:	f002 f862 	bl	800680c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004748:	2301      	movs	r3, #1
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08e      	sub	sp, #56	@ 0x38
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800477e:	bf00      	nop
 8004780:	bf00      	nop
 8004782:	e7fd      	b.n	8004780 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10b      	bne.n	80047a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	e7fd      	b.n	800479e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <xQueueGenericCreateStatic+0x56>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <xQueueGenericCreateStatic+0x5a>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <xQueueGenericCreateStatic+0x5c>
 80047b2:	2300      	movs	r3, #0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	623b      	str	r3, [r7, #32]
}
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
 80047ce:	e7fd      	b.n	80047cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <xQueueGenericCreateStatic+0x84>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <xQueueGenericCreateStatic+0x88>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <xQueueGenericCreateStatic+0x8a>
 80047e0:	2300      	movs	r3, #0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10b      	bne.n	80047fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	61fb      	str	r3, [r7, #28]
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	e7fd      	b.n	80047fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047fe:	2350      	movs	r3, #80	@ 0x50
 8004800:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b50      	cmp	r3, #80	@ 0x50
 8004806:	d00b      	beq.n	8004820 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	61bb      	str	r3, [r7, #24]
}
 800481a:	bf00      	nop
 800481c:	bf00      	nop
 800481e:	e7fd      	b.n	800481c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004820:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00d      	beq.n	8004848 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800482c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004834:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f805 	bl	8004852 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800484a:	4618      	mov	r0, r3
 800484c:	3730      	adds	r7, #48	@ 0x30
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e002      	b.n	8004874 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004880:	2101      	movs	r1, #1
 8004882:	69b8      	ldr	r0, [r7, #24]
 8004884:	f7ff fefe 	bl	8004684 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08e      	sub	sp, #56	@ 0x38
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048a6:	2300      	movs	r3, #0
 80048a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10b      	bne.n	80048cc <xQueueGenericSend+0x34>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <xQueueGenericSend+0x42>
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <xQueueGenericSend+0x46>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <xQueueGenericSend+0x48>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10b      	bne.n	80048fc <xQueueGenericSend+0x64>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048f6:	bf00      	nop
 80048f8:	bf00      	nop
 80048fa:	e7fd      	b.n	80048f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d103      	bne.n	800490a <xQueueGenericSend+0x72>
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <xQueueGenericSend+0x76>
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <xQueueGenericSend+0x78>
 800490e:	2300      	movs	r3, #0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <xQueueGenericSend+0x94>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	623b      	str	r3, [r7, #32]
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800492c:	f001 f9ce 	bl	8005ccc <xTaskGetSchedulerState>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <xQueueGenericSend+0xa4>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <xQueueGenericSend+0xa8>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <xQueueGenericSend+0xaa>
 8004940:	2300      	movs	r3, #0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10b      	bne.n	800495e <xQueueGenericSend+0xc6>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	61fb      	str	r3, [r7, #28]
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	e7fd      	b.n	800495a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800495e:	f001 ff23 	bl	80067a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <xQueueGenericSend+0xdc>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d129      	bne.n	80049c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800497a:	f000 fa0f 	bl	8004d9c <prvCopyDataToQueue>
 800497e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498a:	3324      	adds	r3, #36	@ 0x24
 800498c:	4618      	mov	r0, r3
 800498e:	f000 ffdd 	bl	800594c <xTaskRemoveFromEventList>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d013      	beq.n	80049c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004998:	4b3f      	ldr	r3, [pc, #252]	@ (8004a98 <xQueueGenericSend+0x200>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	e00a      	b.n	80049c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049b0:	4b39      	ldr	r3, [pc, #228]	@ (8004a98 <xQueueGenericSend+0x200>)
 80049b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049c0:	f001 ff24 	bl	800680c <vPortExitCritical>
				return pdPASS;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e063      	b.n	8004a90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d103      	bne.n	80049d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049ce:	f001 ff1d 	bl	800680c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e05c      	b.n	8004a90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 f817 	bl	8005a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049e6:	2301      	movs	r3, #1
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049ea:	f001 ff0f 	bl	800680c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049ee:	f000 fd87 	bl	8005500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049f2:	f001 fed9 	bl	80067a8 <vPortEnterCritical>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d103      	bne.n	8004a0c <xQueueGenericSend+0x174>
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d103      	bne.n	8004a22 <xQueueGenericSend+0x18a>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a22:	f001 fef3 	bl	800680c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a26:	1d3a      	adds	r2, r7, #4
 8004a28:	f107 0314 	add.w	r3, r7, #20
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 f806 	bl	8005a40 <xTaskCheckForTimeOut>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d124      	bne.n	8004a84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a3c:	f000 faa6 	bl	8004f8c <prvIsQueueFull>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d018      	beq.n	8004a78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	3310      	adds	r3, #16
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 ff2a 	bl	80058a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a56:	f000 fa31 	bl	8004ebc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a5a:	f000 fd5f 	bl	800551c <xTaskResumeAll>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f af7c 	bne.w	800495e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004a66:	4b0c      	ldr	r3, [pc, #48]	@ (8004a98 <xQueueGenericSend+0x200>)
 8004a68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	e772      	b.n	800495e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a7a:	f000 fa1f 	bl	8004ebc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a7e:	f000 fd4d 	bl	800551c <xTaskResumeAll>
 8004a82:	e76c      	b.n	800495e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a86:	f000 fa19 	bl	8004ebc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a8a:	f000 fd47 	bl	800551c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3738      	adds	r7, #56	@ 0x38
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b090      	sub	sp, #64	@ 0x40
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <xQueueGenericSendFromISR+0x3e>
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <xQueueGenericSendFromISR+0x42>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <xQueueGenericSendFromISR+0x44>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d103      	bne.n	8004b0a <xQueueGenericSendFromISR+0x6e>
 8004b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <xQueueGenericSendFromISR+0x72>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <xQueueGenericSendFromISR+0x74>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	623b      	str	r3, [r7, #32]
}
 8004b26:	bf00      	nop
 8004b28:	bf00      	nop
 8004b2a:	e7fd      	b.n	8004b28 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b2c:	f001 ff1c 	bl	8006968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b30:	f3ef 8211 	mrs	r2, BASEPRI
 8004b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	61fa      	str	r2, [r7, #28]
 8004b46:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b48:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d302      	bcc.n	8004b5e <xQueueGenericSendFromISR+0xc2>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d12f      	bne.n	8004bbe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b74:	f000 f912 	bl	8004d9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d112      	bne.n	8004ba8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d016      	beq.n	8004bb8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	3324      	adds	r3, #36	@ 0x24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fedc 	bl	800594c <xTaskRemoveFromEventList>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00e      	beq.n	8004bb8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00b      	beq.n	8004bb8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e007      	b.n	8004bb8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004bac:	3301      	adds	r3, #1
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	b25a      	sxtb	r2, r3
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004bbc:	e001      	b.n	8004bc2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3740      	adds	r7, #64	@ 0x40
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08c      	sub	sp, #48	@ 0x30
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <xQueueReceive+0x32>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	623b      	str	r3, [r7, #32]
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	e7fd      	b.n	8004c06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d103      	bne.n	8004c18 <xQueueReceive+0x40>
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <xQueueReceive+0x44>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <xQueueReceive+0x46>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <xQueueReceive+0x62>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	61fb      	str	r3, [r7, #28]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c3a:	f001 f847 	bl	8005ccc <xTaskGetSchedulerState>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <xQueueReceive+0x72>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <xQueueReceive+0x76>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <xQueueReceive+0x78>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10b      	bne.n	8004c6c <xQueueReceive+0x94>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	61bb      	str	r3, [r7, #24]
}
 8004c66:	bf00      	nop
 8004c68:	bf00      	nop
 8004c6a:	e7fd      	b.n	8004c68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c6c:	f001 fd9c 	bl	80067a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01f      	beq.n	8004cbc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c80:	f000 f8f6 	bl	8004e70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	1e5a      	subs	r2, r3, #1
 8004c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00f      	beq.n	8004cb4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c96:	3310      	adds	r3, #16
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fe57 	bl	800594c <xTaskRemoveFromEventList>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8004d98 <xQueueReceive+0x1c0>)
 8004ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cb4:	f001 fdaa 	bl	800680c <vPortExitCritical>
				return pdPASS;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e069      	b.n	8004d90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cc2:	f001 fda3 	bl	800680c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e062      	b.n	8004d90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cd0:	f107 0310 	add.w	r3, r7, #16
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fe9d 	bl	8005a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cde:	f001 fd95 	bl	800680c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ce2:	f000 fc0d 	bl	8005500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ce6:	f001 fd5f 	bl	80067a8 <vPortEnterCritical>
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cf0:	b25b      	sxtb	r3, r3
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf6:	d103      	bne.n	8004d00 <xQueueReceive+0x128>
 8004cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d06:	b25b      	sxtb	r3, r3
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d103      	bne.n	8004d16 <xQueueReceive+0x13e>
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d16:	f001 fd79 	bl	800680c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d1a:	1d3a      	adds	r2, r7, #4
 8004d1c:	f107 0310 	add.w	r3, r7, #16
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fe8c 	bl	8005a40 <xTaskCheckForTimeOut>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d123      	bne.n	8004d76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d30:	f000 f916 	bl	8004f60 <prvIsQueueEmpty>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d017      	beq.n	8004d6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	3324      	adds	r3, #36	@ 0x24
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fdb0 	bl	80058a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d4a:	f000 f8b7 	bl	8004ebc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d4e:	f000 fbe5 	bl	800551c <xTaskResumeAll>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d189      	bne.n	8004c6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004d58:	4b0f      	ldr	r3, [pc, #60]	@ (8004d98 <xQueueReceive+0x1c0>)
 8004d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	e780      	b.n	8004c6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d6c:	f000 f8a6 	bl	8004ebc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d70:	f000 fbd4 	bl	800551c <xTaskResumeAll>
 8004d74:	e77a      	b.n	8004c6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d78:	f000 f8a0 	bl	8004ebc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d7c:	f000 fbce 	bl	800551c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d82:	f000 f8ed 	bl	8004f60 <prvIsQueueEmpty>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f43f af6f 	beq.w	8004c6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3730      	adds	r7, #48	@ 0x30
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10d      	bne.n	8004dd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d14d      	bne.n	8004e5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 ff9e 	bl	8005d08 <xTaskPriorityDisinherit>
 8004dcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	e043      	b.n	8004e5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d119      	bne.n	8004e10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6858      	ldr	r0, [r3, #4]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	461a      	mov	r2, r3
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	f002 fa9f 	bl	800732a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	441a      	add	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d32b      	bcc.n	8004e5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	e026      	b.n	8004e5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68d8      	ldr	r0, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	f002 fa85 	bl	800732a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	425b      	negs	r3, r3
 8004e2a:	441a      	add	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d207      	bcs.n	8004e4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e44:	425b      	negs	r3, r3
 8004e46:	441a      	add	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d105      	bne.n	8004e5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e66:	697b      	ldr	r3, [r7, #20]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	441a      	add	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d303      	bcc.n	8004ea4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68d9      	ldr	r1, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	461a      	mov	r2, r3
 8004eae:	6838      	ldr	r0, [r7, #0]
 8004eb0:	f002 fa3b 	bl	800732a <memcpy>
	}
}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ec4:	f001 fc70 	bl	80067a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ece:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ed0:	e011      	b.n	8004ef6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d012      	beq.n	8004f00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3324      	adds	r3, #36	@ 0x24
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fd34 	bl	800594c <xTaskRemoveFromEventList>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004eea:	f000 fe0d 	bl	8005b08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	dce9      	bgt.n	8004ed2 <prvUnlockQueue+0x16>
 8004efe:	e000      	b.n	8004f02 <prvUnlockQueue+0x46>
					break;
 8004f00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	22ff      	movs	r2, #255	@ 0xff
 8004f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f0a:	f001 fc7f 	bl	800680c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f0e:	f001 fc4b 	bl	80067a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f1a:	e011      	b.n	8004f40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d012      	beq.n	8004f4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3310      	adds	r3, #16
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fd0f 	bl	800594c <xTaskRemoveFromEventList>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f34:	f000 fde8 	bl	8005b08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f38:	7bbb      	ldrb	r3, [r7, #14]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	dce9      	bgt.n	8004f1c <prvUnlockQueue+0x60>
 8004f48:	e000      	b.n	8004f4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	22ff      	movs	r2, #255	@ 0xff
 8004f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f54:	f001 fc5a 	bl	800680c <vPortExitCritical>
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f68:	f001 fc1e 	bl	80067a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f74:	2301      	movs	r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e001      	b.n	8004f7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f7e:	f001 fc45 	bl	800680c <vPortExitCritical>

	return xReturn;
 8004f82:	68fb      	ldr	r3, [r7, #12]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f94:	f001 fc08 	bl	80067a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d102      	bne.n	8004faa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e001      	b.n	8004fae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fae:	f001 fc2d 	bl	800680c <vPortExitCritical>

	return xReturn;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e014      	b.n	8004ff6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800500c <vQueueAddToRegistry+0x50>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fd8:	490c      	ldr	r1, [pc, #48]	@ (800500c <vQueueAddToRegistry+0x50>)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800500c <vQueueAddToRegistry+0x50>)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fee:	e006      	b.n	8004ffe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b07      	cmp	r3, #7
 8004ffa:	d9e7      	bls.n	8004fcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000c68 	.word	0x20000c68

08005010 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005020:	f001 fbc2 	bl	80067a8 <vPortEnterCritical>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800502a:	b25b      	sxtb	r3, r3
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d103      	bne.n	800503a <vQueueWaitForMessageRestricted+0x2a>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005040:	b25b      	sxtb	r3, r3
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d103      	bne.n	8005050 <vQueueWaitForMessageRestricted+0x40>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005050:	f001 fbdc 	bl	800680c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005058:	2b00      	cmp	r3, #0
 800505a:	d106      	bne.n	800506a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3324      	adds	r3, #36	@ 0x24
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fc45 	bl	80058f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f7ff ff26 	bl	8004ebc <prvUnlockQueue>
	}
 8005070:	bf00      	nop
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08e      	sub	sp, #56	@ 0x38
 800507c:	af04      	add	r7, sp, #16
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	623b      	str	r3, [r7, #32]
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	61fb      	str	r3, [r7, #28]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050c2:	235c      	movs	r3, #92	@ 0x5c
 80050c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80050ca:	d00b      	beq.n	80050e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	61bb      	str	r3, [r7, #24]
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	e7fd      	b.n	80050e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01e      	beq.n	800512a <xTaskCreateStatic+0xb2>
 80050ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01b      	beq.n	800512a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005104:	2300      	movs	r3, #0
 8005106:	9303      	str	r3, [sp, #12]
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	f107 0314 	add.w	r3, r7, #20
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f850 	bl	80051c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005122:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005124:	f000 f8de 	bl	80052e4 <prvAddNewTaskToReadyList>
 8005128:	e001      	b.n	800512e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800512e:	697b      	ldr	r3, [r7, #20]
	}
 8005130:	4618      	mov	r0, r3
 8005132:	3728      	adds	r7, #40	@ 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08c      	sub	sp, #48	@ 0x30
 800513c:	af04      	add	r7, sp, #16
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005148:	88fb      	ldrh	r3, [r7, #6]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4618      	mov	r0, r3
 800514e:	f001 fc4d 	bl	80069ec <pvPortMalloc>
 8005152:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00e      	beq.n	8005178 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800515a:	205c      	movs	r0, #92	@ 0x5c
 800515c:	f001 fc46 	bl	80069ec <pvPortMalloc>
 8005160:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	631a      	str	r2, [r3, #48]	@ 0x30
 800516e:	e005      	b.n	800517c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005170:	6978      	ldr	r0, [r7, #20]
 8005172:	f001 fd09 	bl	8006b88 <vPortFree>
 8005176:	e001      	b.n	800517c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d017      	beq.n	80051b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	2300      	movs	r3, #0
 800518e:	9303      	str	r3, [sp, #12]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	9302      	str	r3, [sp, #8]
 8005194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f80e 	bl	80051c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051a6:	69f8      	ldr	r0, [r7, #28]
 80051a8:	f000 f89c 	bl	80052e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051ac:	2301      	movs	r3, #1
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	e002      	b.n	80051b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295
 80051b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051b8:	69bb      	ldr	r3, [r7, #24]
	}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b088      	sub	sp, #32
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
 80051ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	461a      	mov	r2, r3
 80051da:	21a5      	movs	r1, #165	@ 0xa5
 80051dc:	f002 f82a 	bl	8007234 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051ea:	3b01      	subs	r3, #1
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f023 0307 	bic.w	r3, r3, #7
 80051f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00b      	beq.n	800521c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	617b      	str	r3, [r7, #20]
}
 8005216:	bf00      	nop
 8005218:	bf00      	nop
 800521a:	e7fd      	b.n	8005218 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01f      	beq.n	8005262 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	e012      	b.n	800524e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	7819      	ldrb	r1, [r3, #0]
 8005230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	3334      	adds	r3, #52	@ 0x34
 8005238:	460a      	mov	r2, r1
 800523a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d006      	beq.n	8005256 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	3301      	adds	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b0f      	cmp	r3, #15
 8005252:	d9e9      	bls.n	8005228 <prvInitialiseNewTask+0x66>
 8005254:	e000      	b.n	8005258 <prvInitialiseNewTask+0x96>
			{
				break;
 8005256:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005260:	e003      	b.n	800526a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800526a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526c:	2b37      	cmp	r3, #55	@ 0x37
 800526e:	d901      	bls.n	8005274 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005270:	2337      	movs	r3, #55	@ 0x37
 8005272:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005278:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800527e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	2200      	movs	r2, #0
 8005284:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	3304      	adds	r3, #4
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff f966 	bl	800455c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	3318      	adds	r3, #24
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff f961 	bl	800455c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b2:	2200      	movs	r2, #0
 80052b4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	68f9      	ldr	r1, [r7, #12]
 80052c2:	69b8      	ldr	r0, [r7, #24]
 80052c4:	f001 f93e 	bl	8006544 <pxPortInitialiseStack>
 80052c8:	4602      	mov	r2, r0
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052da:	bf00      	nop
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052ec:	f001 fa5c 	bl	80067a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052f0:	4b2d      	ldr	r3, [pc, #180]	@ (80053a8 <prvAddNewTaskToReadyList+0xc4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3301      	adds	r3, #1
 80052f6:	4a2c      	ldr	r2, [pc, #176]	@ (80053a8 <prvAddNewTaskToReadyList+0xc4>)
 80052f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052fa:	4b2c      	ldr	r3, [pc, #176]	@ (80053ac <prvAddNewTaskToReadyList+0xc8>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005302:	4a2a      	ldr	r2, [pc, #168]	@ (80053ac <prvAddNewTaskToReadyList+0xc8>)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005308:	4b27      	ldr	r3, [pc, #156]	@ (80053a8 <prvAddNewTaskToReadyList+0xc4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d110      	bne.n	8005332 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005310:	f000 fc1e 	bl	8005b50 <prvInitialiseTaskLists>
 8005314:	e00d      	b.n	8005332 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005316:	4b26      	ldr	r3, [pc, #152]	@ (80053b0 <prvAddNewTaskToReadyList+0xcc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800531e:	4b23      	ldr	r3, [pc, #140]	@ (80053ac <prvAddNewTaskToReadyList+0xc8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005328:	429a      	cmp	r2, r3
 800532a:	d802      	bhi.n	8005332 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800532c:	4a1f      	ldr	r2, [pc, #124]	@ (80053ac <prvAddNewTaskToReadyList+0xc8>)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005332:	4b20      	ldr	r3, [pc, #128]	@ (80053b4 <prvAddNewTaskToReadyList+0xd0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	4a1e      	ldr	r2, [pc, #120]	@ (80053b4 <prvAddNewTaskToReadyList+0xd0>)
 800533a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800533c:	4b1d      	ldr	r3, [pc, #116]	@ (80053b4 <prvAddNewTaskToReadyList+0xd0>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005348:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <prvAddNewTaskToReadyList+0xd4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d903      	bls.n	8005358 <prvAddNewTaskToReadyList+0x74>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005354:	4a18      	ldr	r2, [pc, #96]	@ (80053b8 <prvAddNewTaskToReadyList+0xd4>)
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4a15      	ldr	r2, [pc, #84]	@ (80053bc <prvAddNewTaskToReadyList+0xd8>)
 8005366:	441a      	add	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3304      	adds	r3, #4
 800536c:	4619      	mov	r1, r3
 800536e:	4610      	mov	r0, r2
 8005370:	f7ff f901 	bl	8004576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005374:	f001 fa4a 	bl	800680c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005378:	4b0d      	ldr	r3, [pc, #52]	@ (80053b0 <prvAddNewTaskToReadyList+0xcc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00e      	beq.n	800539e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005380:	4b0a      	ldr	r3, [pc, #40]	@ (80053ac <prvAddNewTaskToReadyList+0xc8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	429a      	cmp	r2, r3
 800538c:	d207      	bcs.n	800539e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800538e:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <prvAddNewTaskToReadyList+0xdc>)
 8005390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800539e:	bf00      	nop
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	2000117c 	.word	0x2000117c
 80053ac:	20000ca8 	.word	0x20000ca8
 80053b0:	20001188 	.word	0x20001188
 80053b4:	20001198 	.word	0x20001198
 80053b8:	20001184 	.word	0x20001184
 80053bc:	20000cac 	.word	0x20000cac
 80053c0:	e000ed04 	.word	0xe000ed04

080053c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d018      	beq.n	8005408 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053d6:	4b14      	ldr	r3, [pc, #80]	@ (8005428 <vTaskDelay+0x64>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <vTaskDelay+0x32>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	60bb      	str	r3, [r7, #8]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053f6:	f000 f883 	bl	8005500 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053fa:	2100      	movs	r1, #0
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fcf3 	bl	8005de8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005402:	f000 f88b 	bl	800551c <xTaskResumeAll>
 8005406:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d107      	bne.n	800541e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800540e:	4b07      	ldr	r3, [pc, #28]	@ (800542c <vTaskDelay+0x68>)
 8005410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	200011a4 	.word	0x200011a4
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	@ 0x28
 8005434:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800543a:	2300      	movs	r3, #0
 800543c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800543e:	463a      	mov	r2, r7
 8005440:	1d39      	adds	r1, r7, #4
 8005442:	f107 0308 	add.w	r3, r7, #8
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff f834 	bl	80044b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800544c:	6839      	ldr	r1, [r7, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	9202      	str	r2, [sp, #8]
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	2300      	movs	r3, #0
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	2300      	movs	r3, #0
 800545c:	460a      	mov	r2, r1
 800545e:	4922      	ldr	r1, [pc, #136]	@ (80054e8 <vTaskStartScheduler+0xb8>)
 8005460:	4822      	ldr	r0, [pc, #136]	@ (80054ec <vTaskStartScheduler+0xbc>)
 8005462:	f7ff fe09 	bl	8005078 <xTaskCreateStatic>
 8005466:	4603      	mov	r3, r0
 8005468:	4a21      	ldr	r2, [pc, #132]	@ (80054f0 <vTaskStartScheduler+0xc0>)
 800546a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800546c:	4b20      	ldr	r3, [pc, #128]	@ (80054f0 <vTaskStartScheduler+0xc0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e001      	b.n	800547e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d102      	bne.n	800548a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005484:	f000 fd04 	bl	8005e90 <xTimerCreateTimerTask>
 8005488:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d116      	bne.n	80054be <vTaskStartScheduler+0x8e>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	613b      	str	r3, [r7, #16]
}
 80054a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054a4:	4b13      	ldr	r3, [pc, #76]	@ (80054f4 <vTaskStartScheduler+0xc4>)
 80054a6:	f04f 32ff 	mov.w	r2, #4294967295
 80054aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054ac:	4b12      	ldr	r3, [pc, #72]	@ (80054f8 <vTaskStartScheduler+0xc8>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054b2:	4b12      	ldr	r3, [pc, #72]	@ (80054fc <vTaskStartScheduler+0xcc>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054b8:	f001 f8d2 	bl	8006660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054bc:	e00f      	b.n	80054de <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d10b      	bne.n	80054de <vTaskStartScheduler+0xae>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60fb      	str	r3, [r7, #12]
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	e7fd      	b.n	80054da <vTaskStartScheduler+0xaa>
}
 80054de:	bf00      	nop
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	08007f4c 	.word	0x08007f4c
 80054ec:	08005b21 	.word	0x08005b21
 80054f0:	200011a0 	.word	0x200011a0
 80054f4:	2000119c 	.word	0x2000119c
 80054f8:	20001188 	.word	0x20001188
 80054fc:	20001180 	.word	0x20001180

08005500 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005504:	4b04      	ldr	r3, [pc, #16]	@ (8005518 <vTaskSuspendAll+0x18>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	4a03      	ldr	r2, [pc, #12]	@ (8005518 <vTaskSuspendAll+0x18>)
 800550c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800550e:	bf00      	nop
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	200011a4 	.word	0x200011a4

0800551c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800552a:	4b42      	ldr	r3, [pc, #264]	@ (8005634 <xTaskResumeAll+0x118>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10b      	bne.n	800554a <xTaskResumeAll+0x2e>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	603b      	str	r3, [r7, #0]
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	e7fd      	b.n	8005546 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800554a:	f001 f92d 	bl	80067a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800554e:	4b39      	ldr	r3, [pc, #228]	@ (8005634 <xTaskResumeAll+0x118>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3b01      	subs	r3, #1
 8005554:	4a37      	ldr	r2, [pc, #220]	@ (8005634 <xTaskResumeAll+0x118>)
 8005556:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005558:	4b36      	ldr	r3, [pc, #216]	@ (8005634 <xTaskResumeAll+0x118>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d162      	bne.n	8005626 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005560:	4b35      	ldr	r3, [pc, #212]	@ (8005638 <xTaskResumeAll+0x11c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d05e      	beq.n	8005626 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005568:	e02f      	b.n	80055ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800556a:	4b34      	ldr	r3, [pc, #208]	@ (800563c <xTaskResumeAll+0x120>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3318      	adds	r3, #24
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff f85a 	bl	8004630 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3304      	adds	r3, #4
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff f855 	bl	8004630 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558a:	4b2d      	ldr	r3, [pc, #180]	@ (8005640 <xTaskResumeAll+0x124>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d903      	bls.n	800559a <xTaskResumeAll+0x7e>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005596:	4a2a      	ldr	r2, [pc, #168]	@ (8005640 <xTaskResumeAll+0x124>)
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4a27      	ldr	r2, [pc, #156]	@ (8005644 <xTaskResumeAll+0x128>)
 80055a8:	441a      	add	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f7fe ffe0 	bl	8004576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ba:	4b23      	ldr	r3, [pc, #140]	@ (8005648 <xTaskResumeAll+0x12c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d302      	bcc.n	80055ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80055c4:	4b21      	ldr	r3, [pc, #132]	@ (800564c <xTaskResumeAll+0x130>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055ca:	4b1c      	ldr	r3, [pc, #112]	@ (800563c <xTaskResumeAll+0x120>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1cb      	bne.n	800556a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055d8:	f000 fb58 	bl	8005c8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005650 <xTaskResumeAll+0x134>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d010      	beq.n	800560a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055e8:	f000 f846 	bl	8005678 <xTaskIncrementTick>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80055f2:	4b16      	ldr	r3, [pc, #88]	@ (800564c <xTaskResumeAll+0x130>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1f1      	bne.n	80055e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005604:	4b12      	ldr	r3, [pc, #72]	@ (8005650 <xTaskResumeAll+0x134>)
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800560a:	4b10      	ldr	r3, [pc, #64]	@ (800564c <xTaskResumeAll+0x130>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005612:	2301      	movs	r3, #1
 8005614:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005616:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <xTaskResumeAll+0x138>)
 8005618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005626:	f001 f8f1 	bl	800680c <vPortExitCritical>

	return xAlreadyYielded;
 800562a:	68bb      	ldr	r3, [r7, #8]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200011a4 	.word	0x200011a4
 8005638:	2000117c 	.word	0x2000117c
 800563c:	2000113c 	.word	0x2000113c
 8005640:	20001184 	.word	0x20001184
 8005644:	20000cac 	.word	0x20000cac
 8005648:	20000ca8 	.word	0x20000ca8
 800564c:	20001190 	.word	0x20001190
 8005650:	2000118c 	.word	0x2000118c
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800565e:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <xTaskGetTickCount+0x1c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005664:	687b      	ldr	r3, [r7, #4]
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20001180 	.word	0x20001180

08005678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005682:	4b4f      	ldr	r3, [pc, #316]	@ (80057c0 <xTaskIncrementTick+0x148>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f040 8090 	bne.w	80057ac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800568c:	4b4d      	ldr	r3, [pc, #308]	@ (80057c4 <xTaskIncrementTick+0x14c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005694:	4a4b      	ldr	r2, [pc, #300]	@ (80057c4 <xTaskIncrementTick+0x14c>)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d121      	bne.n	80056e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056a0:	4b49      	ldr	r3, [pc, #292]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00b      	beq.n	80056c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	603b      	str	r3, [r7, #0]
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	e7fd      	b.n	80056be <xTaskIncrementTick+0x46>
 80056c2:	4b41      	ldr	r3, [pc, #260]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	4b40      	ldr	r3, [pc, #256]	@ (80057cc <xTaskIncrementTick+0x154>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3e      	ldr	r2, [pc, #248]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4a3e      	ldr	r2, [pc, #248]	@ (80057cc <xTaskIncrementTick+0x154>)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	4b3e      	ldr	r3, [pc, #248]	@ (80057d0 <xTaskIncrementTick+0x158>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	4a3c      	ldr	r2, [pc, #240]	@ (80057d0 <xTaskIncrementTick+0x158>)
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	f000 fad4 	bl	8005c8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056e4:	4b3b      	ldr	r3, [pc, #236]	@ (80057d4 <xTaskIncrementTick+0x15c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d349      	bcc.n	8005782 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ee:	4b36      	ldr	r3, [pc, #216]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f8:	4b36      	ldr	r3, [pc, #216]	@ (80057d4 <xTaskIncrementTick+0x15c>)
 80056fa:	f04f 32ff 	mov.w	r2, #4294967295
 80056fe:	601a      	str	r2, [r3, #0]
					break;
 8005700:	e03f      	b.n	8005782 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005702:	4b31      	ldr	r3, [pc, #196]	@ (80057c8 <xTaskIncrementTick+0x150>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d203      	bcs.n	8005722 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800571a:	4a2e      	ldr	r2, [pc, #184]	@ (80057d4 <xTaskIncrementTick+0x15c>)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005720:	e02f      	b.n	8005782 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	3304      	adds	r3, #4
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe ff82 	bl	8004630 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	3318      	adds	r3, #24
 8005738:	4618      	mov	r0, r3
 800573a:	f7fe ff79 	bl	8004630 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005742:	4b25      	ldr	r3, [pc, #148]	@ (80057d8 <xTaskIncrementTick+0x160>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d903      	bls.n	8005752 <xTaskIncrementTick+0xda>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	4a22      	ldr	r2, [pc, #136]	@ (80057d8 <xTaskIncrementTick+0x160>)
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4a1f      	ldr	r2, [pc, #124]	@ (80057dc <xTaskIncrementTick+0x164>)
 8005760:	441a      	add	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	3304      	adds	r3, #4
 8005766:	4619      	mov	r1, r3
 8005768:	4610      	mov	r0, r2
 800576a:	f7fe ff04 	bl	8004576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005772:	4b1b      	ldr	r3, [pc, #108]	@ (80057e0 <xTaskIncrementTick+0x168>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	429a      	cmp	r2, r3
 800577a:	d3b8      	bcc.n	80056ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800577c:	2301      	movs	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005780:	e7b5      	b.n	80056ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005782:	4b17      	ldr	r3, [pc, #92]	@ (80057e0 <xTaskIncrementTick+0x168>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005788:	4914      	ldr	r1, [pc, #80]	@ (80057dc <xTaskIncrementTick+0x164>)
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	440b      	add	r3, r1
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d901      	bls.n	800579e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800579a:	2301      	movs	r3, #1
 800579c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800579e:	4b11      	ldr	r3, [pc, #68]	@ (80057e4 <xTaskIncrementTick+0x16c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	e004      	b.n	80057b6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057ac:	4b0e      	ldr	r3, [pc, #56]	@ (80057e8 <xTaskIncrementTick+0x170>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3301      	adds	r3, #1
 80057b2:	4a0d      	ldr	r2, [pc, #52]	@ (80057e8 <xTaskIncrementTick+0x170>)
 80057b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057b6:	697b      	ldr	r3, [r7, #20]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	200011a4 	.word	0x200011a4
 80057c4:	20001180 	.word	0x20001180
 80057c8:	20001134 	.word	0x20001134
 80057cc:	20001138 	.word	0x20001138
 80057d0:	20001194 	.word	0x20001194
 80057d4:	2000119c 	.word	0x2000119c
 80057d8:	20001184 	.word	0x20001184
 80057dc:	20000cac 	.word	0x20000cac
 80057e0:	20000ca8 	.word	0x20000ca8
 80057e4:	20001190 	.word	0x20001190
 80057e8:	2000118c 	.word	0x2000118c

080057ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057f2:	4b28      	ldr	r3, [pc, #160]	@ (8005894 <vTaskSwitchContext+0xa8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057fa:	4b27      	ldr	r3, [pc, #156]	@ (8005898 <vTaskSwitchContext+0xac>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005800:	e042      	b.n	8005888 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005802:	4b25      	ldr	r3, [pc, #148]	@ (8005898 <vTaskSwitchContext+0xac>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005808:	4b24      	ldr	r3, [pc, #144]	@ (800589c <vTaskSwitchContext+0xb0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	e011      	b.n	8005834 <vTaskSwitchContext+0x48>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10b      	bne.n	800582e <vTaskSwitchContext+0x42>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	607b      	str	r3, [r7, #4]
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	e7fd      	b.n	800582a <vTaskSwitchContext+0x3e>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3b01      	subs	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	491a      	ldr	r1, [pc, #104]	@ (80058a0 <vTaskSwitchContext+0xb4>)
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0e3      	beq.n	8005810 <vTaskSwitchContext+0x24>
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4a13      	ldr	r2, [pc, #76]	@ (80058a0 <vTaskSwitchContext+0xb4>)
 8005854:	4413      	add	r3, r2
 8005856:	60bb      	str	r3, [r7, #8]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	605a      	str	r2, [r3, #4]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	3308      	adds	r3, #8
 800586a:	429a      	cmp	r2, r3
 800586c:	d104      	bne.n	8005878 <vTaskSwitchContext+0x8c>
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	605a      	str	r2, [r3, #4]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	4a09      	ldr	r2, [pc, #36]	@ (80058a4 <vTaskSwitchContext+0xb8>)
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	4a06      	ldr	r2, [pc, #24]	@ (800589c <vTaskSwitchContext+0xb0>)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6013      	str	r3, [r2, #0]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	200011a4 	.word	0x200011a4
 8005898:	20001190 	.word	0x20001190
 800589c:	20001184 	.word	0x20001184
 80058a0:	20000cac 	.word	0x20000cac
 80058a4:	20000ca8 	.word	0x20000ca8

080058a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10b      	bne.n	80058d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	60fb      	str	r3, [r7, #12]
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	e7fd      	b.n	80058cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058d0:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <vTaskPlaceOnEventList+0x48>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3318      	adds	r3, #24
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fe fe70 	bl	80045be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058de:	2101      	movs	r1, #1
 80058e0:	6838      	ldr	r0, [r7, #0]
 80058e2:	f000 fa81 	bl	8005de8 <prvAddCurrentTaskToDelayedList>
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000ca8 	.word	0x20000ca8

080058f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	617b      	str	r3, [r7, #20]
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800591e:	4b0a      	ldr	r3, [pc, #40]	@ (8005948 <vTaskPlaceOnEventListRestricted+0x54>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3318      	adds	r3, #24
 8005924:	4619      	mov	r1, r3
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7fe fe25 	bl	8004576 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005932:	f04f 33ff 	mov.w	r3, #4294967295
 8005936:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	68b8      	ldr	r0, [r7, #8]
 800593c:	f000 fa54 	bl	8005de8 <prvAddCurrentTaskToDelayedList>
	}
 8005940:	bf00      	nop
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000ca8 	.word	0x20000ca8

0800594c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10b      	bne.n	800597a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	60fb      	str	r3, [r7, #12]
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	e7fd      	b.n	8005976 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3318      	adds	r3, #24
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fe56 	bl	8004630 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005984:	4b1d      	ldr	r3, [pc, #116]	@ (80059fc <xTaskRemoveFromEventList+0xb0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d11d      	bne.n	80059c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	3304      	adds	r3, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe fe4d 	bl	8004630 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599a:	4b19      	ldr	r3, [pc, #100]	@ (8005a00 <xTaskRemoveFromEventList+0xb4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d903      	bls.n	80059aa <xTaskRemoveFromEventList+0x5e>
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	4a16      	ldr	r2, [pc, #88]	@ (8005a00 <xTaskRemoveFromEventList+0xb4>)
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4a13      	ldr	r2, [pc, #76]	@ (8005a04 <xTaskRemoveFromEventList+0xb8>)
 80059b8:	441a      	add	r2, r3
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	3304      	adds	r3, #4
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f7fe fdd8 	bl	8004576 <vListInsertEnd>
 80059c6:	e005      	b.n	80059d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	3318      	adds	r3, #24
 80059cc:	4619      	mov	r1, r3
 80059ce:	480e      	ldr	r0, [pc, #56]	@ (8005a08 <xTaskRemoveFromEventList+0xbc>)
 80059d0:	f7fe fdd1 	bl	8004576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a0c <xTaskRemoveFromEventList+0xc0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	429a      	cmp	r2, r3
 80059e0:	d905      	bls.n	80059ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a10 <xTaskRemoveFromEventList+0xc4>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	e001      	b.n	80059f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059f2:	697b      	ldr	r3, [r7, #20]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	200011a4 	.word	0x200011a4
 8005a00:	20001184 	.word	0x20001184
 8005a04:	20000cac 	.word	0x20000cac
 8005a08:	2000113c 	.word	0x2000113c
 8005a0c:	20000ca8 	.word	0x20000ca8
 8005a10:	20001190 	.word	0x20001190

08005a14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a1c:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <vTaskInternalSetTimeOutState+0x24>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a24:	4b05      	ldr	r3, [pc, #20]	@ (8005a3c <vTaskInternalSetTimeOutState+0x28>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	605a      	str	r2, [r3, #4]
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	20001194 	.word	0x20001194
 8005a3c:	20001180 	.word	0x20001180

08005a40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10b      	bne.n	8005a68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	613b      	str	r3, [r7, #16]
}
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	e7fd      	b.n	8005a64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	60fb      	str	r3, [r7, #12]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a86:	f000 fe8f 	bl	80067a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8005b00 <xTaskCheckForTimeOut+0xc0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d102      	bne.n	8005aaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	61fb      	str	r3, [r7, #28]
 8005aa8:	e023      	b.n	8005af2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4b15      	ldr	r3, [pc, #84]	@ (8005b04 <xTaskCheckForTimeOut+0xc4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d007      	beq.n	8005ac6 <xTaskCheckForTimeOut+0x86>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d302      	bcc.n	8005ac6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	e015      	b.n	8005af2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d20b      	bcs.n	8005ae8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff ff99 	bl	8005a14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
 8005ae6:	e004      	b.n	8005af2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005aee:	2301      	movs	r3, #1
 8005af0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005af2:	f000 fe8b 	bl	800680c <vPortExitCritical>

	return xReturn;
 8005af6:	69fb      	ldr	r3, [r7, #28]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3720      	adds	r7, #32
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20001180 	.word	0x20001180
 8005b04:	20001194 	.word	0x20001194

08005b08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b0c:	4b03      	ldr	r3, [pc, #12]	@ (8005b1c <vTaskMissedYield+0x14>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
}
 8005b12:	bf00      	nop
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	20001190 	.word	0x20001190

08005b20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b28:	f000 f852 	bl	8005bd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b2c:	4b06      	ldr	r3, [pc, #24]	@ (8005b48 <prvIdleTask+0x28>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d9f9      	bls.n	8005b28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b34:	4b05      	ldr	r3, [pc, #20]	@ (8005b4c <prvIdleTask+0x2c>)
 8005b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b44:	e7f0      	b.n	8005b28 <prvIdleTask+0x8>
 8005b46:	bf00      	nop
 8005b48:	20000cac 	.word	0x20000cac
 8005b4c:	e000ed04 	.word	0xe000ed04

08005b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b56:	2300      	movs	r3, #0
 8005b58:	607b      	str	r3, [r7, #4]
 8005b5a:	e00c      	b.n	8005b76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4a12      	ldr	r2, [pc, #72]	@ (8005bb0 <prvInitialiseTaskLists+0x60>)
 8005b68:	4413      	add	r3, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fcd6 	bl	800451c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3301      	adds	r3, #1
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b37      	cmp	r3, #55	@ 0x37
 8005b7a:	d9ef      	bls.n	8005b5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b7c:	480d      	ldr	r0, [pc, #52]	@ (8005bb4 <prvInitialiseTaskLists+0x64>)
 8005b7e:	f7fe fccd 	bl	800451c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b82:	480d      	ldr	r0, [pc, #52]	@ (8005bb8 <prvInitialiseTaskLists+0x68>)
 8005b84:	f7fe fcca 	bl	800451c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b88:	480c      	ldr	r0, [pc, #48]	@ (8005bbc <prvInitialiseTaskLists+0x6c>)
 8005b8a:	f7fe fcc7 	bl	800451c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b8e:	480c      	ldr	r0, [pc, #48]	@ (8005bc0 <prvInitialiseTaskLists+0x70>)
 8005b90:	f7fe fcc4 	bl	800451c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b94:	480b      	ldr	r0, [pc, #44]	@ (8005bc4 <prvInitialiseTaskLists+0x74>)
 8005b96:	f7fe fcc1 	bl	800451c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc8 <prvInitialiseTaskLists+0x78>)
 8005b9c:	4a05      	ldr	r2, [pc, #20]	@ (8005bb4 <prvInitialiseTaskLists+0x64>)
 8005b9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <prvInitialiseTaskLists+0x7c>)
 8005ba2:	4a05      	ldr	r2, [pc, #20]	@ (8005bb8 <prvInitialiseTaskLists+0x68>)
 8005ba4:	601a      	str	r2, [r3, #0]
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000cac 	.word	0x20000cac
 8005bb4:	2000110c 	.word	0x2000110c
 8005bb8:	20001120 	.word	0x20001120
 8005bbc:	2000113c 	.word	0x2000113c
 8005bc0:	20001150 	.word	0x20001150
 8005bc4:	20001168 	.word	0x20001168
 8005bc8:	20001134 	.word	0x20001134
 8005bcc:	20001138 	.word	0x20001138

08005bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bd6:	e019      	b.n	8005c0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bd8:	f000 fde6 	bl	80067a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bdc:	4b10      	ldr	r3, [pc, #64]	@ (8005c20 <prvCheckTasksWaitingTermination+0x50>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe fd21 	bl	8004630 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bee:	4b0d      	ldr	r3, [pc, #52]	@ (8005c24 <prvCheckTasksWaitingTermination+0x54>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8005c24 <prvCheckTasksWaitingTermination+0x54>)
 8005bf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <prvCheckTasksWaitingTermination+0x58>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8005c28 <prvCheckTasksWaitingTermination+0x58>)
 8005c00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c02:	f000 fe03 	bl	800680c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f810 	bl	8005c2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c0c:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <prvCheckTasksWaitingTermination+0x58>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e1      	bne.n	8005bd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20001150 	.word	0x20001150
 8005c24:	2000117c 	.word	0x2000117c
 8005c28:	20001164 	.word	0x20001164

08005c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d108      	bne.n	8005c50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 ffa0 	bl	8006b88 <vPortFree>
				vPortFree( pxTCB );
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 ff9d 	bl	8006b88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c4e:	e019      	b.n	8005c84 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d103      	bne.n	8005c62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 ff94 	bl	8006b88 <vPortFree>
	}
 8005c60:	e010      	b.n	8005c84 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d00b      	beq.n	8005c84 <prvDeleteTCB+0x58>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60fb      	str	r3, [r7, #12]
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <prvDeleteTCB+0x54>
	}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c92:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc4 <prvResetNextTaskUnblockTime+0x38>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8005c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ca4:	e008      	b.n	8005cb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca6:	4b07      	ldr	r3, [pc, #28]	@ (8005cc4 <prvResetNextTaskUnblockTime+0x38>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4a04      	ldr	r2, [pc, #16]	@ (8005cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8005cb6:	6013      	str	r3, [r2, #0]
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	20001134 	.word	0x20001134
 8005cc8:	2000119c 	.word	0x2000119c

08005ccc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <xTaskGetSchedulerState+0x34>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d102      	bne.n	8005ce0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	607b      	str	r3, [r7, #4]
 8005cde:	e008      	b.n	8005cf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ce0:	4b08      	ldr	r3, [pc, #32]	@ (8005d04 <xTaskGetSchedulerState+0x38>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d102      	bne.n	8005cee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ce8:	2302      	movs	r3, #2
 8005cea:	607b      	str	r3, [r7, #4]
 8005cec:	e001      	b.n	8005cf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cf2:	687b      	ldr	r3, [r7, #4]
	}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	20001188 	.word	0x20001188
 8005d04:	200011a4 	.word	0x200011a4

08005d08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d14:	2300      	movs	r3, #0
 8005d16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d058      	beq.n	8005dd0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8005ddc <xTaskPriorityDisinherit+0xd4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d00b      	beq.n	8005d40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	60fb      	str	r3, [r7, #12]
}
 8005d3a:	bf00      	nop
 8005d3c:	bf00      	nop
 8005d3e:	e7fd      	b.n	8005d3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	60bb      	str	r3, [r7, #8]
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d64:	1e5a      	subs	r2, r3, #1
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d02c      	beq.n	8005dd0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d128      	bne.n	8005dd0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fc54 	bl	8004630 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da0:	4b0f      	ldr	r3, [pc, #60]	@ (8005de0 <xTaskPriorityDisinherit+0xd8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d903      	bls.n	8005db0 <xTaskPriorityDisinherit+0xa8>
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dac:	4a0c      	ldr	r2, [pc, #48]	@ (8005de0 <xTaskPriorityDisinherit+0xd8>)
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4a09      	ldr	r2, [pc, #36]	@ (8005de4 <xTaskPriorityDisinherit+0xdc>)
 8005dbe:	441a      	add	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f7fe fbd5 	bl	8004576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dd0:	697b      	ldr	r3, [r7, #20]
	}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000ca8 	.word	0x20000ca8
 8005de0:	20001184 	.word	0x20001184
 8005de4:	20000cac 	.word	0x20000cac

08005de8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005df2:	4b21      	ldr	r3, [pc, #132]	@ (8005e78 <prvAddCurrentTaskToDelayedList+0x90>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005df8:	4b20      	ldr	r3, [pc, #128]	@ (8005e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fc16 	bl	8004630 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	d10a      	bne.n	8005e22 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e12:	4b1a      	ldr	r3, [pc, #104]	@ (8005e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4819      	ldr	r0, [pc, #100]	@ (8005e80 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e1c:	f7fe fbab 	bl	8004576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e20:	e026      	b.n	8005e70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4413      	add	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e2a:	4b14      	ldr	r3, [pc, #80]	@ (8005e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d209      	bcs.n	8005e4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e3a:	4b12      	ldr	r3, [pc, #72]	@ (8005e84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f7fe fbb9 	bl	80045be <vListInsert>
}
 8005e4c:	e010      	b.n	8005e70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b0a      	ldr	r3, [pc, #40]	@ (8005e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f7fe fbaf 	bl	80045be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e60:	4b0a      	ldr	r3, [pc, #40]	@ (8005e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d202      	bcs.n	8005e70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e6a:	4a08      	ldr	r2, [pc, #32]	@ (8005e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6013      	str	r3, [r2, #0]
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20001180 	.word	0x20001180
 8005e7c:	20000ca8 	.word	0x20000ca8
 8005e80:	20001168 	.word	0x20001168
 8005e84:	20001138 	.word	0x20001138
 8005e88:	20001134 	.word	0x20001134
 8005e8c:	2000119c 	.word	0x2000119c

08005e90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	@ 0x28
 8005e94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e9a:	f000 fb13 	bl	80064c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005f14 <xTimerCreateTimerTask+0x84>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d021      	beq.n	8005eea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005eae:	1d3a      	adds	r2, r7, #4
 8005eb0:	f107 0108 	add.w	r1, r7, #8
 8005eb4:	f107 030c 	add.w	r3, r7, #12
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe fb15 	bl	80044e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	9202      	str	r2, [sp, #8]
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	2302      	movs	r3, #2
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	2300      	movs	r3, #0
 8005ece:	460a      	mov	r2, r1
 8005ed0:	4911      	ldr	r1, [pc, #68]	@ (8005f18 <xTimerCreateTimerTask+0x88>)
 8005ed2:	4812      	ldr	r0, [pc, #72]	@ (8005f1c <xTimerCreateTimerTask+0x8c>)
 8005ed4:	f7ff f8d0 	bl	8005078 <xTaskCreateStatic>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	4a11      	ldr	r2, [pc, #68]	@ (8005f20 <xTimerCreateTimerTask+0x90>)
 8005edc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ede:	4b10      	ldr	r3, [pc, #64]	@ (8005f20 <xTimerCreateTimerTask+0x90>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10b      	bne.n	8005f08 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	613b      	str	r3, [r7, #16]
}
 8005f02:	bf00      	nop
 8005f04:	bf00      	nop
 8005f06:	e7fd      	b.n	8005f04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f08:	697b      	ldr	r3, [r7, #20]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	200011d8 	.word	0x200011d8
 8005f18:	08007f54 	.word	0x08007f54
 8005f1c:	0800605d 	.word	0x0800605d
 8005f20:	200011dc 	.word	0x200011dc

08005f24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	@ 0x28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <xTimerGenericCommand+0x30>
	__asm volatile
 8005f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	623b      	str	r3, [r7, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	bf00      	nop
 8005f52:	e7fd      	b.n	8005f50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f54:	4b19      	ldr	r3, [pc, #100]	@ (8005fbc <xTimerGenericCommand+0x98>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d02a      	beq.n	8005fb2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b05      	cmp	r3, #5
 8005f6c:	dc18      	bgt.n	8005fa0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f6e:	f7ff fead 	bl	8005ccc <xTaskGetSchedulerState>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d109      	bne.n	8005f8c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f78:	4b10      	ldr	r3, [pc, #64]	@ (8005fbc <xTimerGenericCommand+0x98>)
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	f107 0110 	add.w	r1, r7, #16
 8005f80:	2300      	movs	r3, #0
 8005f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f84:	f7fe fc88 	bl	8004898 <xQueueGenericSend>
 8005f88:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f8a:	e012      	b.n	8005fb2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fbc <xTimerGenericCommand+0x98>)
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	f107 0110 	add.w	r1, r7, #16
 8005f94:	2300      	movs	r3, #0
 8005f96:	2200      	movs	r2, #0
 8005f98:	f7fe fc7e 	bl	8004898 <xQueueGenericSend>
 8005f9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f9e:	e008      	b.n	8005fb2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fa0:	4b06      	ldr	r3, [pc, #24]	@ (8005fbc <xTimerGenericCommand+0x98>)
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	f107 0110 	add.w	r1, r7, #16
 8005fa8:	2300      	movs	r3, #0
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	f7fe fd76 	bl	8004a9c <xQueueGenericSendFromISR>
 8005fb0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3728      	adds	r7, #40	@ 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	200011d8 	.word	0x200011d8

08005fc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fca:	4b23      	ldr	r3, [pc, #140]	@ (8006058 <prvProcessExpiredTimer+0x98>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fe fb29 	bl	8004630 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d023      	beq.n	8006034 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	18d1      	adds	r1, r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	6978      	ldr	r0, [r7, #20]
 8005ffa:	f000 f8d5 	bl	80061a8 <prvInsertTimerInActiveList>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d020      	beq.n	8006046 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006004:	2300      	movs	r3, #0
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	2300      	movs	r3, #0
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	2100      	movs	r1, #0
 800600e:	6978      	ldr	r0, [r7, #20]
 8006010:	f7ff ff88 	bl	8005f24 <xTimerGenericCommand>
 8006014:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d114      	bne.n	8006046 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	60fb      	str	r3, [r7, #12]
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	6978      	ldr	r0, [r7, #20]
 800604c:	4798      	blx	r3
}
 800604e:	bf00      	nop
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	200011d0 	.word	0x200011d0

0800605c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006064:	f107 0308 	add.w	r3, r7, #8
 8006068:	4618      	mov	r0, r3
 800606a:	f000 f859 	bl	8006120 <prvGetNextExpireTime>
 800606e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4619      	mov	r1, r3
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f805 	bl	8006084 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800607a:	f000 f8d7 	bl	800622c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800607e:	bf00      	nop
 8006080:	e7f0      	b.n	8006064 <prvTimerTask+0x8>
	...

08006084 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800608e:	f7ff fa37 	bl	8005500 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006092:	f107 0308 	add.w	r3, r7, #8
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f866 	bl	8006168 <prvSampleTimeNow>
 800609c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d130      	bne.n	8006106 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <prvProcessTimerOrBlockTask+0x3c>
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d806      	bhi.n	80060c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060b2:	f7ff fa33 	bl	800551c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff ff81 	bl	8005fc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060be:	e024      	b.n	800610a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060c6:	4b13      	ldr	r3, [pc, #76]	@ (8006114 <prvProcessTimerOrBlockTask+0x90>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <prvProcessTimerOrBlockTask+0x50>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <prvProcessTimerOrBlockTask+0x52>
 80060d4:	2300      	movs	r3, #0
 80060d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006118 <prvProcessTimerOrBlockTask+0x94>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	4619      	mov	r1, r3
 80060e6:	f7fe ff93 	bl	8005010 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060ea:	f7ff fa17 	bl	800551c <xTaskResumeAll>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060f4:	4b09      	ldr	r3, [pc, #36]	@ (800611c <prvProcessTimerOrBlockTask+0x98>)
 80060f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	f3bf 8f6f 	isb	sy
}
 8006104:	e001      	b.n	800610a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006106:	f7ff fa09 	bl	800551c <xTaskResumeAll>
}
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	200011d4 	.word	0x200011d4
 8006118:	200011d8 	.word	0x200011d8
 800611c:	e000ed04 	.word	0xe000ed04

08006120 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006128:	4b0e      	ldr	r3, [pc, #56]	@ (8006164 <prvGetNextExpireTime+0x44>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <prvGetNextExpireTime+0x16>
 8006132:	2201      	movs	r2, #1
 8006134:	e000      	b.n	8006138 <prvGetNextExpireTime+0x18>
 8006136:	2200      	movs	r2, #0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006144:	4b07      	ldr	r3, [pc, #28]	@ (8006164 <prvGetNextExpireTime+0x44>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	e001      	b.n	8006154 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006154:	68fb      	ldr	r3, [r7, #12]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	200011d0 	.word	0x200011d0

08006168 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006170:	f7ff fa72 	bl	8005658 <xTaskGetTickCount>
 8006174:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006176:	4b0b      	ldr	r3, [pc, #44]	@ (80061a4 <prvSampleTimeNow+0x3c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	429a      	cmp	r2, r3
 800617e:	d205      	bcs.n	800618c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006180:	f000 f93a 	bl	80063f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e002      	b.n	8006192 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006192:	4a04      	ldr	r2, [pc, #16]	@ (80061a4 <prvSampleTimeNow+0x3c>)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006198:	68fb      	ldr	r3, [r7, #12]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	200011e0 	.word	0x200011e0

080061a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d812      	bhi.n	80061f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	1ad2      	subs	r2, r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d302      	bcc.n	80061e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	e01b      	b.n	800621a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061e2:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <prvInsertTimerInActiveList+0x7c>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3304      	adds	r3, #4
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f7fe f9e6 	bl	80045be <vListInsert>
 80061f2:	e012      	b.n	800621a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d206      	bcs.n	800620a <prvInsertTimerInActiveList+0x62>
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d302      	bcc.n	800620a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	e007      	b.n	800621a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800620a:	4b07      	ldr	r3, [pc, #28]	@ (8006228 <prvInsertTimerInActiveList+0x80>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3304      	adds	r3, #4
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f7fe f9d2 	bl	80045be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800621a:	697b      	ldr	r3, [r7, #20]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	200011d4 	.word	0x200011d4
 8006228:	200011d0 	.word	0x200011d0

0800622c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08e      	sub	sp, #56	@ 0x38
 8006230:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006232:	e0ce      	b.n	80063d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	da19      	bge.n	800626e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800623a:	1d3b      	adds	r3, r7, #4
 800623c:	3304      	adds	r3, #4
 800623e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	61fb      	str	r3, [r7, #28]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800625e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006264:	6850      	ldr	r0, [r2, #4]
 8006266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006268:	6892      	ldr	r2, [r2, #8]
 800626a:	4611      	mov	r1, r2
 800626c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f2c0 80ae 	blt.w	80063d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800627a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d004      	beq.n	800628c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006284:	3304      	adds	r3, #4
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe f9d2 	bl	8004630 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800628c:	463b      	mov	r3, r7
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff ff6a 	bl	8006168 <prvSampleTimeNow>
 8006294:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b09      	cmp	r3, #9
 800629a:	f200 8097 	bhi.w	80063cc <prvProcessReceivedCommands+0x1a0>
 800629e:	a201      	add	r2, pc, #4	@ (adr r2, 80062a4 <prvProcessReceivedCommands+0x78>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062cd 	.word	0x080062cd
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	080062cd 	.word	0x080062cd
 80062b0:	08006343 	.word	0x08006343
 80062b4:	08006357 	.word	0x08006357
 80062b8:	080063a3 	.word	0x080063a3
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	080062cd 	.word	0x080062cd
 80062c4:	08006343 	.word	0x08006343
 80062c8:	08006357 	.word	0x08006357
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	18d1      	adds	r1, r2, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ec:	f7ff ff5c 	bl	80061a8 <prvInsertTimerInActiveList>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d06c      	beq.n	80063d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d061      	beq.n	80063d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	441a      	add	r2, r3
 8006314:	2300      	movs	r3, #0
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	2300      	movs	r3, #0
 800631a:	2100      	movs	r1, #0
 800631c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800631e:	f7ff fe01 	bl	8005f24 <xTimerGenericCommand>
 8006322:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d152      	bne.n	80063d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	61bb      	str	r3, [r7, #24]
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006348:	f023 0301 	bic.w	r3, r3, #1
 800634c:	b2da      	uxtb	r2, r3
 800634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006350:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006354:	e03d      	b.n	80063d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800635c:	f043 0301 	orr.w	r3, r3, #1
 8006360:	b2da      	uxtb	r2, r3
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800636e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10b      	bne.n	800638e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	617b      	str	r3, [r7, #20]
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	e7fd      	b.n	800638a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	18d1      	adds	r1, r2, r3
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800639a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800639c:	f7ff ff04 	bl	80061a8 <prvInsertTimerInActiveList>
					break;
 80063a0:	e017      	b.n	80063d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d103      	bne.n	80063b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80063b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063b2:	f000 fbe9 	bl	8006b88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063b6:	e00c      	b.n	80063d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063ca:	e002      	b.n	80063d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80063cc:	bf00      	nop
 80063ce:	e000      	b.n	80063d2 <prvProcessReceivedCommands+0x1a6>
					break;
 80063d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063d2:	4b08      	ldr	r3, [pc, #32]	@ (80063f4 <prvProcessReceivedCommands+0x1c8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	1d39      	adds	r1, r7, #4
 80063d8:	2200      	movs	r2, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fbfc 	bl	8004bd8 <xQueueReceive>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f47f af26 	bne.w	8006234 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	3730      	adds	r7, #48	@ 0x30
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	200011d8 	.word	0x200011d8

080063f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063fe:	e049      	b.n	8006494 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006400:	4b2e      	ldr	r3, [pc, #184]	@ (80064bc <prvSwitchTimerLists+0xc4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800640a:	4b2c      	ldr	r3, [pc, #176]	@ (80064bc <prvSwitchTimerLists+0xc4>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3304      	adds	r3, #4
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe f909 	bl	8004630 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d02f      	beq.n	8006494 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	429a      	cmp	r2, r3
 8006444:	d90e      	bls.n	8006464 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006452:	4b1a      	ldr	r3, [pc, #104]	@ (80064bc <prvSwitchTimerLists+0xc4>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3304      	adds	r3, #4
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f7fe f8ae 	bl	80045be <vListInsert>
 8006462:	e017      	b.n	8006494 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006464:	2300      	movs	r3, #0
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	2300      	movs	r3, #0
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	2100      	movs	r1, #0
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff fd58 	bl	8005f24 <xTimerGenericCommand>
 8006474:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	603b      	str	r3, [r7, #0]
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006494:	4b09      	ldr	r3, [pc, #36]	@ (80064bc <prvSwitchTimerLists+0xc4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1b0      	bne.n	8006400 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800649e:	4b07      	ldr	r3, [pc, #28]	@ (80064bc <prvSwitchTimerLists+0xc4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064a4:	4b06      	ldr	r3, [pc, #24]	@ (80064c0 <prvSwitchTimerLists+0xc8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a04      	ldr	r2, [pc, #16]	@ (80064bc <prvSwitchTimerLists+0xc4>)
 80064aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064ac:	4a04      	ldr	r2, [pc, #16]	@ (80064c0 <prvSwitchTimerLists+0xc8>)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	6013      	str	r3, [r2, #0]
}
 80064b2:	bf00      	nop
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	200011d0 	.word	0x200011d0
 80064c0:	200011d4 	.word	0x200011d4

080064c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064ca:	f000 f96d 	bl	80067a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064ce:	4b15      	ldr	r3, [pc, #84]	@ (8006524 <prvCheckForValidListAndQueue+0x60>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d120      	bne.n	8006518 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064d6:	4814      	ldr	r0, [pc, #80]	@ (8006528 <prvCheckForValidListAndQueue+0x64>)
 80064d8:	f7fe f820 	bl	800451c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064dc:	4813      	ldr	r0, [pc, #76]	@ (800652c <prvCheckForValidListAndQueue+0x68>)
 80064de:	f7fe f81d 	bl	800451c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064e2:	4b13      	ldr	r3, [pc, #76]	@ (8006530 <prvCheckForValidListAndQueue+0x6c>)
 80064e4:	4a10      	ldr	r2, [pc, #64]	@ (8006528 <prvCheckForValidListAndQueue+0x64>)
 80064e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064e8:	4b12      	ldr	r3, [pc, #72]	@ (8006534 <prvCheckForValidListAndQueue+0x70>)
 80064ea:	4a10      	ldr	r2, [pc, #64]	@ (800652c <prvCheckForValidListAndQueue+0x68>)
 80064ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064ee:	2300      	movs	r3, #0
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	4b11      	ldr	r3, [pc, #68]	@ (8006538 <prvCheckForValidListAndQueue+0x74>)
 80064f4:	4a11      	ldr	r2, [pc, #68]	@ (800653c <prvCheckForValidListAndQueue+0x78>)
 80064f6:	2110      	movs	r1, #16
 80064f8:	200a      	movs	r0, #10
 80064fa:	f7fe f92d 	bl	8004758 <xQueueGenericCreateStatic>
 80064fe:	4603      	mov	r3, r0
 8006500:	4a08      	ldr	r2, [pc, #32]	@ (8006524 <prvCheckForValidListAndQueue+0x60>)
 8006502:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006504:	4b07      	ldr	r3, [pc, #28]	@ (8006524 <prvCheckForValidListAndQueue+0x60>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800650c:	4b05      	ldr	r3, [pc, #20]	@ (8006524 <prvCheckForValidListAndQueue+0x60>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	490b      	ldr	r1, [pc, #44]	@ (8006540 <prvCheckForValidListAndQueue+0x7c>)
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fd52 	bl	8004fbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006518:	f000 f978 	bl	800680c <vPortExitCritical>
}
 800651c:	bf00      	nop
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	200011d8 	.word	0x200011d8
 8006528:	200011a8 	.word	0x200011a8
 800652c:	200011bc 	.word	0x200011bc
 8006530:	200011d0 	.word	0x200011d0
 8006534:	200011d4 	.word	0x200011d4
 8006538:	20001284 	.word	0x20001284
 800653c:	200011e4 	.word	0x200011e4
 8006540:	08007f5c 	.word	0x08007f5c

08006544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3b04      	subs	r3, #4
 8006554:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800655c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3b04      	subs	r3, #4
 8006562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f023 0201 	bic.w	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3b04      	subs	r3, #4
 8006572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006574:	4a0c      	ldr	r2, [pc, #48]	@ (80065a8 <pxPortInitialiseStack+0x64>)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3b14      	subs	r3, #20
 800657e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3b04      	subs	r3, #4
 800658a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f06f 0202 	mvn.w	r2, #2
 8006592:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3b20      	subs	r3, #32
 8006598:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800659a:	68fb      	ldr	r3, [r7, #12]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	080065ad 	.word	0x080065ad

080065ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065b6:	4b13      	ldr	r3, [pc, #76]	@ (8006604 <prvTaskExitError+0x58>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065be:	d00b      	beq.n	80065d8 <prvTaskExitError+0x2c>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	60fb      	str	r3, [r7, #12]
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <prvTaskExitError+0x28>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	60bb      	str	r3, [r7, #8]
}
 80065ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065ec:	bf00      	nop
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0fc      	beq.n	80065ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000040 	.word	0x20000040
	...

08006610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006610:	4b07      	ldr	r3, [pc, #28]	@ (8006630 <pxCurrentTCBConst2>)
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	6808      	ldr	r0, [r1, #0]
 8006616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661a:	f380 8809 	msr	PSP, r0
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f380 8811 	msr	BASEPRI, r0
 800662a:	4770      	bx	lr
 800662c:	f3af 8000 	nop.w

08006630 <pxCurrentTCBConst2>:
 8006630:	20000ca8 	.word	0x20000ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop

08006638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006638:	4808      	ldr	r0, [pc, #32]	@ (800665c <prvPortStartFirstTask+0x24>)
 800663a:	6800      	ldr	r0, [r0, #0]
 800663c:	6800      	ldr	r0, [r0, #0]
 800663e:	f380 8808 	msr	MSP, r0
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f380 8814 	msr	CONTROL, r0
 800664a:	b662      	cpsie	i
 800664c:	b661      	cpsie	f
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	df00      	svc	0
 8006658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800665a:	bf00      	nop
 800665c:	e000ed08 	.word	0xe000ed08

08006660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006666:	4b47      	ldr	r3, [pc, #284]	@ (8006784 <xPortStartScheduler+0x124>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a47      	ldr	r2, [pc, #284]	@ (8006788 <xPortStartScheduler+0x128>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d10b      	bne.n	8006688 <xPortStartScheduler+0x28>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	bf00      	nop
 8006686:	e7fd      	b.n	8006684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006688:	4b3e      	ldr	r3, [pc, #248]	@ (8006784 <xPortStartScheduler+0x124>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a3f      	ldr	r2, [pc, #252]	@ (800678c <xPortStartScheduler+0x12c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d10b      	bne.n	80066aa <xPortStartScheduler+0x4a>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	613b      	str	r3, [r7, #16]
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	e7fd      	b.n	80066a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066aa:	4b39      	ldr	r3, [pc, #228]	@ (8006790 <xPortStartScheduler+0x130>)
 80066ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	22ff      	movs	r2, #255	@ 0xff
 80066ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	4b31      	ldr	r3, [pc, #196]	@ (8006794 <xPortStartScheduler+0x134>)
 80066d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066d2:	4b31      	ldr	r3, [pc, #196]	@ (8006798 <xPortStartScheduler+0x138>)
 80066d4:	2207      	movs	r2, #7
 80066d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066d8:	e009      	b.n	80066ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80066da:	4b2f      	ldr	r3, [pc, #188]	@ (8006798 <xPortStartScheduler+0x138>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3b01      	subs	r3, #1
 80066e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006798 <xPortStartScheduler+0x138>)
 80066e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f6:	2b80      	cmp	r3, #128	@ 0x80
 80066f8:	d0ef      	beq.n	80066da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066fa:	4b27      	ldr	r3, [pc, #156]	@ (8006798 <xPortStartScheduler+0x138>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f1c3 0307 	rsb	r3, r3, #7
 8006702:	2b04      	cmp	r3, #4
 8006704:	d00b      	beq.n	800671e <xPortStartScheduler+0xbe>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	60bb      	str	r3, [r7, #8]
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	e7fd      	b.n	800671a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800671e:	4b1e      	ldr	r3, [pc, #120]	@ (8006798 <xPortStartScheduler+0x138>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	4a1c      	ldr	r2, [pc, #112]	@ (8006798 <xPortStartScheduler+0x138>)
 8006726:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006728:	4b1b      	ldr	r3, [pc, #108]	@ (8006798 <xPortStartScheduler+0x138>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006730:	4a19      	ldr	r2, [pc, #100]	@ (8006798 <xPortStartScheduler+0x138>)
 8006732:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	b2da      	uxtb	r2, r3
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800673c:	4b17      	ldr	r3, [pc, #92]	@ (800679c <xPortStartScheduler+0x13c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a16      	ldr	r2, [pc, #88]	@ (800679c <xPortStartScheduler+0x13c>)
 8006742:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006746:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006748:	4b14      	ldr	r3, [pc, #80]	@ (800679c <xPortStartScheduler+0x13c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a13      	ldr	r2, [pc, #76]	@ (800679c <xPortStartScheduler+0x13c>)
 800674e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006752:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006754:	f000 f8da 	bl	800690c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006758:	4b11      	ldr	r3, [pc, #68]	@ (80067a0 <xPortStartScheduler+0x140>)
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800675e:	f000 f8f9 	bl	8006954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006762:	4b10      	ldr	r3, [pc, #64]	@ (80067a4 <xPortStartScheduler+0x144>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a0f      	ldr	r2, [pc, #60]	@ (80067a4 <xPortStartScheduler+0x144>)
 8006768:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800676c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800676e:	f7ff ff63 	bl	8006638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006772:	f7ff f83b 	bl	80057ec <vTaskSwitchContext>
	prvTaskExitError();
 8006776:	f7ff ff19 	bl	80065ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	e000ed00 	.word	0xe000ed00
 8006788:	410fc271 	.word	0x410fc271
 800678c:	410fc270 	.word	0x410fc270
 8006790:	e000e400 	.word	0xe000e400
 8006794:	200012d4 	.word	0x200012d4
 8006798:	200012d8 	.word	0x200012d8
 800679c:	e000ed20 	.word	0xe000ed20
 80067a0:	20000040 	.word	0x20000040
 80067a4:	e000ef34 	.word	0xe000ef34

080067a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	607b      	str	r3, [r7, #4]
}
 80067c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067c2:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <vPortEnterCritical+0x5c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3301      	adds	r3, #1
 80067c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006804 <vPortEnterCritical+0x5c>)
 80067ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006804 <vPortEnterCritical+0x5c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d110      	bne.n	80067f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006808 <vPortEnterCritical+0x60>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00b      	beq.n	80067f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	603b      	str	r3, [r7, #0]
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	e7fd      	b.n	80067f2 <vPortEnterCritical+0x4a>
	}
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20000040 	.word	0x20000040
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006812:	4b12      	ldr	r3, [pc, #72]	@ (800685c <vPortExitCritical+0x50>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <vPortExitCritical+0x26>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	607b      	str	r3, [r7, #4]
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006832:	4b0a      	ldr	r3, [pc, #40]	@ (800685c <vPortExitCritical+0x50>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3b01      	subs	r3, #1
 8006838:	4a08      	ldr	r2, [pc, #32]	@ (800685c <vPortExitCritical+0x50>)
 800683a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800683c:	4b07      	ldr	r3, [pc, #28]	@ (800685c <vPortExitCritical+0x50>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <vPortExitCritical+0x44>
 8006844:	2300      	movs	r3, #0
 8006846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f383 8811 	msr	BASEPRI, r3
}
 800684e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	20000040 	.word	0x20000040

08006860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006860:	f3ef 8009 	mrs	r0, PSP
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	4b15      	ldr	r3, [pc, #84]	@ (80068c0 <pxCurrentTCBConst>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	f01e 0f10 	tst.w	lr, #16
 8006870:	bf08      	it	eq
 8006872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687a:	6010      	str	r0, [r2, #0]
 800687c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006884:	f380 8811 	msr	BASEPRI, r0
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f7fe ffac 	bl	80057ec <vTaskSwitchContext>
 8006894:	f04f 0000 	mov.w	r0, #0
 8006898:	f380 8811 	msr	BASEPRI, r0
 800689c:	bc09      	pop	{r0, r3}
 800689e:	6819      	ldr	r1, [r3, #0]
 80068a0:	6808      	ldr	r0, [r1, #0]
 80068a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a6:	f01e 0f10 	tst.w	lr, #16
 80068aa:	bf08      	it	eq
 80068ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068b0:	f380 8809 	msr	PSP, r0
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	f3af 8000 	nop.w

080068c0 <pxCurrentTCBConst>:
 80068c0:	20000ca8 	.word	0x20000ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop

080068c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	607b      	str	r3, [r7, #4]
}
 80068e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068e2:	f7fe fec9 	bl	8005678 <xTaskIncrementTick>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068ec:	4b06      	ldr	r3, [pc, #24]	@ (8006908 <xPortSysTickHandler+0x40>)
 80068ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	2300      	movs	r3, #0
 80068f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	f383 8811 	msr	BASEPRI, r3
}
 80068fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006900:	bf00      	nop
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006910:	4b0b      	ldr	r3, [pc, #44]	@ (8006940 <vPortSetupTimerInterrupt+0x34>)
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006916:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <vPortSetupTimerInterrupt+0x38>)
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800691c:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <vPortSetupTimerInterrupt+0x3c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a0a      	ldr	r2, [pc, #40]	@ (800694c <vPortSetupTimerInterrupt+0x40>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	099b      	lsrs	r3, r3, #6
 8006928:	4a09      	ldr	r2, [pc, #36]	@ (8006950 <vPortSetupTimerInterrupt+0x44>)
 800692a:	3b01      	subs	r3, #1
 800692c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800692e:	4b04      	ldr	r3, [pc, #16]	@ (8006940 <vPortSetupTimerInterrupt+0x34>)
 8006930:	2207      	movs	r2, #7
 8006932:	601a      	str	r2, [r3, #0]
}
 8006934:	bf00      	nop
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	e000e010 	.word	0xe000e010
 8006944:	e000e018 	.word	0xe000e018
 8006948:	20000034 	.word	0x20000034
 800694c:	10624dd3 	.word	0x10624dd3
 8006950:	e000e014 	.word	0xe000e014

08006954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006954:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006964 <vPortEnableVFP+0x10>
 8006958:	6801      	ldr	r1, [r0, #0]
 800695a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800695e:	6001      	str	r1, [r0, #0]
 8006960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006962:	bf00      	nop
 8006964:	e000ed88 	.word	0xe000ed88

08006968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800696e:	f3ef 8305 	mrs	r3, IPSR
 8006972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b0f      	cmp	r3, #15
 8006978:	d915      	bls.n	80069a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800697a:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <vPortValidateInterruptPriority+0x74>)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006984:	4b16      	ldr	r3, [pc, #88]	@ (80069e0 <vPortValidateInterruptPriority+0x78>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	7afa      	ldrb	r2, [r7, #11]
 800698a:	429a      	cmp	r2, r3
 800698c:	d20b      	bcs.n	80069a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	607b      	str	r3, [r7, #4]
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069a6:	4b0f      	ldr	r3, [pc, #60]	@ (80069e4 <vPortValidateInterruptPriority+0x7c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069ae:	4b0e      	ldr	r3, [pc, #56]	@ (80069e8 <vPortValidateInterruptPriority+0x80>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d90b      	bls.n	80069ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	603b      	str	r3, [r7, #0]
}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	e7fd      	b.n	80069ca <vPortValidateInterruptPriority+0x62>
	}
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	e000e3f0 	.word	0xe000e3f0
 80069e0:	200012d4 	.word	0x200012d4
 80069e4:	e000ed0c 	.word	0xe000ed0c
 80069e8:	200012d8 	.word	0x200012d8

080069ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	@ 0x28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069f8:	f7fe fd82 	bl	8005500 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006b70 <pvPortMalloc+0x184>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a04:	f000 f924 	bl	8006c50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a08:	4b5a      	ldr	r3, [pc, #360]	@ (8006b74 <pvPortMalloc+0x188>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f040 8095 	bne.w	8006b40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01e      	beq.n	8006a5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a1c:	2208      	movs	r2, #8
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4413      	add	r3, r2
 8006a22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d015      	beq.n	8006a5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f023 0307 	bic.w	r3, r3, #7
 8006a34:	3308      	adds	r3, #8
 8006a36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <pvPortMalloc+0x6e>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	617b      	str	r3, [r7, #20]
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop
 8006a58:	e7fd      	b.n	8006a56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d06f      	beq.n	8006b40 <pvPortMalloc+0x154>
 8006a60:	4b45      	ldr	r3, [pc, #276]	@ (8006b78 <pvPortMalloc+0x18c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d86a      	bhi.n	8006b40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a6a:	4b44      	ldr	r3, [pc, #272]	@ (8006b7c <pvPortMalloc+0x190>)
 8006a6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a6e:	4b43      	ldr	r3, [pc, #268]	@ (8006b7c <pvPortMalloc+0x190>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a74:	e004      	b.n	8006a80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d903      	bls.n	8006a92 <pvPortMalloc+0xa6>
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1f1      	bne.n	8006a76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a92:	4b37      	ldr	r3, [pc, #220]	@ (8006b70 <pvPortMalloc+0x184>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d051      	beq.n	8006b40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	4413      	add	r3, r2
 8006aa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	1ad2      	subs	r2, r2, r3
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d920      	bls.n	8006b00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00b      	beq.n	8006ae8 <pvPortMalloc+0xfc>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	613b      	str	r3, [r7, #16]
}
 8006ae2:	bf00      	nop
 8006ae4:	bf00      	nop
 8006ae6:	e7fd      	b.n	8006ae4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006afa:	69b8      	ldr	r0, [r7, #24]
 8006afc:	f000 f90a 	bl	8006d14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b00:	4b1d      	ldr	r3, [pc, #116]	@ (8006b78 <pvPortMalloc+0x18c>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8006b78 <pvPortMalloc+0x18c>)
 8006b0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006b78 <pvPortMalloc+0x18c>)
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	4b1b      	ldr	r3, [pc, #108]	@ (8006b80 <pvPortMalloc+0x194>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d203      	bcs.n	8006b22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b1a:	4b17      	ldr	r3, [pc, #92]	@ (8006b78 <pvPortMalloc+0x18c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a18      	ldr	r2, [pc, #96]	@ (8006b80 <pvPortMalloc+0x194>)
 8006b20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	4b13      	ldr	r3, [pc, #76]	@ (8006b74 <pvPortMalloc+0x188>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b36:	4b13      	ldr	r3, [pc, #76]	@ (8006b84 <pvPortMalloc+0x198>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	4a11      	ldr	r2, [pc, #68]	@ (8006b84 <pvPortMalloc+0x198>)
 8006b3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b40:	f7fe fcec 	bl	800551c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <pvPortMalloc+0x17a>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	60fb      	str	r3, [r7, #12]
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	e7fd      	b.n	8006b62 <pvPortMalloc+0x176>
	return pvReturn;
 8006b66:	69fb      	ldr	r3, [r7, #28]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3728      	adds	r7, #40	@ 0x28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20004ee4 	.word	0x20004ee4
 8006b74:	20004ef8 	.word	0x20004ef8
 8006b78:	20004ee8 	.word	0x20004ee8
 8006b7c:	20004edc 	.word	0x20004edc
 8006b80:	20004eec 	.word	0x20004eec
 8006b84:	20004ef0 	.word	0x20004ef0

08006b88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d04f      	beq.n	8006c3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b9a:	2308      	movs	r3, #8
 8006b9c:	425b      	negs	r3, r3
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	4b25      	ldr	r3, [pc, #148]	@ (8006c44 <vPortFree+0xbc>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <vPortFree+0x46>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	60fb      	str	r3, [r7, #12]
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	e7fd      	b.n	8006bca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00b      	beq.n	8006bee <vPortFree+0x66>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	60bb      	str	r3, [r7, #8]
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	e7fd      	b.n	8006bea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	4b14      	ldr	r3, [pc, #80]	@ (8006c44 <vPortFree+0xbc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01e      	beq.n	8006c3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d11a      	bne.n	8006c3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	4b0e      	ldr	r3, [pc, #56]	@ (8006c44 <vPortFree+0xbc>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	401a      	ands	r2, r3
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c14:	f7fe fc74 	bl	8005500 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c48 <vPortFree+0xc0>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4413      	add	r3, r2
 8006c22:	4a09      	ldr	r2, [pc, #36]	@ (8006c48 <vPortFree+0xc0>)
 8006c24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c26:	6938      	ldr	r0, [r7, #16]
 8006c28:	f000 f874 	bl	8006d14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c2c:	4b07      	ldr	r3, [pc, #28]	@ (8006c4c <vPortFree+0xc4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3301      	adds	r3, #1
 8006c32:	4a06      	ldr	r2, [pc, #24]	@ (8006c4c <vPortFree+0xc4>)
 8006c34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c36:	f7fe fc71 	bl	800551c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c3a:	bf00      	nop
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20004ef8 	.word	0x20004ef8
 8006c48:	20004ee8 	.word	0x20004ee8
 8006c4c:	20004ef4 	.word	0x20004ef4

08006c50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006c5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c5c:	4b27      	ldr	r3, [pc, #156]	@ (8006cfc <prvHeapInit+0xac>)
 8006c5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00c      	beq.n	8006c84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3307      	adds	r3, #7
 8006c6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0307 	bic.w	r3, r3, #7
 8006c76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8006cfc <prvHeapInit+0xac>)
 8006c80:	4413      	add	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c88:	4a1d      	ldr	r2, [pc, #116]	@ (8006d00 <prvHeapInit+0xb0>)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8006d00 <prvHeapInit+0xb0>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	4413      	add	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	1a9b      	subs	r3, r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0307 	bic.w	r3, r3, #7
 8006caa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4a15      	ldr	r2, [pc, #84]	@ (8006d04 <prvHeapInit+0xb4>)
 8006cb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006cb2:	4b14      	ldr	r3, [pc, #80]	@ (8006d04 <prvHeapInit+0xb4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cba:	4b12      	ldr	r3, [pc, #72]	@ (8006d04 <prvHeapInit+0xb4>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	1ad2      	subs	r2, r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8006d04 <prvHeapInit+0xb4>)
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8006d08 <prvHeapInit+0xb8>)
 8006cde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	4a09      	ldr	r2, [pc, #36]	@ (8006d0c <prvHeapInit+0xbc>)
 8006ce6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ce8:	4b09      	ldr	r3, [pc, #36]	@ (8006d10 <prvHeapInit+0xc0>)
 8006cea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006cee:	601a      	str	r2, [r3, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	200012dc 	.word	0x200012dc
 8006d00:	20004edc 	.word	0x20004edc
 8006d04:	20004ee4 	.word	0x20004ee4
 8006d08:	20004eec 	.word	0x20004eec
 8006d0c:	20004ee8 	.word	0x20004ee8
 8006d10:	20004ef8 	.word	0x20004ef8

08006d14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d1c:	4b28      	ldr	r3, [pc, #160]	@ (8006dc0 <prvInsertBlockIntoFreeList+0xac>)
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	e002      	b.n	8006d28 <prvInsertBlockIntoFreeList+0x14>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d8f7      	bhi.n	8006d22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d108      	bne.n	8006d56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	441a      	add	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	441a      	add	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d118      	bne.n	8006d9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4b15      	ldr	r3, [pc, #84]	@ (8006dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d00d      	beq.n	8006d92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	441a      	add	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	e008      	b.n	8006da4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d92:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	e003      	b.n	8006da4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d002      	beq.n	8006db2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	20004edc 	.word	0x20004edc
 8006dc4:	20004ee4 	.word	0x20004ee4

08006dc8 <random>:
 8006dc8:	4b16      	ldr	r3, [pc, #88]	@ (8006e24 <random+0x5c>)
 8006dca:	b510      	push	{r4, lr}
 8006dcc:	681c      	ldr	r4, [r3, #0]
 8006dce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006dd0:	b9b3      	cbnz	r3, 8006e00 <random+0x38>
 8006dd2:	2018      	movs	r0, #24
 8006dd4:	f000 fb20 	bl	8007418 <malloc>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6320      	str	r0, [r4, #48]	@ 0x30
 8006ddc:	b920      	cbnz	r0, 8006de8 <random+0x20>
 8006dde:	4b12      	ldr	r3, [pc, #72]	@ (8006e28 <random+0x60>)
 8006de0:	4812      	ldr	r0, [pc, #72]	@ (8006e2c <random+0x64>)
 8006de2:	214c      	movs	r1, #76	@ 0x4c
 8006de4:	f000 fab0 	bl	8007348 <__assert_func>
 8006de8:	4911      	ldr	r1, [pc, #68]	@ (8006e30 <random+0x68>)
 8006dea:	4b12      	ldr	r3, [pc, #72]	@ (8006e34 <random+0x6c>)
 8006dec:	e9c0 1300 	strd	r1, r3, [r0]
 8006df0:	4b11      	ldr	r3, [pc, #68]	@ (8006e38 <random+0x70>)
 8006df2:	6083      	str	r3, [r0, #8]
 8006df4:	230b      	movs	r3, #11
 8006df6:	8183      	strh	r3, [r0, #12]
 8006df8:	2100      	movs	r1, #0
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006e00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e02:	480e      	ldr	r0, [pc, #56]	@ (8006e3c <random+0x74>)
 8006e04:	690b      	ldr	r3, [r1, #16]
 8006e06:	694c      	ldr	r4, [r1, #20]
 8006e08:	4a0d      	ldr	r2, [pc, #52]	@ (8006e40 <random+0x78>)
 8006e0a:	4358      	muls	r0, r3
 8006e0c:	fb02 0004 	mla	r0, r2, r4, r0
 8006e10:	fba3 3202 	umull	r3, r2, r3, r2
 8006e14:	3301      	adds	r3, #1
 8006e16:	eb40 0002 	adc.w	r0, r0, r2
 8006e1a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006e1e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006e22:	bd10      	pop	{r4, pc}
 8006e24:	20000050 	.word	0x20000050
 8006e28:	08008418 	.word	0x08008418
 8006e2c:	0800842f 	.word	0x0800842f
 8006e30:	abcd330e 	.word	0xabcd330e
 8006e34:	e66d1234 	.word	0xe66d1234
 8006e38:	0005deec 	.word	0x0005deec
 8006e3c:	5851f42d 	.word	0x5851f42d
 8006e40:	4c957f2d 	.word	0x4c957f2d

08006e44 <std>:
 8006e44:	2300      	movs	r3, #0
 8006e46:	b510      	push	{r4, lr}
 8006e48:	4604      	mov	r4, r0
 8006e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e52:	6083      	str	r3, [r0, #8]
 8006e54:	8181      	strh	r1, [r0, #12]
 8006e56:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e58:	81c2      	strh	r2, [r0, #14]
 8006e5a:	6183      	str	r3, [r0, #24]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	2208      	movs	r2, #8
 8006e60:	305c      	adds	r0, #92	@ 0x5c
 8006e62:	f000 f9e7 	bl	8007234 <memset>
 8006e66:	4b0d      	ldr	r3, [pc, #52]	@ (8006e9c <std+0x58>)
 8006e68:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <std+0x5c>)
 8006e6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <std+0x60>)
 8006e70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea8 <std+0x64>)
 8006e74:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <std+0x68>)
 8006e78:	6224      	str	r4, [r4, #32]
 8006e7a:	429c      	cmp	r4, r3
 8006e7c:	d006      	beq.n	8006e8c <std+0x48>
 8006e7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e82:	4294      	cmp	r4, r2
 8006e84:	d002      	beq.n	8006e8c <std+0x48>
 8006e86:	33d0      	adds	r3, #208	@ 0xd0
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	d105      	bne.n	8006e98 <std+0x54>
 8006e8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e94:	f000 ba46 	b.w	8007324 <__retarget_lock_init_recursive>
 8006e98:	bd10      	pop	{r4, pc}
 8006e9a:	bf00      	nop
 8006e9c:	08007085 	.word	0x08007085
 8006ea0:	080070a7 	.word	0x080070a7
 8006ea4:	080070df 	.word	0x080070df
 8006ea8:	08007103 	.word	0x08007103
 8006eac:	20004efc 	.word	0x20004efc

08006eb0 <stdio_exit_handler>:
 8006eb0:	4a02      	ldr	r2, [pc, #8]	@ (8006ebc <stdio_exit_handler+0xc>)
 8006eb2:	4903      	ldr	r1, [pc, #12]	@ (8006ec0 <stdio_exit_handler+0x10>)
 8006eb4:	4803      	ldr	r0, [pc, #12]	@ (8006ec4 <stdio_exit_handler+0x14>)
 8006eb6:	f000 b869 	b.w	8006f8c <_fwalk_sglue>
 8006eba:	bf00      	nop
 8006ebc:	20000044 	.word	0x20000044
 8006ec0:	0800768d 	.word	0x0800768d
 8006ec4:	20000054 	.word	0x20000054

08006ec8 <cleanup_stdio>:
 8006ec8:	6841      	ldr	r1, [r0, #4]
 8006eca:	4b0c      	ldr	r3, [pc, #48]	@ (8006efc <cleanup_stdio+0x34>)
 8006ecc:	4299      	cmp	r1, r3
 8006ece:	b510      	push	{r4, lr}
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	d001      	beq.n	8006ed8 <cleanup_stdio+0x10>
 8006ed4:	f000 fbda 	bl	800768c <_fflush_r>
 8006ed8:	68a1      	ldr	r1, [r4, #8]
 8006eda:	4b09      	ldr	r3, [pc, #36]	@ (8006f00 <cleanup_stdio+0x38>)
 8006edc:	4299      	cmp	r1, r3
 8006ede:	d002      	beq.n	8006ee6 <cleanup_stdio+0x1e>
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 fbd3 	bl	800768c <_fflush_r>
 8006ee6:	68e1      	ldr	r1, [r4, #12]
 8006ee8:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <cleanup_stdio+0x3c>)
 8006eea:	4299      	cmp	r1, r3
 8006eec:	d004      	beq.n	8006ef8 <cleanup_stdio+0x30>
 8006eee:	4620      	mov	r0, r4
 8006ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef4:	f000 bbca 	b.w	800768c <_fflush_r>
 8006ef8:	bd10      	pop	{r4, pc}
 8006efa:	bf00      	nop
 8006efc:	20004efc 	.word	0x20004efc
 8006f00:	20004f64 	.word	0x20004f64
 8006f04:	20004fcc 	.word	0x20004fcc

08006f08 <global_stdio_init.part.0>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f38 <global_stdio_init.part.0+0x30>)
 8006f0c:	4c0b      	ldr	r4, [pc, #44]	@ (8006f3c <global_stdio_init.part.0+0x34>)
 8006f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f40 <global_stdio_init.part.0+0x38>)
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	4620      	mov	r0, r4
 8006f14:	2200      	movs	r2, #0
 8006f16:	2104      	movs	r1, #4
 8006f18:	f7ff ff94 	bl	8006e44 <std>
 8006f1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f20:	2201      	movs	r2, #1
 8006f22:	2109      	movs	r1, #9
 8006f24:	f7ff ff8e 	bl	8006e44 <std>
 8006f28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f32:	2112      	movs	r1, #18
 8006f34:	f7ff bf86 	b.w	8006e44 <std>
 8006f38:	20005034 	.word	0x20005034
 8006f3c:	20004efc 	.word	0x20004efc
 8006f40:	08006eb1 	.word	0x08006eb1

08006f44 <__sfp_lock_acquire>:
 8006f44:	4801      	ldr	r0, [pc, #4]	@ (8006f4c <__sfp_lock_acquire+0x8>)
 8006f46:	f000 b9ee 	b.w	8007326 <__retarget_lock_acquire_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	2000503d 	.word	0x2000503d

08006f50 <__sfp_lock_release>:
 8006f50:	4801      	ldr	r0, [pc, #4]	@ (8006f58 <__sfp_lock_release+0x8>)
 8006f52:	f000 b9e9 	b.w	8007328 <__retarget_lock_release_recursive>
 8006f56:	bf00      	nop
 8006f58:	2000503d 	.word	0x2000503d

08006f5c <__sinit>:
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	4604      	mov	r4, r0
 8006f60:	f7ff fff0 	bl	8006f44 <__sfp_lock_acquire>
 8006f64:	6a23      	ldr	r3, [r4, #32]
 8006f66:	b11b      	cbz	r3, 8006f70 <__sinit+0x14>
 8006f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f6c:	f7ff bff0 	b.w	8006f50 <__sfp_lock_release>
 8006f70:	4b04      	ldr	r3, [pc, #16]	@ (8006f84 <__sinit+0x28>)
 8006f72:	6223      	str	r3, [r4, #32]
 8006f74:	4b04      	ldr	r3, [pc, #16]	@ (8006f88 <__sinit+0x2c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1f5      	bne.n	8006f68 <__sinit+0xc>
 8006f7c:	f7ff ffc4 	bl	8006f08 <global_stdio_init.part.0>
 8006f80:	e7f2      	b.n	8006f68 <__sinit+0xc>
 8006f82:	bf00      	nop
 8006f84:	08006ec9 	.word	0x08006ec9
 8006f88:	20005034 	.word	0x20005034

08006f8c <_fwalk_sglue>:
 8006f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f90:	4607      	mov	r7, r0
 8006f92:	4688      	mov	r8, r1
 8006f94:	4614      	mov	r4, r2
 8006f96:	2600      	movs	r6, #0
 8006f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8006fa0:	d505      	bpl.n	8006fae <_fwalk_sglue+0x22>
 8006fa2:	6824      	ldr	r4, [r4, #0]
 8006fa4:	2c00      	cmp	r4, #0
 8006fa6:	d1f7      	bne.n	8006f98 <_fwalk_sglue+0xc>
 8006fa8:	4630      	mov	r0, r6
 8006faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fae:	89ab      	ldrh	r3, [r5, #12]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d907      	bls.n	8006fc4 <_fwalk_sglue+0x38>
 8006fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	d003      	beq.n	8006fc4 <_fwalk_sglue+0x38>
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	47c0      	blx	r8
 8006fc2:	4306      	orrs	r6, r0
 8006fc4:	3568      	adds	r5, #104	@ 0x68
 8006fc6:	e7e9      	b.n	8006f9c <_fwalk_sglue+0x10>

08006fc8 <_puts_r>:
 8006fc8:	6a03      	ldr	r3, [r0, #32]
 8006fca:	b570      	push	{r4, r5, r6, lr}
 8006fcc:	6884      	ldr	r4, [r0, #8]
 8006fce:	4605      	mov	r5, r0
 8006fd0:	460e      	mov	r6, r1
 8006fd2:	b90b      	cbnz	r3, 8006fd8 <_puts_r+0x10>
 8006fd4:	f7ff ffc2 	bl	8006f5c <__sinit>
 8006fd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fda:	07db      	lsls	r3, r3, #31
 8006fdc:	d405      	bmi.n	8006fea <_puts_r+0x22>
 8006fde:	89a3      	ldrh	r3, [r4, #12]
 8006fe0:	0598      	lsls	r0, r3, #22
 8006fe2:	d402      	bmi.n	8006fea <_puts_r+0x22>
 8006fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fe6:	f000 f99e 	bl	8007326 <__retarget_lock_acquire_recursive>
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	0719      	lsls	r1, r3, #28
 8006fee:	d502      	bpl.n	8006ff6 <_puts_r+0x2e>
 8006ff0:	6923      	ldr	r3, [r4, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d135      	bne.n	8007062 <_puts_r+0x9a>
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f000 f8c5 	bl	8007188 <__swsetup_r>
 8006ffe:	b380      	cbz	r0, 8007062 <_puts_r+0x9a>
 8007000:	f04f 35ff 	mov.w	r5, #4294967295
 8007004:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007006:	07da      	lsls	r2, r3, #31
 8007008:	d405      	bmi.n	8007016 <_puts_r+0x4e>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	059b      	lsls	r3, r3, #22
 800700e:	d402      	bmi.n	8007016 <_puts_r+0x4e>
 8007010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007012:	f000 f989 	bl	8007328 <__retarget_lock_release_recursive>
 8007016:	4628      	mov	r0, r5
 8007018:	bd70      	pop	{r4, r5, r6, pc}
 800701a:	2b00      	cmp	r3, #0
 800701c:	da04      	bge.n	8007028 <_puts_r+0x60>
 800701e:	69a2      	ldr	r2, [r4, #24]
 8007020:	429a      	cmp	r2, r3
 8007022:	dc17      	bgt.n	8007054 <_puts_r+0x8c>
 8007024:	290a      	cmp	r1, #10
 8007026:	d015      	beq.n	8007054 <_puts_r+0x8c>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	6022      	str	r2, [r4, #0]
 800702e:	7019      	strb	r1, [r3, #0]
 8007030:	68a3      	ldr	r3, [r4, #8]
 8007032:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007036:	3b01      	subs	r3, #1
 8007038:	60a3      	str	r3, [r4, #8]
 800703a:	2900      	cmp	r1, #0
 800703c:	d1ed      	bne.n	800701a <_puts_r+0x52>
 800703e:	2b00      	cmp	r3, #0
 8007040:	da11      	bge.n	8007066 <_puts_r+0x9e>
 8007042:	4622      	mov	r2, r4
 8007044:	210a      	movs	r1, #10
 8007046:	4628      	mov	r0, r5
 8007048:	f000 f85f 	bl	800710a <__swbuf_r>
 800704c:	3001      	adds	r0, #1
 800704e:	d0d7      	beq.n	8007000 <_puts_r+0x38>
 8007050:	250a      	movs	r5, #10
 8007052:	e7d7      	b.n	8007004 <_puts_r+0x3c>
 8007054:	4622      	mov	r2, r4
 8007056:	4628      	mov	r0, r5
 8007058:	f000 f857 	bl	800710a <__swbuf_r>
 800705c:	3001      	adds	r0, #1
 800705e:	d1e7      	bne.n	8007030 <_puts_r+0x68>
 8007060:	e7ce      	b.n	8007000 <_puts_r+0x38>
 8007062:	3e01      	subs	r6, #1
 8007064:	e7e4      	b.n	8007030 <_puts_r+0x68>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	6022      	str	r2, [r4, #0]
 800706c:	220a      	movs	r2, #10
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	e7ee      	b.n	8007050 <_puts_r+0x88>
	...

08007074 <puts>:
 8007074:	4b02      	ldr	r3, [pc, #8]	@ (8007080 <puts+0xc>)
 8007076:	4601      	mov	r1, r0
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	f7ff bfa5 	b.w	8006fc8 <_puts_r>
 800707e:	bf00      	nop
 8007080:	20000050 	.word	0x20000050

08007084 <__sread>:
 8007084:	b510      	push	{r4, lr}
 8007086:	460c      	mov	r4, r1
 8007088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708c:	f000 f8fc 	bl	8007288 <_read_r>
 8007090:	2800      	cmp	r0, #0
 8007092:	bfab      	itete	ge
 8007094:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007096:	89a3      	ldrhlt	r3, [r4, #12]
 8007098:	181b      	addge	r3, r3, r0
 800709a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800709e:	bfac      	ite	ge
 80070a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80070a2:	81a3      	strhlt	r3, [r4, #12]
 80070a4:	bd10      	pop	{r4, pc}

080070a6 <__swrite>:
 80070a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070aa:	461f      	mov	r7, r3
 80070ac:	898b      	ldrh	r3, [r1, #12]
 80070ae:	05db      	lsls	r3, r3, #23
 80070b0:	4605      	mov	r5, r0
 80070b2:	460c      	mov	r4, r1
 80070b4:	4616      	mov	r6, r2
 80070b6:	d505      	bpl.n	80070c4 <__swrite+0x1e>
 80070b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070bc:	2302      	movs	r3, #2
 80070be:	2200      	movs	r2, #0
 80070c0:	f000 f8d0 	bl	8007264 <_lseek_r>
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	4632      	mov	r2, r6
 80070d2:	463b      	mov	r3, r7
 80070d4:	4628      	mov	r0, r5
 80070d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070da:	f000 b8e7 	b.w	80072ac <_write_r>

080070de <__sseek>:
 80070de:	b510      	push	{r4, lr}
 80070e0:	460c      	mov	r4, r1
 80070e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e6:	f000 f8bd 	bl	8007264 <_lseek_r>
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	bf15      	itete	ne
 80070f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070fa:	81a3      	strheq	r3, [r4, #12]
 80070fc:	bf18      	it	ne
 80070fe:	81a3      	strhne	r3, [r4, #12]
 8007100:	bd10      	pop	{r4, pc}

08007102 <__sclose>:
 8007102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007106:	f000 b89d 	b.w	8007244 <_close_r>

0800710a <__swbuf_r>:
 800710a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710c:	460e      	mov	r6, r1
 800710e:	4614      	mov	r4, r2
 8007110:	4605      	mov	r5, r0
 8007112:	b118      	cbz	r0, 800711c <__swbuf_r+0x12>
 8007114:	6a03      	ldr	r3, [r0, #32]
 8007116:	b90b      	cbnz	r3, 800711c <__swbuf_r+0x12>
 8007118:	f7ff ff20 	bl	8006f5c <__sinit>
 800711c:	69a3      	ldr	r3, [r4, #24]
 800711e:	60a3      	str	r3, [r4, #8]
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	071a      	lsls	r2, r3, #28
 8007124:	d501      	bpl.n	800712a <__swbuf_r+0x20>
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	b943      	cbnz	r3, 800713c <__swbuf_r+0x32>
 800712a:	4621      	mov	r1, r4
 800712c:	4628      	mov	r0, r5
 800712e:	f000 f82b 	bl	8007188 <__swsetup_r>
 8007132:	b118      	cbz	r0, 800713c <__swbuf_r+0x32>
 8007134:	f04f 37ff 	mov.w	r7, #4294967295
 8007138:	4638      	mov	r0, r7
 800713a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	6922      	ldr	r2, [r4, #16]
 8007140:	1a98      	subs	r0, r3, r2
 8007142:	6963      	ldr	r3, [r4, #20]
 8007144:	b2f6      	uxtb	r6, r6
 8007146:	4283      	cmp	r3, r0
 8007148:	4637      	mov	r7, r6
 800714a:	dc05      	bgt.n	8007158 <__swbuf_r+0x4e>
 800714c:	4621      	mov	r1, r4
 800714e:	4628      	mov	r0, r5
 8007150:	f000 fa9c 	bl	800768c <_fflush_r>
 8007154:	2800      	cmp	r0, #0
 8007156:	d1ed      	bne.n	8007134 <__swbuf_r+0x2a>
 8007158:	68a3      	ldr	r3, [r4, #8]
 800715a:	3b01      	subs	r3, #1
 800715c:	60a3      	str	r3, [r4, #8]
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	6022      	str	r2, [r4, #0]
 8007164:	701e      	strb	r6, [r3, #0]
 8007166:	6962      	ldr	r2, [r4, #20]
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	429a      	cmp	r2, r3
 800716c:	d004      	beq.n	8007178 <__swbuf_r+0x6e>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	07db      	lsls	r3, r3, #31
 8007172:	d5e1      	bpl.n	8007138 <__swbuf_r+0x2e>
 8007174:	2e0a      	cmp	r6, #10
 8007176:	d1df      	bne.n	8007138 <__swbuf_r+0x2e>
 8007178:	4621      	mov	r1, r4
 800717a:	4628      	mov	r0, r5
 800717c:	f000 fa86 	bl	800768c <_fflush_r>
 8007180:	2800      	cmp	r0, #0
 8007182:	d0d9      	beq.n	8007138 <__swbuf_r+0x2e>
 8007184:	e7d6      	b.n	8007134 <__swbuf_r+0x2a>
	...

08007188 <__swsetup_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4b29      	ldr	r3, [pc, #164]	@ (8007230 <__swsetup_r+0xa8>)
 800718c:	4605      	mov	r5, r0
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	460c      	mov	r4, r1
 8007192:	b118      	cbz	r0, 800719c <__swsetup_r+0x14>
 8007194:	6a03      	ldr	r3, [r0, #32]
 8007196:	b90b      	cbnz	r3, 800719c <__swsetup_r+0x14>
 8007198:	f7ff fee0 	bl	8006f5c <__sinit>
 800719c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a0:	0719      	lsls	r1, r3, #28
 80071a2:	d422      	bmi.n	80071ea <__swsetup_r+0x62>
 80071a4:	06da      	lsls	r2, r3, #27
 80071a6:	d407      	bmi.n	80071b8 <__swsetup_r+0x30>
 80071a8:	2209      	movs	r2, #9
 80071aa:	602a      	str	r2, [r5, #0]
 80071ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	f04f 30ff 	mov.w	r0, #4294967295
 80071b6:	e033      	b.n	8007220 <__swsetup_r+0x98>
 80071b8:	0758      	lsls	r0, r3, #29
 80071ba:	d512      	bpl.n	80071e2 <__swsetup_r+0x5a>
 80071bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071be:	b141      	cbz	r1, 80071d2 <__swsetup_r+0x4a>
 80071c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071c4:	4299      	cmp	r1, r3
 80071c6:	d002      	beq.n	80071ce <__swsetup_r+0x46>
 80071c8:	4628      	mov	r0, r5
 80071ca:	f000 f8db 	bl	8007384 <_free_r>
 80071ce:	2300      	movs	r3, #0
 80071d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071d8:	81a3      	strh	r3, [r4, #12]
 80071da:	2300      	movs	r3, #0
 80071dc:	6063      	str	r3, [r4, #4]
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f043 0308 	orr.w	r3, r3, #8
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	b94b      	cbnz	r3, 8007202 <__swsetup_r+0x7a>
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071f8:	d003      	beq.n	8007202 <__swsetup_r+0x7a>
 80071fa:	4621      	mov	r1, r4
 80071fc:	4628      	mov	r0, r5
 80071fe:	f000 faa5 	bl	800774c <__smakebuf_r>
 8007202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007206:	f013 0201 	ands.w	r2, r3, #1
 800720a:	d00a      	beq.n	8007222 <__swsetup_r+0x9a>
 800720c:	2200      	movs	r2, #0
 800720e:	60a2      	str	r2, [r4, #8]
 8007210:	6962      	ldr	r2, [r4, #20]
 8007212:	4252      	negs	r2, r2
 8007214:	61a2      	str	r2, [r4, #24]
 8007216:	6922      	ldr	r2, [r4, #16]
 8007218:	b942      	cbnz	r2, 800722c <__swsetup_r+0xa4>
 800721a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800721e:	d1c5      	bne.n	80071ac <__swsetup_r+0x24>
 8007220:	bd38      	pop	{r3, r4, r5, pc}
 8007222:	0799      	lsls	r1, r3, #30
 8007224:	bf58      	it	pl
 8007226:	6962      	ldrpl	r2, [r4, #20]
 8007228:	60a2      	str	r2, [r4, #8]
 800722a:	e7f4      	b.n	8007216 <__swsetup_r+0x8e>
 800722c:	2000      	movs	r0, #0
 800722e:	e7f7      	b.n	8007220 <__swsetup_r+0x98>
 8007230:	20000050 	.word	0x20000050

08007234 <memset>:
 8007234:	4402      	add	r2, r0
 8007236:	4603      	mov	r3, r0
 8007238:	4293      	cmp	r3, r2
 800723a:	d100      	bne.n	800723e <memset+0xa>
 800723c:	4770      	bx	lr
 800723e:	f803 1b01 	strb.w	r1, [r3], #1
 8007242:	e7f9      	b.n	8007238 <memset+0x4>

08007244 <_close_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d06      	ldr	r5, [pc, #24]	@ (8007260 <_close_r+0x1c>)
 8007248:	2300      	movs	r3, #0
 800724a:	4604      	mov	r4, r0
 800724c:	4608      	mov	r0, r1
 800724e:	602b      	str	r3, [r5, #0]
 8007250:	f7fa fbc2 	bl	80019d8 <_close>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_close_r+0x1a>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_close_r+0x1a>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	20005038 	.word	0x20005038

08007264 <_lseek_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	@ (8007284 <_lseek_r+0x20>)
 8007268:	4604      	mov	r4, r0
 800726a:	4608      	mov	r0, r1
 800726c:	4611      	mov	r1, r2
 800726e:	2200      	movs	r2, #0
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f7fa fbd7 	bl	8001a26 <_lseek>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_lseek_r+0x1e>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_lseek_r+0x1e>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	20005038 	.word	0x20005038

08007288 <_read_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4d07      	ldr	r5, [pc, #28]	@ (80072a8 <_read_r+0x20>)
 800728c:	4604      	mov	r4, r0
 800728e:	4608      	mov	r0, r1
 8007290:	4611      	mov	r1, r2
 8007292:	2200      	movs	r2, #0
 8007294:	602a      	str	r2, [r5, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	f7fa fb65 	bl	8001966 <_read>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_read_r+0x1e>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_read_r+0x1e>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	20005038 	.word	0x20005038

080072ac <_write_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4d07      	ldr	r5, [pc, #28]	@ (80072cc <_write_r+0x20>)
 80072b0:	4604      	mov	r4, r0
 80072b2:	4608      	mov	r0, r1
 80072b4:	4611      	mov	r1, r2
 80072b6:	2200      	movs	r2, #0
 80072b8:	602a      	str	r2, [r5, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	f7fa fb70 	bl	80019a0 <_write>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d102      	bne.n	80072ca <_write_r+0x1e>
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	b103      	cbz	r3, 80072ca <_write_r+0x1e>
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	20005038 	.word	0x20005038

080072d0 <__errno>:
 80072d0:	4b01      	ldr	r3, [pc, #4]	@ (80072d8 <__errno+0x8>)
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20000050 	.word	0x20000050

080072dc <__libc_init_array>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4d0d      	ldr	r5, [pc, #52]	@ (8007314 <__libc_init_array+0x38>)
 80072e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007318 <__libc_init_array+0x3c>)
 80072e2:	1b64      	subs	r4, r4, r5
 80072e4:	10a4      	asrs	r4, r4, #2
 80072e6:	2600      	movs	r6, #0
 80072e8:	42a6      	cmp	r6, r4
 80072ea:	d109      	bne.n	8007300 <__libc_init_array+0x24>
 80072ec:	4d0b      	ldr	r5, [pc, #44]	@ (800731c <__libc_init_array+0x40>)
 80072ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007320 <__libc_init_array+0x44>)
 80072f0:	f000 fdb2 	bl	8007e58 <_init>
 80072f4:	1b64      	subs	r4, r4, r5
 80072f6:	10a4      	asrs	r4, r4, #2
 80072f8:	2600      	movs	r6, #0
 80072fa:	42a6      	cmp	r6, r4
 80072fc:	d105      	bne.n	800730a <__libc_init_array+0x2e>
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	f855 3b04 	ldr.w	r3, [r5], #4
 8007304:	4798      	blx	r3
 8007306:	3601      	adds	r6, #1
 8007308:	e7ee      	b.n	80072e8 <__libc_init_array+0xc>
 800730a:	f855 3b04 	ldr.w	r3, [r5], #4
 800730e:	4798      	blx	r3
 8007310:	3601      	adds	r6, #1
 8007312:	e7f2      	b.n	80072fa <__libc_init_array+0x1e>
 8007314:	08008500 	.word	0x08008500
 8007318:	08008500 	.word	0x08008500
 800731c:	08008500 	.word	0x08008500
 8007320:	08008504 	.word	0x08008504

08007324 <__retarget_lock_init_recursive>:
 8007324:	4770      	bx	lr

08007326 <__retarget_lock_acquire_recursive>:
 8007326:	4770      	bx	lr

08007328 <__retarget_lock_release_recursive>:
 8007328:	4770      	bx	lr

0800732a <memcpy>:
 800732a:	440a      	add	r2, r1
 800732c:	4291      	cmp	r1, r2
 800732e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007332:	d100      	bne.n	8007336 <memcpy+0xc>
 8007334:	4770      	bx	lr
 8007336:	b510      	push	{r4, lr}
 8007338:	f811 4b01 	ldrb.w	r4, [r1], #1
 800733c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007340:	4291      	cmp	r1, r2
 8007342:	d1f9      	bne.n	8007338 <memcpy+0xe>
 8007344:	bd10      	pop	{r4, pc}
	...

08007348 <__assert_func>:
 8007348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800734a:	4614      	mov	r4, r2
 800734c:	461a      	mov	r2, r3
 800734e:	4b09      	ldr	r3, [pc, #36]	@ (8007374 <__assert_func+0x2c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4605      	mov	r5, r0
 8007354:	68d8      	ldr	r0, [r3, #12]
 8007356:	b14c      	cbz	r4, 800736c <__assert_func+0x24>
 8007358:	4b07      	ldr	r3, [pc, #28]	@ (8007378 <__assert_func+0x30>)
 800735a:	9100      	str	r1, [sp, #0]
 800735c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007360:	4906      	ldr	r1, [pc, #24]	@ (800737c <__assert_func+0x34>)
 8007362:	462b      	mov	r3, r5
 8007364:	f000 f9ba 	bl	80076dc <fiprintf>
 8007368:	f000 fa5e 	bl	8007828 <abort>
 800736c:	4b04      	ldr	r3, [pc, #16]	@ (8007380 <__assert_func+0x38>)
 800736e:	461c      	mov	r4, r3
 8007370:	e7f3      	b.n	800735a <__assert_func+0x12>
 8007372:	bf00      	nop
 8007374:	20000050 	.word	0x20000050
 8007378:	08008489 	.word	0x08008489
 800737c:	08008496 	.word	0x08008496
 8007380:	080084c4 	.word	0x080084c4

08007384 <_free_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4605      	mov	r5, r0
 8007388:	2900      	cmp	r1, #0
 800738a:	d041      	beq.n	8007410 <_free_r+0x8c>
 800738c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007390:	1f0c      	subs	r4, r1, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	bfb8      	it	lt
 8007396:	18e4      	addlt	r4, r4, r3
 8007398:	f000 f8e8 	bl	800756c <__malloc_lock>
 800739c:	4a1d      	ldr	r2, [pc, #116]	@ (8007414 <_free_r+0x90>)
 800739e:	6813      	ldr	r3, [r2, #0]
 80073a0:	b933      	cbnz	r3, 80073b0 <_free_r+0x2c>
 80073a2:	6063      	str	r3, [r4, #4]
 80073a4:	6014      	str	r4, [r2, #0]
 80073a6:	4628      	mov	r0, r5
 80073a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ac:	f000 b8e4 	b.w	8007578 <__malloc_unlock>
 80073b0:	42a3      	cmp	r3, r4
 80073b2:	d908      	bls.n	80073c6 <_free_r+0x42>
 80073b4:	6820      	ldr	r0, [r4, #0]
 80073b6:	1821      	adds	r1, r4, r0
 80073b8:	428b      	cmp	r3, r1
 80073ba:	bf01      	itttt	eq
 80073bc:	6819      	ldreq	r1, [r3, #0]
 80073be:	685b      	ldreq	r3, [r3, #4]
 80073c0:	1809      	addeq	r1, r1, r0
 80073c2:	6021      	streq	r1, [r4, #0]
 80073c4:	e7ed      	b.n	80073a2 <_free_r+0x1e>
 80073c6:	461a      	mov	r2, r3
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	b10b      	cbz	r3, 80073d0 <_free_r+0x4c>
 80073cc:	42a3      	cmp	r3, r4
 80073ce:	d9fa      	bls.n	80073c6 <_free_r+0x42>
 80073d0:	6811      	ldr	r1, [r2, #0]
 80073d2:	1850      	adds	r0, r2, r1
 80073d4:	42a0      	cmp	r0, r4
 80073d6:	d10b      	bne.n	80073f0 <_free_r+0x6c>
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	4401      	add	r1, r0
 80073dc:	1850      	adds	r0, r2, r1
 80073de:	4283      	cmp	r3, r0
 80073e0:	6011      	str	r1, [r2, #0]
 80073e2:	d1e0      	bne.n	80073a6 <_free_r+0x22>
 80073e4:	6818      	ldr	r0, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	6053      	str	r3, [r2, #4]
 80073ea:	4408      	add	r0, r1
 80073ec:	6010      	str	r0, [r2, #0]
 80073ee:	e7da      	b.n	80073a6 <_free_r+0x22>
 80073f0:	d902      	bls.n	80073f8 <_free_r+0x74>
 80073f2:	230c      	movs	r3, #12
 80073f4:	602b      	str	r3, [r5, #0]
 80073f6:	e7d6      	b.n	80073a6 <_free_r+0x22>
 80073f8:	6820      	ldr	r0, [r4, #0]
 80073fa:	1821      	adds	r1, r4, r0
 80073fc:	428b      	cmp	r3, r1
 80073fe:	bf04      	itt	eq
 8007400:	6819      	ldreq	r1, [r3, #0]
 8007402:	685b      	ldreq	r3, [r3, #4]
 8007404:	6063      	str	r3, [r4, #4]
 8007406:	bf04      	itt	eq
 8007408:	1809      	addeq	r1, r1, r0
 800740a:	6021      	streq	r1, [r4, #0]
 800740c:	6054      	str	r4, [r2, #4]
 800740e:	e7ca      	b.n	80073a6 <_free_r+0x22>
 8007410:	bd38      	pop	{r3, r4, r5, pc}
 8007412:	bf00      	nop
 8007414:	20005044 	.word	0x20005044

08007418 <malloc>:
 8007418:	4b02      	ldr	r3, [pc, #8]	@ (8007424 <malloc+0xc>)
 800741a:	4601      	mov	r1, r0
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	f000 b825 	b.w	800746c <_malloc_r>
 8007422:	bf00      	nop
 8007424:	20000050 	.word	0x20000050

08007428 <sbrk_aligned>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	4e0f      	ldr	r6, [pc, #60]	@ (8007468 <sbrk_aligned+0x40>)
 800742c:	460c      	mov	r4, r1
 800742e:	6831      	ldr	r1, [r6, #0]
 8007430:	4605      	mov	r5, r0
 8007432:	b911      	cbnz	r1, 800743a <sbrk_aligned+0x12>
 8007434:	f000 f9e8 	bl	8007808 <_sbrk_r>
 8007438:	6030      	str	r0, [r6, #0]
 800743a:	4621      	mov	r1, r4
 800743c:	4628      	mov	r0, r5
 800743e:	f000 f9e3 	bl	8007808 <_sbrk_r>
 8007442:	1c43      	adds	r3, r0, #1
 8007444:	d103      	bne.n	800744e <sbrk_aligned+0x26>
 8007446:	f04f 34ff 	mov.w	r4, #4294967295
 800744a:	4620      	mov	r0, r4
 800744c:	bd70      	pop	{r4, r5, r6, pc}
 800744e:	1cc4      	adds	r4, r0, #3
 8007450:	f024 0403 	bic.w	r4, r4, #3
 8007454:	42a0      	cmp	r0, r4
 8007456:	d0f8      	beq.n	800744a <sbrk_aligned+0x22>
 8007458:	1a21      	subs	r1, r4, r0
 800745a:	4628      	mov	r0, r5
 800745c:	f000 f9d4 	bl	8007808 <_sbrk_r>
 8007460:	3001      	adds	r0, #1
 8007462:	d1f2      	bne.n	800744a <sbrk_aligned+0x22>
 8007464:	e7ef      	b.n	8007446 <sbrk_aligned+0x1e>
 8007466:	bf00      	nop
 8007468:	20005040 	.word	0x20005040

0800746c <_malloc_r>:
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007470:	1ccd      	adds	r5, r1, #3
 8007472:	f025 0503 	bic.w	r5, r5, #3
 8007476:	3508      	adds	r5, #8
 8007478:	2d0c      	cmp	r5, #12
 800747a:	bf38      	it	cc
 800747c:	250c      	movcc	r5, #12
 800747e:	2d00      	cmp	r5, #0
 8007480:	4606      	mov	r6, r0
 8007482:	db01      	blt.n	8007488 <_malloc_r+0x1c>
 8007484:	42a9      	cmp	r1, r5
 8007486:	d904      	bls.n	8007492 <_malloc_r+0x26>
 8007488:	230c      	movs	r3, #12
 800748a:	6033      	str	r3, [r6, #0]
 800748c:	2000      	movs	r0, #0
 800748e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007492:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007568 <_malloc_r+0xfc>
 8007496:	f000 f869 	bl	800756c <__malloc_lock>
 800749a:	f8d8 3000 	ldr.w	r3, [r8]
 800749e:	461c      	mov	r4, r3
 80074a0:	bb44      	cbnz	r4, 80074f4 <_malloc_r+0x88>
 80074a2:	4629      	mov	r1, r5
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff ffbf 	bl	8007428 <sbrk_aligned>
 80074aa:	1c43      	adds	r3, r0, #1
 80074ac:	4604      	mov	r4, r0
 80074ae:	d158      	bne.n	8007562 <_malloc_r+0xf6>
 80074b0:	f8d8 4000 	ldr.w	r4, [r8]
 80074b4:	4627      	mov	r7, r4
 80074b6:	2f00      	cmp	r7, #0
 80074b8:	d143      	bne.n	8007542 <_malloc_r+0xd6>
 80074ba:	2c00      	cmp	r4, #0
 80074bc:	d04b      	beq.n	8007556 <_malloc_r+0xea>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	4639      	mov	r1, r7
 80074c2:	4630      	mov	r0, r6
 80074c4:	eb04 0903 	add.w	r9, r4, r3
 80074c8:	f000 f99e 	bl	8007808 <_sbrk_r>
 80074cc:	4581      	cmp	r9, r0
 80074ce:	d142      	bne.n	8007556 <_malloc_r+0xea>
 80074d0:	6821      	ldr	r1, [r4, #0]
 80074d2:	1a6d      	subs	r5, r5, r1
 80074d4:	4629      	mov	r1, r5
 80074d6:	4630      	mov	r0, r6
 80074d8:	f7ff ffa6 	bl	8007428 <sbrk_aligned>
 80074dc:	3001      	adds	r0, #1
 80074de:	d03a      	beq.n	8007556 <_malloc_r+0xea>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	442b      	add	r3, r5
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	f8d8 3000 	ldr.w	r3, [r8]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	bb62      	cbnz	r2, 8007548 <_malloc_r+0xdc>
 80074ee:	f8c8 7000 	str.w	r7, [r8]
 80074f2:	e00f      	b.n	8007514 <_malloc_r+0xa8>
 80074f4:	6822      	ldr	r2, [r4, #0]
 80074f6:	1b52      	subs	r2, r2, r5
 80074f8:	d420      	bmi.n	800753c <_malloc_r+0xd0>
 80074fa:	2a0b      	cmp	r2, #11
 80074fc:	d917      	bls.n	800752e <_malloc_r+0xc2>
 80074fe:	1961      	adds	r1, r4, r5
 8007500:	42a3      	cmp	r3, r4
 8007502:	6025      	str	r5, [r4, #0]
 8007504:	bf18      	it	ne
 8007506:	6059      	strne	r1, [r3, #4]
 8007508:	6863      	ldr	r3, [r4, #4]
 800750a:	bf08      	it	eq
 800750c:	f8c8 1000 	streq.w	r1, [r8]
 8007510:	5162      	str	r2, [r4, r5]
 8007512:	604b      	str	r3, [r1, #4]
 8007514:	4630      	mov	r0, r6
 8007516:	f000 f82f 	bl	8007578 <__malloc_unlock>
 800751a:	f104 000b 	add.w	r0, r4, #11
 800751e:	1d23      	adds	r3, r4, #4
 8007520:	f020 0007 	bic.w	r0, r0, #7
 8007524:	1ac2      	subs	r2, r0, r3
 8007526:	bf1c      	itt	ne
 8007528:	1a1b      	subne	r3, r3, r0
 800752a:	50a3      	strne	r3, [r4, r2]
 800752c:	e7af      	b.n	800748e <_malloc_r+0x22>
 800752e:	6862      	ldr	r2, [r4, #4]
 8007530:	42a3      	cmp	r3, r4
 8007532:	bf0c      	ite	eq
 8007534:	f8c8 2000 	streq.w	r2, [r8]
 8007538:	605a      	strne	r2, [r3, #4]
 800753a:	e7eb      	b.n	8007514 <_malloc_r+0xa8>
 800753c:	4623      	mov	r3, r4
 800753e:	6864      	ldr	r4, [r4, #4]
 8007540:	e7ae      	b.n	80074a0 <_malloc_r+0x34>
 8007542:	463c      	mov	r4, r7
 8007544:	687f      	ldr	r7, [r7, #4]
 8007546:	e7b6      	b.n	80074b6 <_malloc_r+0x4a>
 8007548:	461a      	mov	r2, r3
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	42a3      	cmp	r3, r4
 800754e:	d1fb      	bne.n	8007548 <_malloc_r+0xdc>
 8007550:	2300      	movs	r3, #0
 8007552:	6053      	str	r3, [r2, #4]
 8007554:	e7de      	b.n	8007514 <_malloc_r+0xa8>
 8007556:	230c      	movs	r3, #12
 8007558:	6033      	str	r3, [r6, #0]
 800755a:	4630      	mov	r0, r6
 800755c:	f000 f80c 	bl	8007578 <__malloc_unlock>
 8007560:	e794      	b.n	800748c <_malloc_r+0x20>
 8007562:	6005      	str	r5, [r0, #0]
 8007564:	e7d6      	b.n	8007514 <_malloc_r+0xa8>
 8007566:	bf00      	nop
 8007568:	20005044 	.word	0x20005044

0800756c <__malloc_lock>:
 800756c:	4801      	ldr	r0, [pc, #4]	@ (8007574 <__malloc_lock+0x8>)
 800756e:	f7ff beda 	b.w	8007326 <__retarget_lock_acquire_recursive>
 8007572:	bf00      	nop
 8007574:	2000503c 	.word	0x2000503c

08007578 <__malloc_unlock>:
 8007578:	4801      	ldr	r0, [pc, #4]	@ (8007580 <__malloc_unlock+0x8>)
 800757a:	f7ff bed5 	b.w	8007328 <__retarget_lock_release_recursive>
 800757e:	bf00      	nop
 8007580:	2000503c 	.word	0x2000503c

08007584 <__sflush_r>:
 8007584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758c:	0716      	lsls	r6, r2, #28
 800758e:	4605      	mov	r5, r0
 8007590:	460c      	mov	r4, r1
 8007592:	d454      	bmi.n	800763e <__sflush_r+0xba>
 8007594:	684b      	ldr	r3, [r1, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	dc02      	bgt.n	80075a0 <__sflush_r+0x1c>
 800759a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	dd48      	ble.n	8007632 <__sflush_r+0xae>
 80075a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075a2:	2e00      	cmp	r6, #0
 80075a4:	d045      	beq.n	8007632 <__sflush_r+0xae>
 80075a6:	2300      	movs	r3, #0
 80075a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075ac:	682f      	ldr	r7, [r5, #0]
 80075ae:	6a21      	ldr	r1, [r4, #32]
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	d030      	beq.n	8007616 <__sflush_r+0x92>
 80075b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	0759      	lsls	r1, r3, #29
 80075ba:	d505      	bpl.n	80075c8 <__sflush_r+0x44>
 80075bc:	6863      	ldr	r3, [r4, #4]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075c2:	b10b      	cbz	r3, 80075c8 <__sflush_r+0x44>
 80075c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075c6:	1ad2      	subs	r2, r2, r3
 80075c8:	2300      	movs	r3, #0
 80075ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075cc:	6a21      	ldr	r1, [r4, #32]
 80075ce:	4628      	mov	r0, r5
 80075d0:	47b0      	blx	r6
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	89a3      	ldrh	r3, [r4, #12]
 80075d6:	d106      	bne.n	80075e6 <__sflush_r+0x62>
 80075d8:	6829      	ldr	r1, [r5, #0]
 80075da:	291d      	cmp	r1, #29
 80075dc:	d82b      	bhi.n	8007636 <__sflush_r+0xb2>
 80075de:	4a2a      	ldr	r2, [pc, #168]	@ (8007688 <__sflush_r+0x104>)
 80075e0:	40ca      	lsrs	r2, r1
 80075e2:	07d6      	lsls	r6, r2, #31
 80075e4:	d527      	bpl.n	8007636 <__sflush_r+0xb2>
 80075e6:	2200      	movs	r2, #0
 80075e8:	6062      	str	r2, [r4, #4]
 80075ea:	04d9      	lsls	r1, r3, #19
 80075ec:	6922      	ldr	r2, [r4, #16]
 80075ee:	6022      	str	r2, [r4, #0]
 80075f0:	d504      	bpl.n	80075fc <__sflush_r+0x78>
 80075f2:	1c42      	adds	r2, r0, #1
 80075f4:	d101      	bne.n	80075fa <__sflush_r+0x76>
 80075f6:	682b      	ldr	r3, [r5, #0]
 80075f8:	b903      	cbnz	r3, 80075fc <__sflush_r+0x78>
 80075fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80075fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075fe:	602f      	str	r7, [r5, #0]
 8007600:	b1b9      	cbz	r1, 8007632 <__sflush_r+0xae>
 8007602:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007606:	4299      	cmp	r1, r3
 8007608:	d002      	beq.n	8007610 <__sflush_r+0x8c>
 800760a:	4628      	mov	r0, r5
 800760c:	f7ff feba 	bl	8007384 <_free_r>
 8007610:	2300      	movs	r3, #0
 8007612:	6363      	str	r3, [r4, #52]	@ 0x34
 8007614:	e00d      	b.n	8007632 <__sflush_r+0xae>
 8007616:	2301      	movs	r3, #1
 8007618:	4628      	mov	r0, r5
 800761a:	47b0      	blx	r6
 800761c:	4602      	mov	r2, r0
 800761e:	1c50      	adds	r0, r2, #1
 8007620:	d1c9      	bne.n	80075b6 <__sflush_r+0x32>
 8007622:	682b      	ldr	r3, [r5, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0c6      	beq.n	80075b6 <__sflush_r+0x32>
 8007628:	2b1d      	cmp	r3, #29
 800762a:	d001      	beq.n	8007630 <__sflush_r+0xac>
 800762c:	2b16      	cmp	r3, #22
 800762e:	d11e      	bne.n	800766e <__sflush_r+0xea>
 8007630:	602f      	str	r7, [r5, #0]
 8007632:	2000      	movs	r0, #0
 8007634:	e022      	b.n	800767c <__sflush_r+0xf8>
 8007636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800763a:	b21b      	sxth	r3, r3
 800763c:	e01b      	b.n	8007676 <__sflush_r+0xf2>
 800763e:	690f      	ldr	r7, [r1, #16]
 8007640:	2f00      	cmp	r7, #0
 8007642:	d0f6      	beq.n	8007632 <__sflush_r+0xae>
 8007644:	0793      	lsls	r3, r2, #30
 8007646:	680e      	ldr	r6, [r1, #0]
 8007648:	bf08      	it	eq
 800764a:	694b      	ldreq	r3, [r1, #20]
 800764c:	600f      	str	r7, [r1, #0]
 800764e:	bf18      	it	ne
 8007650:	2300      	movne	r3, #0
 8007652:	eba6 0807 	sub.w	r8, r6, r7
 8007656:	608b      	str	r3, [r1, #8]
 8007658:	f1b8 0f00 	cmp.w	r8, #0
 800765c:	dde9      	ble.n	8007632 <__sflush_r+0xae>
 800765e:	6a21      	ldr	r1, [r4, #32]
 8007660:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007662:	4643      	mov	r3, r8
 8007664:	463a      	mov	r2, r7
 8007666:	4628      	mov	r0, r5
 8007668:	47b0      	blx	r6
 800766a:	2800      	cmp	r0, #0
 800766c:	dc08      	bgt.n	8007680 <__sflush_r+0xfc>
 800766e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007680:	4407      	add	r7, r0
 8007682:	eba8 0800 	sub.w	r8, r8, r0
 8007686:	e7e7      	b.n	8007658 <__sflush_r+0xd4>
 8007688:	20400001 	.word	0x20400001

0800768c <_fflush_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	690b      	ldr	r3, [r1, #16]
 8007690:	4605      	mov	r5, r0
 8007692:	460c      	mov	r4, r1
 8007694:	b913      	cbnz	r3, 800769c <_fflush_r+0x10>
 8007696:	2500      	movs	r5, #0
 8007698:	4628      	mov	r0, r5
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	b118      	cbz	r0, 80076a6 <_fflush_r+0x1a>
 800769e:	6a03      	ldr	r3, [r0, #32]
 80076a0:	b90b      	cbnz	r3, 80076a6 <_fflush_r+0x1a>
 80076a2:	f7ff fc5b 	bl	8006f5c <__sinit>
 80076a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0f3      	beq.n	8007696 <_fflush_r+0xa>
 80076ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076b0:	07d0      	lsls	r0, r2, #31
 80076b2:	d404      	bmi.n	80076be <_fflush_r+0x32>
 80076b4:	0599      	lsls	r1, r3, #22
 80076b6:	d402      	bmi.n	80076be <_fflush_r+0x32>
 80076b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ba:	f7ff fe34 	bl	8007326 <__retarget_lock_acquire_recursive>
 80076be:	4628      	mov	r0, r5
 80076c0:	4621      	mov	r1, r4
 80076c2:	f7ff ff5f 	bl	8007584 <__sflush_r>
 80076c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076c8:	07da      	lsls	r2, r3, #31
 80076ca:	4605      	mov	r5, r0
 80076cc:	d4e4      	bmi.n	8007698 <_fflush_r+0xc>
 80076ce:	89a3      	ldrh	r3, [r4, #12]
 80076d0:	059b      	lsls	r3, r3, #22
 80076d2:	d4e1      	bmi.n	8007698 <_fflush_r+0xc>
 80076d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076d6:	f7ff fe27 	bl	8007328 <__retarget_lock_release_recursive>
 80076da:	e7dd      	b.n	8007698 <_fflush_r+0xc>

080076dc <fiprintf>:
 80076dc:	b40e      	push	{r1, r2, r3}
 80076de:	b503      	push	{r0, r1, lr}
 80076e0:	4601      	mov	r1, r0
 80076e2:	ab03      	add	r3, sp, #12
 80076e4:	4805      	ldr	r0, [pc, #20]	@ (80076fc <fiprintf+0x20>)
 80076e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ea:	6800      	ldr	r0, [r0, #0]
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	f000 f8cb 	bl	8007888 <_vfiprintf_r>
 80076f2:	b002      	add	sp, #8
 80076f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076f8:	b003      	add	sp, #12
 80076fa:	4770      	bx	lr
 80076fc:	20000050 	.word	0x20000050

08007700 <__swhatbuf_r>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	460c      	mov	r4, r1
 8007704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007708:	2900      	cmp	r1, #0
 800770a:	b096      	sub	sp, #88	@ 0x58
 800770c:	4615      	mov	r5, r2
 800770e:	461e      	mov	r6, r3
 8007710:	da0d      	bge.n	800772e <__swhatbuf_r+0x2e>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007718:	f04f 0100 	mov.w	r1, #0
 800771c:	bf14      	ite	ne
 800771e:	2340      	movne	r3, #64	@ 0x40
 8007720:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007724:	2000      	movs	r0, #0
 8007726:	6031      	str	r1, [r6, #0]
 8007728:	602b      	str	r3, [r5, #0]
 800772a:	b016      	add	sp, #88	@ 0x58
 800772c:	bd70      	pop	{r4, r5, r6, pc}
 800772e:	466a      	mov	r2, sp
 8007730:	f000 f848 	bl	80077c4 <_fstat_r>
 8007734:	2800      	cmp	r0, #0
 8007736:	dbec      	blt.n	8007712 <__swhatbuf_r+0x12>
 8007738:	9901      	ldr	r1, [sp, #4]
 800773a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800773e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007742:	4259      	negs	r1, r3
 8007744:	4159      	adcs	r1, r3
 8007746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800774a:	e7eb      	b.n	8007724 <__swhatbuf_r+0x24>

0800774c <__smakebuf_r>:
 800774c:	898b      	ldrh	r3, [r1, #12]
 800774e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007750:	079d      	lsls	r5, r3, #30
 8007752:	4606      	mov	r6, r0
 8007754:	460c      	mov	r4, r1
 8007756:	d507      	bpl.n	8007768 <__smakebuf_r+0x1c>
 8007758:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	6123      	str	r3, [r4, #16]
 8007760:	2301      	movs	r3, #1
 8007762:	6163      	str	r3, [r4, #20]
 8007764:	b003      	add	sp, #12
 8007766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007768:	ab01      	add	r3, sp, #4
 800776a:	466a      	mov	r2, sp
 800776c:	f7ff ffc8 	bl	8007700 <__swhatbuf_r>
 8007770:	9f00      	ldr	r7, [sp, #0]
 8007772:	4605      	mov	r5, r0
 8007774:	4639      	mov	r1, r7
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff fe78 	bl	800746c <_malloc_r>
 800777c:	b948      	cbnz	r0, 8007792 <__smakebuf_r+0x46>
 800777e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007782:	059a      	lsls	r2, r3, #22
 8007784:	d4ee      	bmi.n	8007764 <__smakebuf_r+0x18>
 8007786:	f023 0303 	bic.w	r3, r3, #3
 800778a:	f043 0302 	orr.w	r3, r3, #2
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	e7e2      	b.n	8007758 <__smakebuf_r+0xc>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	6020      	str	r0, [r4, #0]
 8007796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	9b01      	ldr	r3, [sp, #4]
 800779e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077a2:	b15b      	cbz	r3, 80077bc <__smakebuf_r+0x70>
 80077a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077a8:	4630      	mov	r0, r6
 80077aa:	f000 f81d 	bl	80077e8 <_isatty_r>
 80077ae:	b128      	cbz	r0, 80077bc <__smakebuf_r+0x70>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	431d      	orrs	r5, r3
 80077c0:	81a5      	strh	r5, [r4, #12]
 80077c2:	e7cf      	b.n	8007764 <__smakebuf_r+0x18>

080077c4 <_fstat_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4d07      	ldr	r5, [pc, #28]	@ (80077e4 <_fstat_r+0x20>)
 80077c8:	2300      	movs	r3, #0
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	4611      	mov	r1, r2
 80077d0:	602b      	str	r3, [r5, #0]
 80077d2:	f7fa f90d 	bl	80019f0 <_fstat>
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	d102      	bne.n	80077e0 <_fstat_r+0x1c>
 80077da:	682b      	ldr	r3, [r5, #0]
 80077dc:	b103      	cbz	r3, 80077e0 <_fstat_r+0x1c>
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	bf00      	nop
 80077e4:	20005038 	.word	0x20005038

080077e8 <_isatty_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4d06      	ldr	r5, [pc, #24]	@ (8007804 <_isatty_r+0x1c>)
 80077ec:	2300      	movs	r3, #0
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	f7fa f90c 	bl	8001a10 <_isatty>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_isatty_r+0x1a>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_isatty_r+0x1a>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	20005038 	.word	0x20005038

08007808 <_sbrk_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4d06      	ldr	r5, [pc, #24]	@ (8007824 <_sbrk_r+0x1c>)
 800780c:	2300      	movs	r3, #0
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	602b      	str	r3, [r5, #0]
 8007814:	f7fa f914 	bl	8001a40 <_sbrk>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_sbrk_r+0x1a>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_sbrk_r+0x1a>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20005038 	.word	0x20005038

08007828 <abort>:
 8007828:	b508      	push	{r3, lr}
 800782a:	2006      	movs	r0, #6
 800782c:	f000 faf8 	bl	8007e20 <raise>
 8007830:	2001      	movs	r0, #1
 8007832:	f7fa f88d 	bl	8001950 <_exit>

08007836 <__sfputc_r>:
 8007836:	6893      	ldr	r3, [r2, #8]
 8007838:	3b01      	subs	r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	b410      	push	{r4}
 800783e:	6093      	str	r3, [r2, #8]
 8007840:	da08      	bge.n	8007854 <__sfputc_r+0x1e>
 8007842:	6994      	ldr	r4, [r2, #24]
 8007844:	42a3      	cmp	r3, r4
 8007846:	db01      	blt.n	800784c <__sfputc_r+0x16>
 8007848:	290a      	cmp	r1, #10
 800784a:	d103      	bne.n	8007854 <__sfputc_r+0x1e>
 800784c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007850:	f7ff bc5b 	b.w	800710a <__swbuf_r>
 8007854:	6813      	ldr	r3, [r2, #0]
 8007856:	1c58      	adds	r0, r3, #1
 8007858:	6010      	str	r0, [r2, #0]
 800785a:	7019      	strb	r1, [r3, #0]
 800785c:	4608      	mov	r0, r1
 800785e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007862:	4770      	bx	lr

08007864 <__sfputs_r>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	4606      	mov	r6, r0
 8007868:	460f      	mov	r7, r1
 800786a:	4614      	mov	r4, r2
 800786c:	18d5      	adds	r5, r2, r3
 800786e:	42ac      	cmp	r4, r5
 8007870:	d101      	bne.n	8007876 <__sfputs_r+0x12>
 8007872:	2000      	movs	r0, #0
 8007874:	e007      	b.n	8007886 <__sfputs_r+0x22>
 8007876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800787a:	463a      	mov	r2, r7
 800787c:	4630      	mov	r0, r6
 800787e:	f7ff ffda 	bl	8007836 <__sfputc_r>
 8007882:	1c43      	adds	r3, r0, #1
 8007884:	d1f3      	bne.n	800786e <__sfputs_r+0xa>
 8007886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007888 <_vfiprintf_r>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	460d      	mov	r5, r1
 800788e:	b09d      	sub	sp, #116	@ 0x74
 8007890:	4614      	mov	r4, r2
 8007892:	4698      	mov	r8, r3
 8007894:	4606      	mov	r6, r0
 8007896:	b118      	cbz	r0, 80078a0 <_vfiprintf_r+0x18>
 8007898:	6a03      	ldr	r3, [r0, #32]
 800789a:	b90b      	cbnz	r3, 80078a0 <_vfiprintf_r+0x18>
 800789c:	f7ff fb5e 	bl	8006f5c <__sinit>
 80078a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078a2:	07d9      	lsls	r1, r3, #31
 80078a4:	d405      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	059a      	lsls	r2, r3, #22
 80078aa:	d402      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ae:	f7ff fd3a 	bl	8007326 <__retarget_lock_acquire_recursive>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	071b      	lsls	r3, r3, #28
 80078b6:	d501      	bpl.n	80078bc <_vfiprintf_r+0x34>
 80078b8:	692b      	ldr	r3, [r5, #16]
 80078ba:	b99b      	cbnz	r3, 80078e4 <_vfiprintf_r+0x5c>
 80078bc:	4629      	mov	r1, r5
 80078be:	4630      	mov	r0, r6
 80078c0:	f7ff fc62 	bl	8007188 <__swsetup_r>
 80078c4:	b170      	cbz	r0, 80078e4 <_vfiprintf_r+0x5c>
 80078c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078c8:	07dc      	lsls	r4, r3, #31
 80078ca:	d504      	bpl.n	80078d6 <_vfiprintf_r+0x4e>
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	b01d      	add	sp, #116	@ 0x74
 80078d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d6:	89ab      	ldrh	r3, [r5, #12]
 80078d8:	0598      	lsls	r0, r3, #22
 80078da:	d4f7      	bmi.n	80078cc <_vfiprintf_r+0x44>
 80078dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078de:	f7ff fd23 	bl	8007328 <__retarget_lock_release_recursive>
 80078e2:	e7f3      	b.n	80078cc <_vfiprintf_r+0x44>
 80078e4:	2300      	movs	r3, #0
 80078e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80078e8:	2320      	movs	r3, #32
 80078ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f2:	2330      	movs	r3, #48	@ 0x30
 80078f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007aa4 <_vfiprintf_r+0x21c>
 80078f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078fc:	f04f 0901 	mov.w	r9, #1
 8007900:	4623      	mov	r3, r4
 8007902:	469a      	mov	sl, r3
 8007904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007908:	b10a      	cbz	r2, 800790e <_vfiprintf_r+0x86>
 800790a:	2a25      	cmp	r2, #37	@ 0x25
 800790c:	d1f9      	bne.n	8007902 <_vfiprintf_r+0x7a>
 800790e:	ebba 0b04 	subs.w	fp, sl, r4
 8007912:	d00b      	beq.n	800792c <_vfiprintf_r+0xa4>
 8007914:	465b      	mov	r3, fp
 8007916:	4622      	mov	r2, r4
 8007918:	4629      	mov	r1, r5
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff ffa2 	bl	8007864 <__sfputs_r>
 8007920:	3001      	adds	r0, #1
 8007922:	f000 80a7 	beq.w	8007a74 <_vfiprintf_r+0x1ec>
 8007926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007928:	445a      	add	r2, fp
 800792a:	9209      	str	r2, [sp, #36]	@ 0x24
 800792c:	f89a 3000 	ldrb.w	r3, [sl]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 809f 	beq.w	8007a74 <_vfiprintf_r+0x1ec>
 8007936:	2300      	movs	r3, #0
 8007938:	f04f 32ff 	mov.w	r2, #4294967295
 800793c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007940:	f10a 0a01 	add.w	sl, sl, #1
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800794c:	931a      	str	r3, [sp, #104]	@ 0x68
 800794e:	4654      	mov	r4, sl
 8007950:	2205      	movs	r2, #5
 8007952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007956:	4853      	ldr	r0, [pc, #332]	@ (8007aa4 <_vfiprintf_r+0x21c>)
 8007958:	f7f8 fc5a 	bl	8000210 <memchr>
 800795c:	9a04      	ldr	r2, [sp, #16]
 800795e:	b9d8      	cbnz	r0, 8007998 <_vfiprintf_r+0x110>
 8007960:	06d1      	lsls	r1, r2, #27
 8007962:	bf44      	itt	mi
 8007964:	2320      	movmi	r3, #32
 8007966:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800796a:	0713      	lsls	r3, r2, #28
 800796c:	bf44      	itt	mi
 800796e:	232b      	movmi	r3, #43	@ 0x2b
 8007970:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007974:	f89a 3000 	ldrb.w	r3, [sl]
 8007978:	2b2a      	cmp	r3, #42	@ 0x2a
 800797a:	d015      	beq.n	80079a8 <_vfiprintf_r+0x120>
 800797c:	9a07      	ldr	r2, [sp, #28]
 800797e:	4654      	mov	r4, sl
 8007980:	2000      	movs	r0, #0
 8007982:	f04f 0c0a 	mov.w	ip, #10
 8007986:	4621      	mov	r1, r4
 8007988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798c:	3b30      	subs	r3, #48	@ 0x30
 800798e:	2b09      	cmp	r3, #9
 8007990:	d94b      	bls.n	8007a2a <_vfiprintf_r+0x1a2>
 8007992:	b1b0      	cbz	r0, 80079c2 <_vfiprintf_r+0x13a>
 8007994:	9207      	str	r2, [sp, #28]
 8007996:	e014      	b.n	80079c2 <_vfiprintf_r+0x13a>
 8007998:	eba0 0308 	sub.w	r3, r0, r8
 800799c:	fa09 f303 	lsl.w	r3, r9, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	46a2      	mov	sl, r4
 80079a6:	e7d2      	b.n	800794e <_vfiprintf_r+0xc6>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	1d19      	adds	r1, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	9103      	str	r1, [sp, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfbb      	ittet	lt
 80079b4:	425b      	neglt	r3, r3
 80079b6:	f042 0202 	orrlt.w	r2, r2, #2
 80079ba:	9307      	strge	r3, [sp, #28]
 80079bc:	9307      	strlt	r3, [sp, #28]
 80079be:	bfb8      	it	lt
 80079c0:	9204      	strlt	r2, [sp, #16]
 80079c2:	7823      	ldrb	r3, [r4, #0]
 80079c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80079c6:	d10a      	bne.n	80079de <_vfiprintf_r+0x156>
 80079c8:	7863      	ldrb	r3, [r4, #1]
 80079ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80079cc:	d132      	bne.n	8007a34 <_vfiprintf_r+0x1ac>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	9203      	str	r2, [sp, #12]
 80079d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079da:	3402      	adds	r4, #2
 80079dc:	9305      	str	r3, [sp, #20]
 80079de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ab4 <_vfiprintf_r+0x22c>
 80079e2:	7821      	ldrb	r1, [r4, #0]
 80079e4:	2203      	movs	r2, #3
 80079e6:	4650      	mov	r0, sl
 80079e8:	f7f8 fc12 	bl	8000210 <memchr>
 80079ec:	b138      	cbz	r0, 80079fe <_vfiprintf_r+0x176>
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	eba0 000a 	sub.w	r0, r0, sl
 80079f4:	2240      	movs	r2, #64	@ 0x40
 80079f6:	4082      	lsls	r2, r0
 80079f8:	4313      	orrs	r3, r2
 80079fa:	3401      	adds	r4, #1
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a02:	4829      	ldr	r0, [pc, #164]	@ (8007aa8 <_vfiprintf_r+0x220>)
 8007a04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a08:	2206      	movs	r2, #6
 8007a0a:	f7f8 fc01 	bl	8000210 <memchr>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d03f      	beq.n	8007a92 <_vfiprintf_r+0x20a>
 8007a12:	4b26      	ldr	r3, [pc, #152]	@ (8007aac <_vfiprintf_r+0x224>)
 8007a14:	bb1b      	cbnz	r3, 8007a5e <_vfiprintf_r+0x1d6>
 8007a16:	9b03      	ldr	r3, [sp, #12]
 8007a18:	3307      	adds	r3, #7
 8007a1a:	f023 0307 	bic.w	r3, r3, #7
 8007a1e:	3308      	adds	r3, #8
 8007a20:	9303      	str	r3, [sp, #12]
 8007a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a24:	443b      	add	r3, r7
 8007a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a28:	e76a      	b.n	8007900 <_vfiprintf_r+0x78>
 8007a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a2e:	460c      	mov	r4, r1
 8007a30:	2001      	movs	r0, #1
 8007a32:	e7a8      	b.n	8007986 <_vfiprintf_r+0xfe>
 8007a34:	2300      	movs	r3, #0
 8007a36:	3401      	adds	r4, #1
 8007a38:	9305      	str	r3, [sp, #20]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	f04f 0c0a 	mov.w	ip, #10
 8007a40:	4620      	mov	r0, r4
 8007a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a46:	3a30      	subs	r2, #48	@ 0x30
 8007a48:	2a09      	cmp	r2, #9
 8007a4a:	d903      	bls.n	8007a54 <_vfiprintf_r+0x1cc>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0c6      	beq.n	80079de <_vfiprintf_r+0x156>
 8007a50:	9105      	str	r1, [sp, #20]
 8007a52:	e7c4      	b.n	80079de <_vfiprintf_r+0x156>
 8007a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a58:	4604      	mov	r4, r0
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e7f0      	b.n	8007a40 <_vfiprintf_r+0x1b8>
 8007a5e:	ab03      	add	r3, sp, #12
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	462a      	mov	r2, r5
 8007a64:	4b12      	ldr	r3, [pc, #72]	@ (8007ab0 <_vfiprintf_r+0x228>)
 8007a66:	a904      	add	r1, sp, #16
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f3af 8000 	nop.w
 8007a6e:	4607      	mov	r7, r0
 8007a70:	1c78      	adds	r0, r7, #1
 8007a72:	d1d6      	bne.n	8007a22 <_vfiprintf_r+0x19a>
 8007a74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a76:	07d9      	lsls	r1, r3, #31
 8007a78:	d405      	bmi.n	8007a86 <_vfiprintf_r+0x1fe>
 8007a7a:	89ab      	ldrh	r3, [r5, #12]
 8007a7c:	059a      	lsls	r2, r3, #22
 8007a7e:	d402      	bmi.n	8007a86 <_vfiprintf_r+0x1fe>
 8007a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a82:	f7ff fc51 	bl	8007328 <__retarget_lock_release_recursive>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	065b      	lsls	r3, r3, #25
 8007a8a:	f53f af1f 	bmi.w	80078cc <_vfiprintf_r+0x44>
 8007a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a90:	e71e      	b.n	80078d0 <_vfiprintf_r+0x48>
 8007a92:	ab03      	add	r3, sp, #12
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	462a      	mov	r2, r5
 8007a98:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <_vfiprintf_r+0x228>)
 8007a9a:	a904      	add	r1, sp, #16
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 f879 	bl	8007b94 <_printf_i>
 8007aa2:	e7e4      	b.n	8007a6e <_vfiprintf_r+0x1e6>
 8007aa4:	080084c5 	.word	0x080084c5
 8007aa8:	080084cf 	.word	0x080084cf
 8007aac:	00000000 	.word	0x00000000
 8007ab0:	08007865 	.word	0x08007865
 8007ab4:	080084cb 	.word	0x080084cb

08007ab8 <_printf_common>:
 8007ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007abc:	4616      	mov	r6, r2
 8007abe:	4698      	mov	r8, r3
 8007ac0:	688a      	ldr	r2, [r1, #8]
 8007ac2:	690b      	ldr	r3, [r1, #16]
 8007ac4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	bfb8      	it	lt
 8007acc:	4613      	movlt	r3, r2
 8007ace:	6033      	str	r3, [r6, #0]
 8007ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	b10a      	cbz	r2, 8007ade <_printf_common+0x26>
 8007ada:	3301      	adds	r3, #1
 8007adc:	6033      	str	r3, [r6, #0]
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	0699      	lsls	r1, r3, #26
 8007ae2:	bf42      	ittt	mi
 8007ae4:	6833      	ldrmi	r3, [r6, #0]
 8007ae6:	3302      	addmi	r3, #2
 8007ae8:	6033      	strmi	r3, [r6, #0]
 8007aea:	6825      	ldr	r5, [r4, #0]
 8007aec:	f015 0506 	ands.w	r5, r5, #6
 8007af0:	d106      	bne.n	8007b00 <_printf_common+0x48>
 8007af2:	f104 0a19 	add.w	sl, r4, #25
 8007af6:	68e3      	ldr	r3, [r4, #12]
 8007af8:	6832      	ldr	r2, [r6, #0]
 8007afa:	1a9b      	subs	r3, r3, r2
 8007afc:	42ab      	cmp	r3, r5
 8007afe:	dc26      	bgt.n	8007b4e <_printf_common+0x96>
 8007b00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b04:	6822      	ldr	r2, [r4, #0]
 8007b06:	3b00      	subs	r3, #0
 8007b08:	bf18      	it	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	0692      	lsls	r2, r2, #26
 8007b0e:	d42b      	bmi.n	8007b68 <_printf_common+0xb0>
 8007b10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b14:	4641      	mov	r1, r8
 8007b16:	4638      	mov	r0, r7
 8007b18:	47c8      	blx	r9
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d01e      	beq.n	8007b5c <_printf_common+0xa4>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	6922      	ldr	r2, [r4, #16]
 8007b22:	f003 0306 	and.w	r3, r3, #6
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	bf02      	ittt	eq
 8007b2a:	68e5      	ldreq	r5, [r4, #12]
 8007b2c:	6833      	ldreq	r3, [r6, #0]
 8007b2e:	1aed      	subeq	r5, r5, r3
 8007b30:	68a3      	ldr	r3, [r4, #8]
 8007b32:	bf0c      	ite	eq
 8007b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b38:	2500      	movne	r5, #0
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	bfc4      	itt	gt
 8007b3e:	1a9b      	subgt	r3, r3, r2
 8007b40:	18ed      	addgt	r5, r5, r3
 8007b42:	2600      	movs	r6, #0
 8007b44:	341a      	adds	r4, #26
 8007b46:	42b5      	cmp	r5, r6
 8007b48:	d11a      	bne.n	8007b80 <_printf_common+0xc8>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e008      	b.n	8007b60 <_printf_common+0xa8>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4652      	mov	r2, sl
 8007b52:	4641      	mov	r1, r8
 8007b54:	4638      	mov	r0, r7
 8007b56:	47c8      	blx	r9
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d103      	bne.n	8007b64 <_printf_common+0xac>
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b64:	3501      	adds	r5, #1
 8007b66:	e7c6      	b.n	8007af6 <_printf_common+0x3e>
 8007b68:	18e1      	adds	r1, r4, r3
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	2030      	movs	r0, #48	@ 0x30
 8007b6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b72:	4422      	add	r2, r4
 8007b74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b7c:	3302      	adds	r3, #2
 8007b7e:	e7c7      	b.n	8007b10 <_printf_common+0x58>
 8007b80:	2301      	movs	r3, #1
 8007b82:	4622      	mov	r2, r4
 8007b84:	4641      	mov	r1, r8
 8007b86:	4638      	mov	r0, r7
 8007b88:	47c8      	blx	r9
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d0e6      	beq.n	8007b5c <_printf_common+0xa4>
 8007b8e:	3601      	adds	r6, #1
 8007b90:	e7d9      	b.n	8007b46 <_printf_common+0x8e>
	...

08007b94 <_printf_i>:
 8007b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b98:	7e0f      	ldrb	r7, [r1, #24]
 8007b9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b9c:	2f78      	cmp	r7, #120	@ 0x78
 8007b9e:	4691      	mov	r9, r2
 8007ba0:	4680      	mov	r8, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	469a      	mov	sl, r3
 8007ba6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007baa:	d807      	bhi.n	8007bbc <_printf_i+0x28>
 8007bac:	2f62      	cmp	r7, #98	@ 0x62
 8007bae:	d80a      	bhi.n	8007bc6 <_printf_i+0x32>
 8007bb0:	2f00      	cmp	r7, #0
 8007bb2:	f000 80d1 	beq.w	8007d58 <_printf_i+0x1c4>
 8007bb6:	2f58      	cmp	r7, #88	@ 0x58
 8007bb8:	f000 80b8 	beq.w	8007d2c <_printf_i+0x198>
 8007bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007bc4:	e03a      	b.n	8007c3c <_printf_i+0xa8>
 8007bc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007bca:	2b15      	cmp	r3, #21
 8007bcc:	d8f6      	bhi.n	8007bbc <_printf_i+0x28>
 8007bce:	a101      	add	r1, pc, #4	@ (adr r1, 8007bd4 <_printf_i+0x40>)
 8007bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bd4:	08007c2d 	.word	0x08007c2d
 8007bd8:	08007c41 	.word	0x08007c41
 8007bdc:	08007bbd 	.word	0x08007bbd
 8007be0:	08007bbd 	.word	0x08007bbd
 8007be4:	08007bbd 	.word	0x08007bbd
 8007be8:	08007bbd 	.word	0x08007bbd
 8007bec:	08007c41 	.word	0x08007c41
 8007bf0:	08007bbd 	.word	0x08007bbd
 8007bf4:	08007bbd 	.word	0x08007bbd
 8007bf8:	08007bbd 	.word	0x08007bbd
 8007bfc:	08007bbd 	.word	0x08007bbd
 8007c00:	08007d3f 	.word	0x08007d3f
 8007c04:	08007c6b 	.word	0x08007c6b
 8007c08:	08007cf9 	.word	0x08007cf9
 8007c0c:	08007bbd 	.word	0x08007bbd
 8007c10:	08007bbd 	.word	0x08007bbd
 8007c14:	08007d61 	.word	0x08007d61
 8007c18:	08007bbd 	.word	0x08007bbd
 8007c1c:	08007c6b 	.word	0x08007c6b
 8007c20:	08007bbd 	.word	0x08007bbd
 8007c24:	08007bbd 	.word	0x08007bbd
 8007c28:	08007d01 	.word	0x08007d01
 8007c2c:	6833      	ldr	r3, [r6, #0]
 8007c2e:	1d1a      	adds	r2, r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6032      	str	r2, [r6, #0]
 8007c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e09c      	b.n	8007d7a <_printf_i+0x1e6>
 8007c40:	6833      	ldr	r3, [r6, #0]
 8007c42:	6820      	ldr	r0, [r4, #0]
 8007c44:	1d19      	adds	r1, r3, #4
 8007c46:	6031      	str	r1, [r6, #0]
 8007c48:	0606      	lsls	r6, r0, #24
 8007c4a:	d501      	bpl.n	8007c50 <_printf_i+0xbc>
 8007c4c:	681d      	ldr	r5, [r3, #0]
 8007c4e:	e003      	b.n	8007c58 <_printf_i+0xc4>
 8007c50:	0645      	lsls	r5, r0, #25
 8007c52:	d5fb      	bpl.n	8007c4c <_printf_i+0xb8>
 8007c54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	da03      	bge.n	8007c64 <_printf_i+0xd0>
 8007c5c:	232d      	movs	r3, #45	@ 0x2d
 8007c5e:	426d      	negs	r5, r5
 8007c60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c64:	4858      	ldr	r0, [pc, #352]	@ (8007dc8 <_printf_i+0x234>)
 8007c66:	230a      	movs	r3, #10
 8007c68:	e011      	b.n	8007c8e <_printf_i+0xfa>
 8007c6a:	6821      	ldr	r1, [r4, #0]
 8007c6c:	6833      	ldr	r3, [r6, #0]
 8007c6e:	0608      	lsls	r0, r1, #24
 8007c70:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c74:	d402      	bmi.n	8007c7c <_printf_i+0xe8>
 8007c76:	0649      	lsls	r1, r1, #25
 8007c78:	bf48      	it	mi
 8007c7a:	b2ad      	uxthmi	r5, r5
 8007c7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c7e:	4852      	ldr	r0, [pc, #328]	@ (8007dc8 <_printf_i+0x234>)
 8007c80:	6033      	str	r3, [r6, #0]
 8007c82:	bf14      	ite	ne
 8007c84:	230a      	movne	r3, #10
 8007c86:	2308      	moveq	r3, #8
 8007c88:	2100      	movs	r1, #0
 8007c8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c8e:	6866      	ldr	r6, [r4, #4]
 8007c90:	60a6      	str	r6, [r4, #8]
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	db05      	blt.n	8007ca2 <_printf_i+0x10e>
 8007c96:	6821      	ldr	r1, [r4, #0]
 8007c98:	432e      	orrs	r6, r5
 8007c9a:	f021 0104 	bic.w	r1, r1, #4
 8007c9e:	6021      	str	r1, [r4, #0]
 8007ca0:	d04b      	beq.n	8007d3a <_printf_i+0x1a6>
 8007ca2:	4616      	mov	r6, r2
 8007ca4:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ca8:	fb03 5711 	mls	r7, r3, r1, r5
 8007cac:	5dc7      	ldrb	r7, [r0, r7]
 8007cae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cb2:	462f      	mov	r7, r5
 8007cb4:	42bb      	cmp	r3, r7
 8007cb6:	460d      	mov	r5, r1
 8007cb8:	d9f4      	bls.n	8007ca4 <_printf_i+0x110>
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d10b      	bne.n	8007cd6 <_printf_i+0x142>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	07df      	lsls	r7, r3, #31
 8007cc2:	d508      	bpl.n	8007cd6 <_printf_i+0x142>
 8007cc4:	6923      	ldr	r3, [r4, #16]
 8007cc6:	6861      	ldr	r1, [r4, #4]
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	bfde      	ittt	le
 8007ccc:	2330      	movle	r3, #48	@ 0x30
 8007cce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cd6:	1b92      	subs	r2, r2, r6
 8007cd8:	6122      	str	r2, [r4, #16]
 8007cda:	f8cd a000 	str.w	sl, [sp]
 8007cde:	464b      	mov	r3, r9
 8007ce0:	aa03      	add	r2, sp, #12
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	f7ff fee7 	bl	8007ab8 <_printf_common>
 8007cea:	3001      	adds	r0, #1
 8007cec:	d14a      	bne.n	8007d84 <_printf_i+0x1f0>
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	b004      	add	sp, #16
 8007cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	f043 0320 	orr.w	r3, r3, #32
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	4832      	ldr	r0, [pc, #200]	@ (8007dcc <_printf_i+0x238>)
 8007d02:	2778      	movs	r7, #120	@ 0x78
 8007d04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	6831      	ldr	r1, [r6, #0]
 8007d0c:	061f      	lsls	r7, r3, #24
 8007d0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d12:	d402      	bmi.n	8007d1a <_printf_i+0x186>
 8007d14:	065f      	lsls	r7, r3, #25
 8007d16:	bf48      	it	mi
 8007d18:	b2ad      	uxthmi	r5, r5
 8007d1a:	6031      	str	r1, [r6, #0]
 8007d1c:	07d9      	lsls	r1, r3, #31
 8007d1e:	bf44      	itt	mi
 8007d20:	f043 0320 	orrmi.w	r3, r3, #32
 8007d24:	6023      	strmi	r3, [r4, #0]
 8007d26:	b11d      	cbz	r5, 8007d30 <_printf_i+0x19c>
 8007d28:	2310      	movs	r3, #16
 8007d2a:	e7ad      	b.n	8007c88 <_printf_i+0xf4>
 8007d2c:	4826      	ldr	r0, [pc, #152]	@ (8007dc8 <_printf_i+0x234>)
 8007d2e:	e7e9      	b.n	8007d04 <_printf_i+0x170>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	f023 0320 	bic.w	r3, r3, #32
 8007d36:	6023      	str	r3, [r4, #0]
 8007d38:	e7f6      	b.n	8007d28 <_printf_i+0x194>
 8007d3a:	4616      	mov	r6, r2
 8007d3c:	e7bd      	b.n	8007cba <_printf_i+0x126>
 8007d3e:	6833      	ldr	r3, [r6, #0]
 8007d40:	6825      	ldr	r5, [r4, #0]
 8007d42:	6961      	ldr	r1, [r4, #20]
 8007d44:	1d18      	adds	r0, r3, #4
 8007d46:	6030      	str	r0, [r6, #0]
 8007d48:	062e      	lsls	r6, r5, #24
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	d501      	bpl.n	8007d52 <_printf_i+0x1be>
 8007d4e:	6019      	str	r1, [r3, #0]
 8007d50:	e002      	b.n	8007d58 <_printf_i+0x1c4>
 8007d52:	0668      	lsls	r0, r5, #25
 8007d54:	d5fb      	bpl.n	8007d4e <_printf_i+0x1ba>
 8007d56:	8019      	strh	r1, [r3, #0]
 8007d58:	2300      	movs	r3, #0
 8007d5a:	6123      	str	r3, [r4, #16]
 8007d5c:	4616      	mov	r6, r2
 8007d5e:	e7bc      	b.n	8007cda <_printf_i+0x146>
 8007d60:	6833      	ldr	r3, [r6, #0]
 8007d62:	1d1a      	adds	r2, r3, #4
 8007d64:	6032      	str	r2, [r6, #0]
 8007d66:	681e      	ldr	r6, [r3, #0]
 8007d68:	6862      	ldr	r2, [r4, #4]
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7f8 fa4f 	bl	8000210 <memchr>
 8007d72:	b108      	cbz	r0, 8007d78 <_printf_i+0x1e4>
 8007d74:	1b80      	subs	r0, r0, r6
 8007d76:	6060      	str	r0, [r4, #4]
 8007d78:	6863      	ldr	r3, [r4, #4]
 8007d7a:	6123      	str	r3, [r4, #16]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d82:	e7aa      	b.n	8007cda <_printf_i+0x146>
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	4632      	mov	r2, r6
 8007d88:	4649      	mov	r1, r9
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	47d0      	blx	sl
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d0ad      	beq.n	8007cee <_printf_i+0x15a>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	079b      	lsls	r3, r3, #30
 8007d96:	d413      	bmi.n	8007dc0 <_printf_i+0x22c>
 8007d98:	68e0      	ldr	r0, [r4, #12]
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	4298      	cmp	r0, r3
 8007d9e:	bfb8      	it	lt
 8007da0:	4618      	movlt	r0, r3
 8007da2:	e7a6      	b.n	8007cf2 <_printf_i+0x15e>
 8007da4:	2301      	movs	r3, #1
 8007da6:	4632      	mov	r2, r6
 8007da8:	4649      	mov	r1, r9
 8007daa:	4640      	mov	r0, r8
 8007dac:	47d0      	blx	sl
 8007dae:	3001      	adds	r0, #1
 8007db0:	d09d      	beq.n	8007cee <_printf_i+0x15a>
 8007db2:	3501      	adds	r5, #1
 8007db4:	68e3      	ldr	r3, [r4, #12]
 8007db6:	9903      	ldr	r1, [sp, #12]
 8007db8:	1a5b      	subs	r3, r3, r1
 8007dba:	42ab      	cmp	r3, r5
 8007dbc:	dcf2      	bgt.n	8007da4 <_printf_i+0x210>
 8007dbe:	e7eb      	b.n	8007d98 <_printf_i+0x204>
 8007dc0:	2500      	movs	r5, #0
 8007dc2:	f104 0619 	add.w	r6, r4, #25
 8007dc6:	e7f5      	b.n	8007db4 <_printf_i+0x220>
 8007dc8:	080084d6 	.word	0x080084d6
 8007dcc:	080084e7 	.word	0x080084e7

08007dd0 <_raise_r>:
 8007dd0:	291f      	cmp	r1, #31
 8007dd2:	b538      	push	{r3, r4, r5, lr}
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	d904      	bls.n	8007de4 <_raise_r+0x14>
 8007dda:	2316      	movs	r3, #22
 8007ddc:	6003      	str	r3, [r0, #0]
 8007dde:	f04f 30ff 	mov.w	r0, #4294967295
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007de6:	b112      	cbz	r2, 8007dee <_raise_r+0x1e>
 8007de8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dec:	b94b      	cbnz	r3, 8007e02 <_raise_r+0x32>
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 f830 	bl	8007e54 <_getpid_r>
 8007df4:	4622      	mov	r2, r4
 8007df6:	4601      	mov	r1, r0
 8007df8:	4628      	mov	r0, r5
 8007dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dfe:	f000 b817 	b.w	8007e30 <_kill_r>
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d00a      	beq.n	8007e1c <_raise_r+0x4c>
 8007e06:	1c59      	adds	r1, r3, #1
 8007e08:	d103      	bne.n	8007e12 <_raise_r+0x42>
 8007e0a:	2316      	movs	r3, #22
 8007e0c:	6003      	str	r3, [r0, #0]
 8007e0e:	2001      	movs	r0, #1
 8007e10:	e7e7      	b.n	8007de2 <_raise_r+0x12>
 8007e12:	2100      	movs	r1, #0
 8007e14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007e18:	4620      	mov	r0, r4
 8007e1a:	4798      	blx	r3
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e7e0      	b.n	8007de2 <_raise_r+0x12>

08007e20 <raise>:
 8007e20:	4b02      	ldr	r3, [pc, #8]	@ (8007e2c <raise+0xc>)
 8007e22:	4601      	mov	r1, r0
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	f7ff bfd3 	b.w	8007dd0 <_raise_r>
 8007e2a:	bf00      	nop
 8007e2c:	20000050 	.word	0x20000050

08007e30 <_kill_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4d07      	ldr	r5, [pc, #28]	@ (8007e50 <_kill_r+0x20>)
 8007e34:	2300      	movs	r3, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	4608      	mov	r0, r1
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	602b      	str	r3, [r5, #0]
 8007e3e:	f7f9 fd77 	bl	8001930 <_kill>
 8007e42:	1c43      	adds	r3, r0, #1
 8007e44:	d102      	bne.n	8007e4c <_kill_r+0x1c>
 8007e46:	682b      	ldr	r3, [r5, #0]
 8007e48:	b103      	cbz	r3, 8007e4c <_kill_r+0x1c>
 8007e4a:	6023      	str	r3, [r4, #0]
 8007e4c:	bd38      	pop	{r3, r4, r5, pc}
 8007e4e:	bf00      	nop
 8007e50:	20005038 	.word	0x20005038

08007e54 <_getpid_r>:
 8007e54:	f7f9 bd64 	b.w	8001920 <_getpid>

08007e58 <_init>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	bf00      	nop
 8007e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5e:	bc08      	pop	{r3}
 8007e60:	469e      	mov	lr, r3
 8007e62:	4770      	bx	lr

08007e64 <_fini>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	bf00      	nop
 8007e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6a:	bc08      	pop	{r3}
 8007e6c:	469e      	mov	lr, r3
 8007e6e:	4770      	bx	lr
