
GLCD12864B_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c48  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  08006e18  08006e18  00007e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d0  080075d0  000090a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080075d0  080075d0  000085d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075d8  080075d8  000090a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d8  080075d8  000085d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075dc  080075dc  000085dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080075e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c4  200000a0  08007680  000090a0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20001664  08007680  00009664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cca7  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260b  00000000  00000000  00015d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00018388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022da6  00000000  00000000  00019058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010d6c  00000000  00000000  0003bdfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d13fc  00000000  00000000  0004cb6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0011df66  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000009c7  00000000  00000000  0011dfa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fc0  00000000  00000000  0011e970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00122930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e00 	.word	0x08006e00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08006e00 	.word	0x08006e00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <delay_init>:

extern TIM_HandleTypeDef htim2;


void delay_init()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);  // change this according to ur setup
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <delay_init+0x10>)
 8000dae:	f002 fea9 	bl	8003b04 <HAL_TIM_Base_Start>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200014cc 	.word	0x200014cc

08000dbc <delay_us>:

void delay_us (uint16_t delay)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset the counter
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <delay_us+0x30>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<delay);  // wait for the delay to complete
 8000dce:	bf00      	nop
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <delay_us+0x30>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d3f9      	bcc.n	8000dd0 <delay_us+0x14>
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200014cc 	.word	0x200014cc

08000df0 <delay_ms>:

void delay_ms(uint16_t delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay (delay);  // better use HAL_DElay in millis
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fcc1 	bl	8002784 <HAL_Delay>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <setPixel>:
/////////////////////////////////////

uint8_t framebuffer[64][16]={0};  // 64 rows, 128/8 = 16 columns


void setPixel(uint8_t x, uint8_t y, uint8_t color) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	460b      	mov	r3, r1
 8000e18:	71bb      	strb	r3, [r7, #6]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	717b      	strb	r3, [r7, #5]
    if (x >= 64 || y >= 128) return;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e22:	d843      	bhi.n	8000eac <setPixel+0xa0>
 8000e24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db3f      	blt.n	8000eac <setPixel+0xa0>
    uint8_t page = y / 8;
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	73fb      	strb	r3, [r7, #15]
    uint8_t bit  = 7 - (y % 8);  // top row is bit 7
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	73bb      	strb	r3, [r7, #14]
    if (color)
 8000e3e:	797b      	ldrb	r3, [r7, #5]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d018      	beq.n	8000e76 <setPixel+0x6a>
        framebuffer[x][page] |=  (1 << bit);
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	491b      	ldr	r1, [pc, #108]	@ (8000eb8 <setPixel+0xac>)
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	440a      	add	r2, r1
 8000e4e:	4413      	add	r3, r2
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b25a      	sxtb	r2, r3
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	2101      	movs	r1, #1
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b259      	sxtb	r1, r3
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	b2c8      	uxtb	r0, r1
 8000e68:	4913      	ldr	r1, [pc, #76]	@ (8000eb8 <setPixel+0xac>)
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	440a      	add	r2, r1
 8000e6e:	4413      	add	r3, r2
 8000e70:	4602      	mov	r2, r0
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e01b      	b.n	8000eae <setPixel+0xa2>
    else
        framebuffer[x][page] &= ~(1 << bit);
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	490f      	ldr	r1, [pc, #60]	@ (8000eb8 <setPixel+0xac>)
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	440a      	add	r2, r1
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b25a      	sxtb	r2, r3
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	4013      	ands	r3, r2
 8000e96:	b259      	sxtb	r1, r3
 8000e98:	79fa      	ldrb	r2, [r7, #7]
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	b2c8      	uxtb	r0, r1
 8000e9e:	4906      	ldr	r1, [pc, #24]	@ (8000eb8 <setPixel+0xac>)
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	440a      	add	r2, r1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e000      	b.n	8000eae <setPixel+0xa2>
    if (x >= 64 || y >= 128) return;
 8000eac:	bf00      	nop
}
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	200000bc 	.word	0x200000bc

08000ebc <lcd_write>:
//Write instruction (code==0) or data (code==1) to LCD
void lcd_write(char lcdmode, unsigned char value)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	71bb      	strb	r3, [r7, #6]
//	for(int i = 0; i < 8; i++) {
//	    MX_GPIO_Pin_Mode(LCD_DATA_GPIO, pin, 0);
//	    pin <<= 1;  // Shift left by 1 for next iteration
//	}

	MX_GPIO_Pin_Mode(LCD_D0_GPIO_Port, LCD_D0_Pin, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4847      	ldr	r0, [pc, #284]	@ (8000ff0 <lcd_write+0x134>)
 8000ed2:	f000 fe1d 	bl	8001b10 <MX_GPIO_Pin_Mode>
	MX_GPIO_Pin_Mode(LCD_D1_GPIO_Port, LCD_D1_Pin, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4845      	ldr	r0, [pc, #276]	@ (8000ff0 <lcd_write+0x134>)
 8000edc:	f000 fe18 	bl	8001b10 <MX_GPIO_Pin_Mode>
	MX_GPIO_Pin_Mode(LCD_D2_GPIO_Port, LCD_D2_Pin, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	4842      	ldr	r0, [pc, #264]	@ (8000ff0 <lcd_write+0x134>)
 8000ee6:	f000 fe13 	bl	8001b10 <MX_GPIO_Pin_Mode>
	MX_GPIO_Pin_Mode(LCD_D3_GPIO_Port, LCD_D3_Pin, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2108      	movs	r1, #8
 8000eee:	4840      	ldr	r0, [pc, #256]	@ (8000ff0 <lcd_write+0x134>)
 8000ef0:	f000 fe0e 	bl	8001b10 <MX_GPIO_Pin_Mode>
	MX_GPIO_Pin_Mode(LCD_D4_GPIO_Port, LCD_D4_Pin, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	483d      	ldr	r0, [pc, #244]	@ (8000ff0 <lcd_write+0x134>)
 8000efa:	f000 fe09 	bl	8001b10 <MX_GPIO_Pin_Mode>
	MX_GPIO_Pin_Mode(LCD_D5_GPIO_Port, LCD_D5_Pin, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2120      	movs	r1, #32
 8000f02:	483b      	ldr	r0, [pc, #236]	@ (8000ff0 <lcd_write+0x134>)
 8000f04:	f000 fe04 	bl	8001b10 <MX_GPIO_Pin_Mode>
	MX_GPIO_Pin_Mode(LCD_D6_GPIO_Port, LCD_D6_Pin, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2140      	movs	r1, #64	@ 0x40
 8000f0c:	4838      	ldr	r0, [pc, #224]	@ (8000ff0 <lcd_write+0x134>)
 8000f0e:	f000 fdff 	bl	8001b10 <MX_GPIO_Pin_Mode>
	MX_GPIO_Pin_Mode(LCD_D7_GPIO_Port, LCD_D7_Pin, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	4836      	ldr	r0, [pc, #216]	@ (8000ff0 <lcd_write+0x134>)
 8000f18:	f000 fdfa 	bl	8001b10 <MX_GPIO_Pin_Mode>


	set_rw(0);	     //Write operation
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 f869 	bl	8000ff4 <set_rw>
	set_rs(lcdmode); //0 for instruction, 1 for data
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f881 	bl	800102c <set_rs>
	set_e(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 f898 	bl	8001060 <set_e>
	//PORTD = value;
//	LCD_DATA_GPIO->ODR = (LCD_DATA_GPIO->ODR & 0xFF00) | value;

	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, 0x01 & value);
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	482c      	ldr	r0, [pc, #176]	@ (8000ff0 <lcd_write+0x134>)
 8000f3e:	f001 ffdf 	bl	8002f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, 0x01 & (value>>1));
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	085b      	lsrs	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	2102      	movs	r1, #2
 8000f52:	4827      	ldr	r0, [pc, #156]	@ (8000ff0 <lcd_write+0x134>)
 8000f54:	f001 ffd4 	bl	8002f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, 0x01 & (value>>2));
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	2104      	movs	r1, #4
 8000f68:	4821      	ldr	r0, [pc, #132]	@ (8000ff0 <lcd_write+0x134>)
 8000f6a:	f001 ffc9 	bl	8002f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, 0x01 & (value>>3));
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	481c      	ldr	r0, [pc, #112]	@ (8000ff0 <lcd_write+0x134>)
 8000f80:	f001 ffbe 	bl	8002f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, 0x01 & (value>>4));
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	2110      	movs	r1, #16
 8000f94:	4816      	ldr	r0, [pc, #88]	@ (8000ff0 <lcd_write+0x134>)
 8000f96:	f001 ffb3 	bl	8002f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, 0x01 & (value>>5));
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	095b      	lsrs	r3, r3, #5
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2120      	movs	r1, #32
 8000faa:	4811      	ldr	r0, [pc, #68]	@ (8000ff0 <lcd_write+0x134>)
 8000fac:	f001 ffa8 	bl	8002f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, 0x01 & (value>>6));
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	099b      	lsrs	r3, r3, #6
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2140      	movs	r1, #64	@ 0x40
 8000fc0:	480b      	ldr	r0, [pc, #44]	@ (8000ff0 <lcd_write+0x134>)
 8000fc2:	f001 ff9d 	bl	8002f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, 0x01 & (value>>7));
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	09db      	lsrs	r3, r3, #7
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	2180      	movs	r1, #128	@ 0x80
 8000fd0:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <lcd_write+0x134>)
 8000fd2:	f001 ff95 	bl	8002f00 <HAL_GPIO_WritePin>

    delay_us(10);
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f7ff fef0 	bl	8000dbc <delay_us>
	set_e(0);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 f83f 	bl	8001060 <set_e>

	set_rs(0);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f822 	bl	800102c <set_rs>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <set_rw>:
	return (char)data;
}

//Set RW line
void set_rw(char status)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
    if(status)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d006      	beq.n	8001012 <set_rw+0x1e>
	{
        //PORTC |= 2;
        HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800100a:	4807      	ldr	r0, [pc, #28]	@ (8001028 <set_rw+0x34>)
 800100c:	f001 ff78 	bl	8002f00 <HAL_GPIO_WritePin>
    else
	{
	    //PORTC &= ~(2);
	    HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
	}
}
 8001010:	e005      	b.n	800101e <set_rw+0x2a>
	    HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <set_rw+0x34>)
 800101a:	f001 ff71 	bl	8002f00 <HAL_GPIO_WritePin>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020000 	.word	0x40020000

0800102c <set_rs>:

//Set RS line
void set_rs(char status)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
    if(status)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <set_rs+0x1c>
	{
        //PORTC |= 1;
        HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2101      	movs	r1, #1
 8001040:	4806      	ldr	r0, [pc, #24]	@ (800105c <set_rs+0x30>)
 8001042:	f001 ff5d 	bl	8002f00 <HAL_GPIO_WritePin>
    else
	{
	    //PORTC &= ~(1);
	    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
	}
}
 8001046:	e004      	b.n	8001052 <set_rs+0x26>
	    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2101      	movs	r1, #1
 800104c:	4803      	ldr	r0, [pc, #12]	@ (800105c <set_rs+0x30>)
 800104e:	f001 ff57 	bl	8002f00 <HAL_GPIO_WritePin>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020000 	.word	0x40020000

08001060 <set_e>:

//Set E line
void set_e(char status)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
    if(status)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <set_e+0x1c>
	{
        //PORTC |= 4;
        HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2102      	movs	r1, #2
 8001074:	4806      	ldr	r0, [pc, #24]	@ (8001090 <set_e+0x30>)
 8001076:	f001 ff43 	bl	8002f00 <HAL_GPIO_WritePin>
    else
	{
	    //PORTC &= ~(4);
	    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
	}
}
 800107a:	e004      	b.n	8001086 <set_e+0x26>
	    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2102      	movs	r1, #2
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <set_e+0x30>)
 8001082:	f001 ff3d 	bl	8002f00 <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020000 	.word	0x40020000

08001094 <lcd_cls>:
	}
}

//Clear LCD
void lcd_cls(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
	int x, y,x1;
    for(x = 0; x < 64; x++)
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e048      	b.n	8001132 <lcd_cls+0x9e>
    {
		for(y = 0; y < 16; y++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	e03f      	b.n	8001126 <lcd_cls+0x92>
		{
			if(x > 31)  //Enter lower part of screen => go to next page
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2b1f      	cmp	r3, #31
 80010aa:	dd1d      	ble.n	80010e8 <lcd_cls+0x54>
			{
		        x1 = x % 32;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	425a      	negs	r2, r3
 80010b0:	f003 031f 	and.w	r3, r3, #31
 80010b4:	f002 021f 	and.w	r2, r2, #31
 80010b8:	bf58      	it	pl
 80010ba:	4253      	negpl	r3, r2
 80010bc:	607b      	str	r3, [r7, #4]
		        //y |= 8;
				//Set address
	            lcd_write(LCD_CMD_MODE, 0x80 | x1);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4619      	mov	r1, r3
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff fef5 	bl	8000ebc <lcd_write>
	            lcd_write(LCD_CMD_MODE, 0x80 | y);
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff feeb 	bl	8000ebc <lcd_write>
 80010e6:	e013      	b.n	8001110 <lcd_cls+0x7c>
		    }
			else{
				//Set address
	            lcd_write(LCD_CMD_MODE, 0x80 | x);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4619      	mov	r1, r3
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff fee0 	bl	8000ebc <lcd_write>
	            lcd_write(LCD_CMD_MODE, 0x80 | y);
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001104:	b25b      	sxtb	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4619      	mov	r1, r3
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fed6 	bl	8000ebc <lcd_write>
			}


            //Write data
            lcd_write(LCD_DATA_MODE, 0);
 8001110:	2100      	movs	r1, #0
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff fed2 	bl	8000ebc <lcd_write>
            lcd_write(LCD_DATA_MODE, 0);
 8001118:	2100      	movs	r1, #0
 800111a:	2001      	movs	r0, #1
 800111c:	f7ff fece 	bl	8000ebc <lcd_write>
		for(y = 0; y < 16; y++)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	3301      	adds	r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	ddbc      	ble.n	80010a6 <lcd_cls+0x12>
    for(x = 0; x < 64; x++)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b3f      	cmp	r3, #63	@ 0x3f
 8001136:	ddb3      	ble.n	80010a0 <lcd_cls+0xc>
        }
    }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <lcd_init>:



//Init LCD
void lcd_init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    //Reset
    //PORTC &= ~(8);
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800114e:	481f      	ldr	r0, [pc, #124]	@ (80011cc <lcd_init+0x88>)
 8001150:	f001 fed6 	bl	8002f00 <HAL_GPIO_WritePin>
    delay_ms(1);
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff fe4b 	bl	8000df0 <delay_ms>
    //PORTC |= 8;
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001160:	481a      	ldr	r0, [pc, #104]	@ (80011cc <lcd_init+0x88>)
 8001162:	f001 fecd 	bl	8002f00 <HAL_GPIO_WritePin>
    delay_ms(40);
 8001166:	2028      	movs	r0, #40	@ 0x28
 8001168:	f7ff fe42 	bl	8000df0 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x30);	//Use 8-bit mode parallel
 800116c:	2130      	movs	r1, #48	@ 0x30
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff fea4 	bl	8000ebc <lcd_write>
    delay_ms(1);
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fe3b 	bl	8000df0 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x0C); //All on Cursor on, Blink on , Display on
 800117a:	210c      	movs	r1, #12
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fe9d 	bl	8000ebc <lcd_write>
    delay_ms(1);
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff fe34 	bl	8000df0 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x01); //Perform CLS in text mode to eliminate random chars from screen
 8001188:	2101      	movs	r1, #1
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fe96 	bl	8000ebc <lcd_write>
    delay_ms(20);
 8001190:	2014      	movs	r0, #20
 8001192:	f7ff fe2d 	bl	8000df0 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x34); //Switch to extended mode, redefine function set
 8001196:	2134      	movs	r1, #52	@ 0x34
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fe8f 	bl	8000ebc <lcd_write>
    delay_us(1000);
 800119e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a2:	f7ff fe0b 	bl	8000dbc <delay_us>

    lcd_write(LCD_CMD_MODE, 0x36); //Add graphic mode
 80011a6:	2136      	movs	r1, #54	@ 0x36
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fe87 	bl	8000ebc <lcd_write>
    delay_us(1000);
 80011ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011b2:	f7ff fe03 	bl	8000dbc <delay_us>

    lcd_write(LCD_CMD_MODE, 0x12); //Display control and display ON
 80011b6:	2112      	movs	r1, #18
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fe7f 	bl	8000ebc <lcd_write>
    delay_us(1000);
 80011be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011c2:	f7ff fdfb 	bl	8000dbc <delay_us>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020000 	.word	0x40020000

080011d0 <lcd_draw_pointer>:
            lcd_write(LCD_DATA_MODE, ch1);
    	}
    }
}

void lcd_draw_pointer(uint8_t new_x, uint8_t new_y) {
 80011d0:	b4b0      	push	{r4, r5, r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
	static uint8_t prev_x = 9;
	static uint8_t prev_y = 0;
	static uint8_t prev_buff[1][7]={0};

	if(new_x > 57)new_x = 57;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b39      	cmp	r3, #57	@ 0x39
 80011e4:	d901      	bls.n	80011ea <lcd_draw_pointer+0x1a>
 80011e6:	2339      	movs	r3, #57	@ 0x39
 80011e8:	71fb      	strb	r3, [r7, #7]
	if(new_y > 15)new_y = 15;
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d901      	bls.n	80011f4 <lcd_draw_pointer+0x24>
 80011f0:	230f      	movs	r3, #15
 80011f2:	71bb      	strb	r3, [r7, #6]


    for (uint8_t row = 0; row < 7; row++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	77fb      	strb	r3, [r7, #31]
 80011f8:	e024      	b.n	8001244 <lcd_draw_pointer+0x74>
    	for(int col = 0; col < 1; col++){
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	e01b      	b.n	8001238 <lcd_draw_pointer+0x68>
        	framebuffer[prev_x + row][prev_y + col] = prev_buff[col][row];
 8001200:	7ffc      	ldrb	r4, [r7, #31]
 8001202:	4b3e      	ldr	r3, [pc, #248]	@ (80012fc <lcd_draw_pointer+0x12c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	18d0      	adds	r0, r2, r3
 800120c:	4b3c      	ldr	r3, [pc, #240]	@ (8001300 <lcd_draw_pointer+0x130>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	18d1      	adds	r1, r2, r3
 8001216:	4d3b      	ldr	r5, [pc, #236]	@ (8001304 <lcd_draw_pointer+0x134>)
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	442b      	add	r3, r5
 8001222:	4423      	add	r3, r4
 8001224:	781c      	ldrb	r4, [r3, #0]
 8001226:	4a38      	ldr	r2, [pc, #224]	@ (8001308 <lcd_draw_pointer+0x138>)
 8001228:	0103      	lsls	r3, r0, #4
 800122a:	4413      	add	r3, r2
 800122c:	440b      	add	r3, r1
 800122e:	4622      	mov	r2, r4
 8001230:	701a      	strb	r2, [r3, #0]
    	for(int col = 0; col < 1; col++){
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	3301      	adds	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	dde0      	ble.n	8001200 <lcd_draw_pointer+0x30>
    for (uint8_t row = 0; row < 7; row++) {
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	3301      	adds	r3, #1
 8001242:	77fb      	strb	r3, [r7, #31]
 8001244:	7ffb      	ldrb	r3, [r7, #31]
 8001246:	2b06      	cmp	r3, #6
 8001248:	d9d7      	bls.n	80011fa <lcd_draw_pointer+0x2a>
    	}
    }

    for (uint8_t row = 0; row < 7; row++) {
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]
 800124e:	e020      	b.n	8001292 <lcd_draw_pointer+0xc2>
    	for(int col = 0; col < 1; col++){
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	e017      	b.n	8001286 <lcd_draw_pointer+0xb6>
        	prev_buff[col][row] = framebuffer[new_x + row][new_y + col];
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	441a      	add	r2, r3
 800125c:	79b9      	ldrb	r1, [r7, #6]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	440b      	add	r3, r1
 8001262:	7df9      	ldrb	r1, [r7, #23]
 8001264:	4828      	ldr	r0, [pc, #160]	@ (8001308 <lcd_draw_pointer+0x138>)
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	4402      	add	r2, r0
 800126a:	4413      	add	r3, r2
 800126c:	781c      	ldrb	r4, [r3, #0]
 800126e:	4825      	ldr	r0, [pc, #148]	@ (8001304 <lcd_draw_pointer+0x134>)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	4403      	add	r3, r0
 800127a:	440b      	add	r3, r1
 800127c:	4622      	mov	r2, r4
 800127e:	701a      	strb	r2, [r3, #0]
    	for(int col = 0; col < 1; col++){
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	3301      	adds	r3, #1
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	dde4      	ble.n	8001256 <lcd_draw_pointer+0x86>
    for (uint8_t row = 0; row < 7; row++) {
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	3301      	adds	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	2b06      	cmp	r3, #6
 8001296:	d9db      	bls.n	8001250 <lcd_draw_pointer+0x80>
    	}
    }

    for (uint8_t row = 0; row < 7; row++) {
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e020      	b.n	80012e0 <lcd_draw_pointer+0x110>
    	for(int col = 0; col < 1; col++){
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	e017      	b.n	80012d4 <lcd_draw_pointer+0x104>
    		framebuffer[new_x + row][new_y + col] = pointer_bitmap[col][row];
 80012a4:	7bfc      	ldrb	r4, [r7, #15]
 80012a6:	79fa      	ldrb	r2, [r7, #7]
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	18d0      	adds	r0, r2, r3
 80012ac:	79ba      	ldrb	r2, [r7, #6]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	18d1      	adds	r1, r2, r3
 80012b2:	4d16      	ldr	r5, [pc, #88]	@ (800130c <lcd_draw_pointer+0x13c>)
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	4613      	mov	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	1a9b      	subs	r3, r3, r2
 80012bc:	442b      	add	r3, r5
 80012be:	4423      	add	r3, r4
 80012c0:	781c      	ldrb	r4, [r3, #0]
 80012c2:	4a11      	ldr	r2, [pc, #68]	@ (8001308 <lcd_draw_pointer+0x138>)
 80012c4:	0103      	lsls	r3, r0, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	4622      	mov	r2, r4
 80012cc:	701a      	strb	r2, [r3, #0]
    	for(int col = 0; col < 1; col++){
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3301      	adds	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	dde4      	ble.n	80012a4 <lcd_draw_pointer+0xd4>
    for (uint8_t row = 0; row < 7; row++) {
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	3301      	adds	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d9db      	bls.n	800129e <lcd_draw_pointer+0xce>
    	}
    }

    prev_x = new_x;
 80012e6:	4a05      	ldr	r2, [pc, #20]	@ (80012fc <lcd_draw_pointer+0x12c>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	7013      	strb	r3, [r2, #0]
    prev_y = new_y;
 80012ec:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <lcd_draw_pointer+0x130>)
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	7013      	strb	r3, [r2, #0]
}
 80012f2:	bf00      	nop
 80012f4:	3724      	adds	r7, #36	@ 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bcb0      	pop	{r4, r5, r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000000 	.word	0x20000000
 8001300:	200004bc 	.word	0x200004bc
 8001304:	200004c0 	.word	0x200004c0
 8001308:	200000bc 	.word	0x200000bc
 800130c:	08006e9c 	.word	0x08006e9c

08001310 <lcd_draw_H_line>:
                framebuffer[row][byte] &= ~(1 << bit);
        }
    }
}

void lcd_draw_H_line(uint8_t x, uint8_t y, uint8_t lenght){
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	460b      	mov	r3, r1
 800131c:	71bb      	strb	r3, [r7, #6]
 800131e:	4613      	mov	r3, r2
 8001320:	717b      	strb	r3, [r7, #5]
	for(int col = y; col < lenght; col++){
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	e02f      	b.n	8001388 <lcd_draw_H_line+0x78>
		if(col==128)break;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b80      	cmp	r3, #128	@ 0x80
 800132c:	d031      	beq.n	8001392 <lcd_draw_H_line+0x82>
		uint8_t page = col / 8;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	da00      	bge.n	8001336 <lcd_draw_H_line+0x26>
 8001334:	3307      	adds	r3, #7
 8001336:	10db      	asrs	r3, r3, #3
 8001338:	72fb      	strb	r3, [r7, #11]
		uint8_t bit = 7 - (col % 8);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	425a      	negs	r2, r3
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	f002 0207 	and.w	r2, r2, #7
 8001346:	bf58      	it	pl
 8001348:	4253      	negpl	r3, r2
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f1c3 0307 	rsb	r3, r3, #7
 8001350:	72bb      	strb	r3, [r7, #10]
		framebuffer[ x][page] |= (0x01 << bit);
 8001352:	79fa      	ldrb	r2, [r7, #7]
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	4912      	ldr	r1, [pc, #72]	@ (80013a0 <lcd_draw_H_line+0x90>)
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	440a      	add	r2, r1
 800135c:	4413      	add	r3, r2
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b25a      	sxtb	r2, r3
 8001362:	7abb      	ldrb	r3, [r7, #10]
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	b25b      	sxtb	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b259      	sxtb	r1, r3
 8001370:	79fa      	ldrb	r2, [r7, #7]
 8001372:	7afb      	ldrb	r3, [r7, #11]
 8001374:	b2c8      	uxtb	r0, r1
 8001376:	490a      	ldr	r1, [pc, #40]	@ (80013a0 <lcd_draw_H_line+0x90>)
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	440a      	add	r2, r1
 800137c:	4413      	add	r3, r2
 800137e:	4602      	mov	r2, r0
 8001380:	701a      	strb	r2, [r3, #0]
	for(int col = y; col < lenght; col++){
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3301      	adds	r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	797b      	ldrb	r3, [r7, #5]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	dbcb      	blt.n	8001328 <lcd_draw_H_line+0x18>
	}
}
 8001390:	e000      	b.n	8001394 <lcd_draw_H_line+0x84>
		if(col==128)break;
 8001392:	bf00      	nop
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	200000bc 	.word	0x200000bc

080013a4 <lcd_draw_V_line>:

void lcd_draw_V_line(uint8_t x, uint8_t y, uint8_t lenght){
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	460b      	mov	r3, r1
 80013b0:	71bb      	strb	r3, [r7, #6]
 80013b2:	4613      	mov	r3, r2
 80013b4:	717b      	strb	r3, [r7, #5]
	uint8_t page = y / 8;
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	73bb      	strb	r3, [r7, #14]
	uint8_t bit = 7 - (y % 8);
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	43db      	mvns	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	737b      	strb	r3, [r7, #13]
    for (uint8_t row = x; row < lenght; row++) {
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e01d      	b.n	800140a <lcd_draw_V_line+0x66>
    	if(x==64)break;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b40      	cmp	r3, #64	@ 0x40
 80013d2:	d01f      	beq.n	8001414 <lcd_draw_V_line+0x70>
    	framebuffer[ row][page] |= (0x01 << bit);
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	4912      	ldr	r1, [pc, #72]	@ (8001424 <lcd_draw_V_line+0x80>)
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	440a      	add	r2, r1
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b25a      	sxtb	r2, r3
 80013e4:	7b7b      	ldrb	r3, [r7, #13]
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b259      	sxtb	r1, r3
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	7bbb      	ldrb	r3, [r7, #14]
 80013f6:	b2c8      	uxtb	r0, r1
 80013f8:	490a      	ldr	r1, [pc, #40]	@ (8001424 <lcd_draw_V_line+0x80>)
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	440a      	add	r2, r1
 80013fe:	4413      	add	r3, r2
 8001400:	4602      	mov	r2, r0
 8001402:	701a      	strb	r2, [r3, #0]
    for (uint8_t row = x; row < lenght; row++) {
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	3301      	adds	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	797b      	ldrb	r3, [r7, #5]
 800140e:	429a      	cmp	r2, r3
 8001410:	d3dd      	bcc.n	80013ce <lcd_draw_V_line+0x2a>
    }
}
 8001412:	e000      	b.n	8001416 <lcd_draw_V_line+0x72>
    	if(x==64)break;
 8001414:	bf00      	nop
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200000bc 	.word	0x200000bc

08001428 <lcd_draw_signalStrenght>:

void lcd_draw_signalStrenght(uint8_t value){
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]

	uint8_t page = 15;
 8001432:	230f      	movs	r3, #15
 8001434:	743b      	strb	r3, [r7, #16]
	uint8_t y = 121;
 8001436:	2379      	movs	r3, #121	@ 0x79
 8001438:	75fb      	strb	r3, [r7, #23]
	uint8_t num_bars = 7- (value/14);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	085b      	lsrs	r3, r3, #1
 800143e:	4a82      	ldr	r2, [pc, #520]	@ (8001648 <lcd_draw_signalStrenght+0x220>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f1c3 0307 	rsb	r3, r3, #7
 800144c:	73fb      	strb	r3, [r7, #15]

    for(uint8_t row = 0; row < 7; row++) {
 800144e:	2300      	movs	r3, #0
 8001450:	75bb      	strb	r3, [r7, #22]
 8001452:	e02c      	b.n	80014ae <lcd_draw_signalStrenght+0x86>
    	for(uint8_t col = y; col < 128; col++){
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	757b      	strb	r3, [r7, #21]
 8001458:	e022      	b.n	80014a0 <lcd_draw_signalStrenght+0x78>
    		uint8_t bit = 7 - (col % 8);
 800145a:	7d7b      	ldrb	r3, [r7, #21]
 800145c:	43db      	mvns	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	733b      	strb	r3, [r7, #12]
    			framebuffer[ row][page] &= ~(0x01 << bit); // clear the bit
 8001466:	7dba      	ldrb	r2, [r7, #22]
 8001468:	7c3b      	ldrb	r3, [r7, #16]
 800146a:	4978      	ldr	r1, [pc, #480]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	440a      	add	r2, r1
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b25a      	sxtb	r2, r3
 8001476:	7b3b      	ldrb	r3, [r7, #12]
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	b25b      	sxtb	r3, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	b25b      	sxtb	r3, r3
 8001484:	4013      	ands	r3, r2
 8001486:	b259      	sxtb	r1, r3
 8001488:	7dba      	ldrb	r2, [r7, #22]
 800148a:	7c3b      	ldrb	r3, [r7, #16]
 800148c:	b2c8      	uxtb	r0, r1
 800148e:	496f      	ldr	r1, [pc, #444]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	440a      	add	r2, r1
 8001494:	4413      	add	r3, r2
 8001496:	4602      	mov	r2, r0
 8001498:	701a      	strb	r2, [r3, #0]
    	for(uint8_t col = y; col < 128; col++){
 800149a:	7d7b      	ldrb	r3, [r7, #21]
 800149c:	3301      	adds	r3, #1
 800149e:	757b      	strb	r3, [r7, #21]
 80014a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dad8      	bge.n	800145a <lcd_draw_signalStrenght+0x32>
    for(uint8_t row = 0; row < 7; row++) {
 80014a8:	7dbb      	ldrb	r3, [r7, #22]
 80014aa:	3301      	adds	r3, #1
 80014ac:	75bb      	strb	r3, [r7, #22]
 80014ae:	7dbb      	ldrb	r3, [r7, #22]
 80014b0:	2b06      	cmp	r3, #6
 80014b2:	d9cf      	bls.n	8001454 <lcd_draw_signalStrenght+0x2c>
    		//lcd_update();
    	}
    }

	if(value < 14){
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	2b0d      	cmp	r3, #13
 80014b8:	d86c      	bhi.n	8001594 <lcd_draw_signalStrenght+0x16c>
	    for(uint8_t row = 0; row < 7; row++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	753b      	strb	r3, [r7, #20]
 80014be:	e065      	b.n	800158c <lcd_draw_signalStrenght+0x164>
	    	for(uint8_t col = y; col < 128; col++){
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	74fb      	strb	r3, [r7, #19]
 80014c4:	e05b      	b.n	800157e <lcd_draw_signalStrenght+0x156>
	    		uint8_t bit = 7 - (col % 8);
 80014c6:	7cfb      	ldrb	r3, [r7, #19]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	737b      	strb	r3, [r7, #13]
	    		if(row == (col - y)){
 80014d2:	7d3a      	ldrb	r2, [r7, #20]
 80014d4:	7cf9      	ldrb	r1, [r7, #19]
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	1acb      	subs	r3, r1, r3
 80014da:	429a      	cmp	r2, r3
 80014dc:	d132      	bne.n	8001544 <lcd_draw_signalStrenght+0x11c>
	    			framebuffer[ row][page] |= (0x01 << bit); // set the bit
 80014de:	7d3a      	ldrb	r2, [r7, #20]
 80014e0:	7c3b      	ldrb	r3, [r7, #16]
 80014e2:	495a      	ldr	r1, [pc, #360]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	440a      	add	r2, r1
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	7b7b      	ldrb	r3, [r7, #13]
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b259      	sxtb	r1, r3
 80014fc:	7d3a      	ldrb	r2, [r7, #20]
 80014fe:	7c3b      	ldrb	r3, [r7, #16]
 8001500:	b2c8      	uxtb	r0, r1
 8001502:	4952      	ldr	r1, [pc, #328]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	440a      	add	r2, r1
 8001508:	4413      	add	r3, r2
 800150a:	4602      	mov	r2, r0
 800150c:	701a      	strb	r2, [r3, #0]
	    			framebuffer[ row][page] |= (0x01 << (6 - bit)); // set the bit
 800150e:	7d3a      	ldrb	r2, [r7, #20]
 8001510:	7c3b      	ldrb	r3, [r7, #16]
 8001512:	494e      	ldr	r1, [pc, #312]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	440a      	add	r2, r1
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b25a      	sxtb	r2, r3
 800151e:	7b7b      	ldrb	r3, [r7, #13]
 8001520:	f1c3 0306 	rsb	r3, r3, #6
 8001524:	2101      	movs	r1, #1
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b259      	sxtb	r1, r3
 8001530:	7d3a      	ldrb	r2, [r7, #20]
 8001532:	7c3b      	ldrb	r3, [r7, #16]
 8001534:	b2c8      	uxtb	r0, r1
 8001536:	4945      	ldr	r1, [pc, #276]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	440a      	add	r2, r1
 800153c:	4413      	add	r3, r2
 800153e:	4602      	mov	r2, r0
 8001540:	701a      	strb	r2, [r3, #0]
	    			break;
 8001542:	e020      	b.n	8001586 <lcd_draw_signalStrenght+0x15e>
	    		}
	    		else{
	    			framebuffer[ row][page] &= ~(0x01 << bit); // clear the bit
 8001544:	7d3a      	ldrb	r2, [r7, #20]
 8001546:	7c3b      	ldrb	r3, [r7, #16]
 8001548:	4940      	ldr	r1, [pc, #256]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	440a      	add	r2, r1
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b25a      	sxtb	r2, r3
 8001554:	7b7b      	ldrb	r3, [r7, #13]
 8001556:	2101      	movs	r1, #1
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	b25b      	sxtb	r3, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	b25b      	sxtb	r3, r3
 8001562:	4013      	ands	r3, r2
 8001564:	b259      	sxtb	r1, r3
 8001566:	7d3a      	ldrb	r2, [r7, #20]
 8001568:	7c3b      	ldrb	r3, [r7, #16]
 800156a:	b2c8      	uxtb	r0, r1
 800156c:	4937      	ldr	r1, [pc, #220]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	440a      	add	r2, r1
 8001572:	4413      	add	r3, r2
 8001574:	4602      	mov	r2, r0
 8001576:	701a      	strb	r2, [r3, #0]
	    	for(uint8_t col = y; col < 128; col++){
 8001578:	7cfb      	ldrb	r3, [r7, #19]
 800157a:	3301      	adds	r3, #1
 800157c:	74fb      	strb	r3, [r7, #19]
 800157e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da9f      	bge.n	80014c6 <lcd_draw_signalStrenght+0x9e>
	    for(uint8_t row = 0; row < 7; row++) {
 8001586:	7d3b      	ldrb	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	753b      	strb	r3, [r7, #20]
 800158c:	7d3b      	ldrb	r3, [r7, #20]
 800158e:	2b06      	cmp	r3, #6
 8001590:	d996      	bls.n	80014c0 <lcd_draw_signalStrenght+0x98>
	    	if(row==0)break;
	    	y++;
	    }
	}

}
 8001592:	e053      	b.n	800163c <lcd_draw_signalStrenght+0x214>
	    for(uint8_t row = 6; row >= 0; row--) {
 8001594:	2306      	movs	r3, #6
 8001596:	74bb      	strb	r3, [r7, #18]
	    	for(uint8_t col = y; col < 128; col++){
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	747b      	strb	r3, [r7, #17]
 800159c:	e03f      	b.n	800161e <lcd_draw_signalStrenght+0x1f6>
	    		uint8_t bit = 7 - (col % 8);
 800159e:	7c7b      	ldrb	r3, [r7, #17]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	73bb      	strb	r3, [r7, #14]
	    		if(bit < num_bars){
 80015aa:	7bba      	ldrb	r2, [r7, #14]
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d21a      	bcs.n	80015e8 <lcd_draw_signalStrenght+0x1c0>
	    			framebuffer[ row][page] &= ~(0x01 << bit); // clear the bit
 80015b2:	7cba      	ldrb	r2, [r7, #18]
 80015b4:	7c3b      	ldrb	r3, [r7, #16]
 80015b6:	4925      	ldr	r1, [pc, #148]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	440a      	add	r2, r1
 80015bc:	4413      	add	r3, r2
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25a      	sxtb	r2, r3
 80015c2:	7bbb      	ldrb	r3, [r7, #14]
 80015c4:	2101      	movs	r1, #1
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4013      	ands	r3, r2
 80015d2:	b259      	sxtb	r1, r3
 80015d4:	7cba      	ldrb	r2, [r7, #18]
 80015d6:	7c3b      	ldrb	r3, [r7, #16]
 80015d8:	b2c8      	uxtb	r0, r1
 80015da:	491c      	ldr	r1, [pc, #112]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 80015dc:	0112      	lsls	r2, r2, #4
 80015de:	440a      	add	r2, r1
 80015e0:	4413      	add	r3, r2
 80015e2:	4602      	mov	r2, r0
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e017      	b.n	8001618 <lcd_draw_signalStrenght+0x1f0>
	    			framebuffer[ row][page] |= (0x01 << bit); // set the bit
 80015e8:	7cba      	ldrb	r2, [r7, #18]
 80015ea:	7c3b      	ldrb	r3, [r7, #16]
 80015ec:	4917      	ldr	r1, [pc, #92]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	440a      	add	r2, r1
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b25a      	sxtb	r2, r3
 80015f8:	7bbb      	ldrb	r3, [r7, #14]
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	b25b      	sxtb	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	b259      	sxtb	r1, r3
 8001606:	7cba      	ldrb	r2, [r7, #18]
 8001608:	7c3b      	ldrb	r3, [r7, #16]
 800160a:	b2c8      	uxtb	r0, r1
 800160c:	490f      	ldr	r1, [pc, #60]	@ (800164c <lcd_draw_signalStrenght+0x224>)
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	440a      	add	r2, r1
 8001612:	4413      	add	r3, r2
 8001614:	4602      	mov	r2, r0
 8001616:	701a      	strb	r2, [r3, #0]
	    	for(uint8_t col = y; col < 128; col++){
 8001618:	7c7b      	ldrb	r3, [r7, #17]
 800161a:	3301      	adds	r3, #1
 800161c:	747b      	strb	r3, [r7, #17]
 800161e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001622:	2b00      	cmp	r3, #0
 8001624:	dabb      	bge.n	800159e <lcd_draw_signalStrenght+0x176>
	    	if(row==0)break;
 8001626:	7cbb      	ldrb	r3, [r7, #18]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <lcd_draw_signalStrenght+0x212>
	    	y++;
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	3301      	adds	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
	    for(uint8_t row = 6; row >= 0; row--) {
 8001632:	7cbb      	ldrb	r3, [r7, #18]
 8001634:	3b01      	subs	r3, #1
 8001636:	74bb      	strb	r3, [r7, #18]
	    	for(uint8_t col = y; col < 128; col++){
 8001638:	e7ae      	b.n	8001598 <lcd_draw_signalStrenght+0x170>
	    	if(row==0)break;
 800163a:	bf00      	nop
}
 800163c:	bf00      	nop
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	92492493 	.word	0x92492493
 800164c:	200000bc 	.word	0x200000bc

08001650 <lcd_draw_battery>:

void lcd_draw_battery(uint8_t x, uint8_t y, uint8_t value){
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	460b      	mov	r3, r1
 800165c:	71bb      	strb	r3, [r7, #6]
 800165e:	4613      	mov	r3, r2
 8001660:	717b      	strb	r3, [r7, #5]

	uint8_t level = 11 - (value / 10);
 8001662:	797b      	ldrb	r3, [r7, #5]
 8001664:	4a49      	ldr	r2, [pc, #292]	@ (800178c <lcd_draw_battery+0x13c>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	08db      	lsrs	r3, r3, #3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f1c3 030b 	rsb	r3, r3, #11
 8001672:	737b      	strb	r3, [r7, #13]
    for (uint8_t row = x; row < (x + 5); row++) {
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e07a      	b.n	8001770 <lcd_draw_battery+0x120>
        for (uint8_t col = y; col < y+12; col++) {
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	73bb      	strb	r3, [r7, #14]
 800167e:	e06e      	b.n	800175e <lcd_draw_battery+0x10e>
            uint8_t byte = col / 8;
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	08db      	lsrs	r3, r3, #3
 8001684:	733b      	strb	r3, [r7, #12]
            uint8_t bit = 7 - (col % 8);
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	43db      	mvns	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	72fb      	strb	r3, [r7, #11]

            // Read corresponding bit from miriair_bitmap
            uint8_t src_byte = battery_bitmap[row-x][(col-y)/8];
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	1ad2      	subs	r2, r2, r3
 8001698:	7bb9      	ldrb	r1, [r7, #14]
 800169a:	79bb      	ldrb	r3, [r7, #6]
 800169c:	1acb      	subs	r3, r1, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da00      	bge.n	80016a4 <lcd_draw_battery+0x54>
 80016a2:	3307      	adds	r3, #7
 80016a4:	10db      	asrs	r3, r3, #3
 80016a6:	4618      	mov	r0, r3
 80016a8:	4939      	ldr	r1, [pc, #228]	@ (8001790 <lcd_draw_battery+0x140>)
 80016aa:	0053      	lsls	r3, r2, #1
 80016ac:	440b      	add	r3, r1
 80016ae:	4403      	add	r3, r0
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	72bb      	strb	r3, [r7, #10]
            uint8_t bit_num = 7 -  ((col - y) % 8);
 80016b4:	7bba      	ldrb	r2, [r7, #14]
 80016b6:	79bb      	ldrb	r3, [r7, #6]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	425a      	negs	r2, r3
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	f002 0207 	and.w	r2, r2, #7
 80016c4:	bf58      	it	pl
 80016c6:	4253      	negpl	r3, r2
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	727b      	strb	r3, [r7, #9]
            uint8_t bit_val = (src_byte >> bit_num) & 0x01;
 80016d0:	7aba      	ldrb	r2, [r7, #10]
 80016d2:	7a7b      	ldrb	r3, [r7, #9]
 80016d4:	fa42 f303 	asr.w	r3, r2, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	723b      	strb	r3, [r7, #8]

            if (bit_val || (col - y) >= level)
 80016e0:	7a3b      	ldrb	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <lcd_draw_battery+0xa2>
 80016e6:	7bba      	ldrb	r2, [r7, #14]
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	1ad2      	subs	r2, r2, r3
 80016ec:	7b7b      	ldrb	r3, [r7, #13]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	db18      	blt.n	8001724 <lcd_draw_battery+0xd4>
                framebuffer[row][byte] |=  (1 << bit);
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	7b3b      	ldrb	r3, [r7, #12]
 80016f6:	4927      	ldr	r1, [pc, #156]	@ (8001794 <lcd_draw_battery+0x144>)
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	440a      	add	r2, r1
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b25a      	sxtb	r2, r3
 8001702:	7afb      	ldrb	r3, [r7, #11]
 8001704:	2101      	movs	r1, #1
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	b25b      	sxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b259      	sxtb	r1, r3
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	7b3b      	ldrb	r3, [r7, #12]
 8001714:	b2c8      	uxtb	r0, r1
 8001716:	491f      	ldr	r1, [pc, #124]	@ (8001794 <lcd_draw_battery+0x144>)
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	440a      	add	r2, r1
 800171c:	4413      	add	r3, r2
 800171e:	4602      	mov	r2, r0
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e019      	b.n	8001758 <lcd_draw_battery+0x108>
            else
                framebuffer[row][byte] &= ~(1 << bit);
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	7b3b      	ldrb	r3, [r7, #12]
 8001728:	491a      	ldr	r1, [pc, #104]	@ (8001794 <lcd_draw_battery+0x144>)
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	440a      	add	r2, r1
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b25a      	sxtb	r2, r3
 8001734:	7afb      	ldrb	r3, [r7, #11]
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	b25b      	sxtb	r3, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	b25b      	sxtb	r3, r3
 8001742:	4013      	ands	r3, r2
 8001744:	b259      	sxtb	r1, r3
 8001746:	7bfa      	ldrb	r2, [r7, #15]
 8001748:	7b3b      	ldrb	r3, [r7, #12]
 800174a:	b2c8      	uxtb	r0, r1
 800174c:	4911      	ldr	r1, [pc, #68]	@ (8001794 <lcd_draw_battery+0x144>)
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	440a      	add	r2, r1
 8001752:	4413      	add	r3, r2
 8001754:	4602      	mov	r2, r0
 8001756:	701a      	strb	r2, [r3, #0]
        for (uint8_t col = y; col < y+12; col++) {
 8001758:	7bbb      	ldrb	r3, [r7, #14]
 800175a:	3301      	adds	r3, #1
 800175c:	73bb      	strb	r3, [r7, #14]
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	f103 020b 	add.w	r2, r3, #11
 8001764:	7bbb      	ldrb	r3, [r7, #14]
 8001766:	429a      	cmp	r2, r3
 8001768:	da8a      	bge.n	8001680 <lcd_draw_battery+0x30>
    for (uint8_t row = x; row < (x + 5); row++) {
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	3301      	adds	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	1d1a      	adds	r2, r3, #4
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	429a      	cmp	r2, r3
 8001778:	f6bf af7f 	bge.w	800167a <lcd_draw_battery+0x2a>
            //lcd_update();
        }

    }

}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	cccccccd 	.word	0xcccccccd
 8001790:	08006e90 	.word	0x08006e90
 8001794:	200000bc 	.word	0x200000bc

08001798 <lcd_update>:


void lcd_update(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
	uint8_t ch0;
	uint8_t ch1;
	uint8_t row_;
    for (uint8_t row = 0; row < 64; row++) {
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e044      	b.n	800182e <lcd_update+0x96>

    	for(int col = 0; col < 8; col++){
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	e03b      	b.n	8001822 <lcd_update+0x8a>
            row_ = row % 32;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	71bb      	strb	r3, [r7, #6]
            uint8_t col_ = col;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	71fb      	strb	r3, [r7, #7]
        	if(row >= 32)  //Enter lower part of screen => go to next page
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b1f      	cmp	r3, #31
 80017ba:	d903      	bls.n	80017c4 <lcd_update+0x2c>
        	{
                col_ |= 0x08;
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	71fb      	strb	r3, [r7, #7]
            }
//        	else{
//
//        	}

        	lcd_write(LCD_CMD_MODE, 0x80 | row_);
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4619      	mov	r1, r3
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff fb74 	bl	8000ebc <lcd_write>
        	lcd_write(LCD_CMD_MODE, 0x80 + col_);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	3b80      	subs	r3, #128	@ 0x80
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff fb6d 	bl	8000ebc <lcd_write>

            ch0 = framebuffer[row][col*2];
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4915      	ldr	r1, [pc, #84]	@ (8001840 <lcd_update+0xa8>)
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	440a      	add	r2, r1
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	717b      	strb	r3, [r7, #5]
            ch1 = framebuffer[row][(col*2)+1];
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	3301      	adds	r3, #1
 80017fc:	4910      	ldr	r1, [pc, #64]	@ (8001840 <lcd_update+0xa8>)
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	440a      	add	r2, r1
 8001802:	4413      	add	r3, r2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	713b      	strb	r3, [r7, #4]


            lcd_write(LCD_DATA_MODE, ch0);
 8001808:	797b      	ldrb	r3, [r7, #5]
 800180a:	4619      	mov	r1, r3
 800180c:	2001      	movs	r0, #1
 800180e:	f7ff fb55 	bl	8000ebc <lcd_write>
            lcd_write(LCD_DATA_MODE, ch1);
 8001812:	793b      	ldrb	r3, [r7, #4]
 8001814:	4619      	mov	r1, r3
 8001816:	2001      	movs	r0, #1
 8001818:	f7ff fb50 	bl	8000ebc <lcd_write>
    	for(int col = 0; col < 8; col++){
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	3301      	adds	r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b07      	cmp	r3, #7
 8001826:	ddc0      	ble.n	80017aa <lcd_update+0x12>
    for (uint8_t row = 0; row < 64; row++) {
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	3301      	adds	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	2b3f      	cmp	r3, #63	@ 0x3f
 8001832:	d9b7      	bls.n	80017a4 <lcd_update+0xc>
    	}
    }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200000bc 	.word	0x200000bc

08001844 <lcd_putchar_>:
    }
}



void lcd_putchar_(uint8_t x, uint8_t y, char c) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
 800184e:	460b      	mov	r3, r1
 8001850:	71bb      	strb	r3, [r7, #6]
 8001852:	4613      	mov	r3, r2
 8001854:	717b      	strb	r3, [r7, #5]
    if (c < 32 || c > 126) return;
 8001856:	797b      	ldrb	r3, [r7, #5]
 8001858:	2b1f      	cmp	r3, #31
 800185a:	d93b      	bls.n	80018d4 <lcd_putchar_+0x90>
 800185c:	797b      	ldrb	r3, [r7, #5]
 800185e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001860:	d838      	bhi.n	80018d4 <lcd_putchar_+0x90>
    const uint8_t *bitmap = font_5x7[c - 32];
 8001862:	797b      	ldrb	r3, [r7, #5]
 8001864:	f1a3 0220 	sub.w	r2, r3, #32
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	1a9b      	subs	r3, r3, r2
 800186e:	4a1b      	ldr	r2, [pc, #108]	@ (80018dc <lcd_putchar_+0x98>)
 8001870:	4413      	add	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
    uint8_t bits=0;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
    for (uint8_t row = 0; row < 7; row++) {
 8001878:	2300      	movs	r3, #0
 800187a:	75fb      	strb	r3, [r7, #23]
 800187c:	e026      	b.n	80018cc <lcd_putchar_+0x88>
    		bits = bitmap[row];
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	73fb      	strb	r3, [r7, #15]
        for (uint8_t col = 0; col < 5; col++) {  // 5 visible columns
 8001888:	2300      	movs	r3, #0
 800188a:	75bb      	strb	r3, [r7, #22]
 800188c:	e018      	b.n	80018c0 <lcd_putchar_+0x7c>
            if (bits & (1 << (4 - col))) {       // MSB on left
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	7dbb      	ldrb	r3, [r7, #22]
 8001892:	f1c3 0304 	rsb	r3, r3, #4
 8001896:	fa42 f303 	asr.w	r3, r2, r3
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00b      	beq.n	80018ba <lcd_putchar_+0x76>
                setPixel(x + row, y + col, 1);   // x grows right, y grows down
 80018a2:	79fa      	ldrb	r2, [r7, #7]
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	4413      	add	r3, r2
 80018a8:	b2d8      	uxtb	r0, r3
 80018aa:	79ba      	ldrb	r2, [r7, #6]
 80018ac:	7dbb      	ldrb	r3, [r7, #22]
 80018ae:	4413      	add	r3, r2
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2201      	movs	r2, #1
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff faa9 	bl	8000e0c <setPixel>
        for (uint8_t col = 0; col < 5; col++) {  // 5 visible columns
 80018ba:	7dbb      	ldrb	r3, [r7, #22]
 80018bc:	3301      	adds	r3, #1
 80018be:	75bb      	strb	r3, [r7, #22]
 80018c0:	7dbb      	ldrb	r3, [r7, #22]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d9e3      	bls.n	800188e <lcd_putchar_+0x4a>
    for (uint8_t row = 0; row < 7; row++) {
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
 80018c8:	3301      	adds	r3, #1
 80018ca:	75fb      	strb	r3, [r7, #23]
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d9d5      	bls.n	800187e <lcd_putchar_+0x3a>
 80018d2:	e000      	b.n	80018d6 <lcd_putchar_+0x92>
    if (c < 32 || c > 126) return;
 80018d4:	bf00      	nop
            }

        }
    }
}
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	0800706c 	.word	0x0800706c

080018e0 <lcd_putchar_3x5>:

void lcd_putchar_3x5(uint8_t x, uint8_t y, char c) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	460b      	mov	r3, r1
 80018ec:	71bb      	strb	r3, [r7, #6]
 80018ee:	4613      	mov	r3, r2
 80018f0:	717b      	strb	r3, [r7, #5]
    if (c < 32 || c > 0x5A) return;
 80018f2:	797b      	ldrb	r3, [r7, #5]
 80018f4:	2b1f      	cmp	r3, #31
 80018f6:	d944      	bls.n	8001982 <lcd_putchar_3x5+0xa2>
 80018f8:	797b      	ldrb	r3, [r7, #5]
 80018fa:	2b5a      	cmp	r3, #90	@ 0x5a
 80018fc:	d841      	bhi.n	8001982 <lcd_putchar_3x5+0xa2>

    if (c >= 'a' && c <= 'z') c -= 32;
 80018fe:	797b      	ldrb	r3, [r7, #5]
 8001900:	2b60      	cmp	r3, #96	@ 0x60
 8001902:	d905      	bls.n	8001910 <lcd_putchar_3x5+0x30>
 8001904:	797b      	ldrb	r3, [r7, #5]
 8001906:	2b7a      	cmp	r3, #122	@ 0x7a
 8001908:	d802      	bhi.n	8001910 <lcd_putchar_3x5+0x30>
 800190a:	797b      	ldrb	r3, [r7, #5]
 800190c:	3b20      	subs	r3, #32
 800190e:	717b      	strb	r3, [r7, #5]

    const uint8_t *bitmap = font_3x5[c - 32];
 8001910:	797b      	ldrb	r3, [r7, #5]
 8001912:	f1a3 0220 	sub.w	r2, r3, #32
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	4a1b      	ldr	r2, [pc, #108]	@ (800198c <lcd_putchar_3x5+0xac>)
 800191e:	4413      	add	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
    uint8_t bits=0;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
    for (uint8_t row = 0; row < 5; row++) {
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]
 800192a:	e026      	b.n	800197a <lcd_putchar_3x5+0x9a>
    		bits = bitmap[row];
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	73fb      	strb	r3, [r7, #15]
        for (uint8_t col = 0; col < 3; col++) {  // 5 visible columns
 8001936:	2300      	movs	r3, #0
 8001938:	75bb      	strb	r3, [r7, #22]
 800193a:	e018      	b.n	800196e <lcd_putchar_3x5+0x8e>
            if (bits & (1 << (2 - col))) {       // MSB on left
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	7dbb      	ldrb	r3, [r7, #22]
 8001940:	f1c3 0302 	rsb	r3, r3, #2
 8001944:	fa42 f303 	asr.w	r3, r2, r3
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00b      	beq.n	8001968 <lcd_putchar_3x5+0x88>
                setPixel(x + row, y + col, 1);   // x grows right, y grows down
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	4413      	add	r3, r2
 8001956:	b2d8      	uxtb	r0, r3
 8001958:	79ba      	ldrb	r2, [r7, #6]
 800195a:	7dbb      	ldrb	r3, [r7, #22]
 800195c:	4413      	add	r3, r2
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2201      	movs	r2, #1
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff fa52 	bl	8000e0c <setPixel>
        for (uint8_t col = 0; col < 3; col++) {  // 5 visible columns
 8001968:	7dbb      	ldrb	r3, [r7, #22]
 800196a:	3301      	adds	r3, #1
 800196c:	75bb      	strb	r3, [r7, #22]
 800196e:	7dbb      	ldrb	r3, [r7, #22]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d9e3      	bls.n	800193c <lcd_putchar_3x5+0x5c>
    for (uint8_t row = 0; row < 5; row++) {
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	3301      	adds	r3, #1
 8001978:	75fb      	strb	r3, [r7, #23]
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d9d5      	bls.n	800192c <lcd_putchar_3x5+0x4c>
 8001980:	e000      	b.n	8001984 <lcd_putchar_3x5+0xa4>
    if (c < 32 || c > 0x5A) return;
 8001982:	bf00      	nop
            }

        }
    }
}
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	08006ea4 	.word	0x08006ea4

08001990 <lcd_puts>:




void lcd_puts(uint8_t x, uint8_t y, const char *str) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	603a      	str	r2, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
 800199c:	460b      	mov	r3, r1
 800199e:	71bb      	strb	r3, [r7, #6]
    while (*str && y < (128 - 6)) { // stop early if too close to right edge
 80019a0:	e00b      	b.n	80019ba <lcd_puts+0x2a>
        lcd_putchar_(x, y, *str++);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	603a      	str	r2, [r7, #0]
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	79b9      	ldrb	r1, [r7, #6]
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff48 	bl	8001844 <lcd_putchar_>
        y += 6;  // 5-pixel char + 1 space
 80019b4:	79bb      	ldrb	r3, [r7, #6]
 80019b6:	3306      	adds	r3, #6
 80019b8:	71bb      	strb	r3, [r7, #6]
    while (*str && y < (128 - 6)) { // stop early if too close to right edge
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <lcd_puts+0x38>
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	2b79      	cmp	r3, #121	@ 0x79
 80019c6:	d9ec      	bls.n	80019a2 <lcd_puts+0x12>
    }
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <lcd_puts_3x5>:

void lcd_puts_3x5(uint8_t x, uint8_t y, const char *str){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	603a      	str	r2, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	460b      	mov	r3, r1
 80019de:	71bb      	strb	r3, [r7, #6]
    while (*str && y < (128 - 6)) { // stop early if too close to right edge
 80019e0:	e00b      	b.n	80019fa <lcd_puts_3x5+0x2a>
        lcd_putchar_3x5(x, y, *str++);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	603a      	str	r2, [r7, #0]
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	79b9      	ldrb	r1, [r7, #6]
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff76 	bl	80018e0 <lcd_putchar_3x5>
        y += 4;  // 5-pixel char + 1 space
 80019f4:	79bb      	ldrb	r3, [r7, #6]
 80019f6:	3304      	adds	r3, #4
 80019f8:	71bb      	strb	r3, [r7, #6]
    while (*str && y < (128 - 6)) { // stop early if too close to right edge
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <lcd_puts_3x5+0x38>
 8001a02:	79bb      	ldrb	r3, [r7, #6]
 8001a04:	2b79      	cmp	r3, #121	@ 0x79
 8001a06:	d9ec      	bls.n	80019e2 <lcd_puts_3x5+0x12>
    }
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b35      	ldr	r3, [pc, #212]	@ (8001b00 <MX_GPIO_Init+0xf0>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a34      	ldr	r2, [pc, #208]	@ (8001b00 <MX_GPIO_Init+0xf0>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b32      	ldr	r3, [pc, #200]	@ (8001b00 <MX_GPIO_Init+0xf0>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b2e      	ldr	r3, [pc, #184]	@ (8001b00 <MX_GPIO_Init+0xf0>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b00 <MX_GPIO_Init+0xf0>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b2b      	ldr	r3, [pc, #172]	@ (8001b00 <MX_GPIO_Init+0xf0>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <MX_GPIO_Init+0xf0>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	4a26      	ldr	r2, [pc, #152]	@ (8001b00 <MX_GPIO_Init+0xf0>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6e:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <MX_GPIO_Init+0xf0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|DRIVER_L2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f242 0190 	movw	r1, #8336	@ 0x2090
 8001a80:	4820      	ldr	r0, [pc, #128]	@ (8001b04 <MX_GPIO_Init+0xf4>)
 8001a82:	f001 fa3d 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|GPIO_PIN_5|LCD_RW_Pin
 8001a86:	2200      	movs	r2, #0
 8001a88:	f240 6123 	movw	r1, #1571	@ 0x623
 8001a8c:	481e      	ldr	r0, [pc, #120]	@ (8001b08 <MX_GPIO_Init+0xf8>)
 8001a8e:	f001 fa37 	bl	8002f00 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|DRIVER_L1_Pin
 8001a92:	2200      	movs	r2, #0
 8001a94:	f240 41ff 	movw	r1, #1279	@ 0x4ff
 8001a98:	481c      	ldr	r0, [pc, #112]	@ (8001b0c <MX_GPIO_Init+0xfc>)
 8001a9a:	f001 fa31 	bl	8002f00 <HAL_GPIO_WritePin>
                          |LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 DRIVER_L2_Pin PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DRIVER_L2_Pin|GPIO_PIN_7;
 8001a9e:	f242 0390 	movw	r3, #8336	@ 0x2090
 8001aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4813      	ldr	r0, [pc, #76]	@ (8001b04 <MX_GPIO_Init+0xf4>)
 8001ab8:	f000 ff9a 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin PA5 LCD_RW_Pin
                           LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|GPIO_PIN_5|LCD_RW_Pin
 8001abc:	f240 6323 	movw	r3, #1571	@ 0x623
 8001ac0:	60fb      	str	r3, [r7, #12]
                          |LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <MX_GPIO_Init+0xf8>)
 8001ad6:	f000 ff8b 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin DRIVER_L1_Pin
                           LCD_D3_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|DRIVER_L1_Pin
 8001ada:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8001ade:	60fb      	str	r3, [r7, #12]
                          |LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	@ (8001b0c <MX_GPIO_Init+0xfc>)
 8001af4:	f000 ff7c 	bl	80029f0 <HAL_GPIO_Init>

}
 8001af8:	bf00      	nop
 8001afa:	3720      	adds	r7, #32
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	40020400 	.word	0x40020400

08001b10 <MX_GPIO_Pin_Mode>:

/* USER CODE BEGIN 2 */

void MX_GPIO_Pin_Mode(GPIO_TypeDef  *GPIOx, uint16_t GPIO_Pin, uint8_t mode){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
	// 1. De-initialize the pin first (optional but recommended)
	HAL_GPIO_DeInit(GPIOx, GPIO_Pin);
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	4619      	mov	r1, r3
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f001 f8ef 	bl	8002d18 <HAL_GPIO_DeInit>

	if(mode){
 8001b3a:	787b      	ldrb	r3, [r7, #1]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00c      	beq.n	8001b5a <MX_GPIO_Pin_Mode+0x4a>
		// 2. Reconfigure it as input
		GPIO_InitStruct.Pin = GPIO_Pin;
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;  // Or GPIO_PULLUP / GPIO_PULLDOWN
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 ff4c 	bl	80029f0 <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
	}
}
 8001b58:	e00d      	b.n	8001b76 <MX_GPIO_Pin_Mode+0x66>
		GPIO_InitStruct.Pin = GPIO_Pin;
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
 8001b5e:	2301      	movs	r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 ff3d 	bl	80029f0 <HAL_GPIO_Init>
}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <ISR_SINE>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*Function for The Interrupt*/
void ISR_SINE(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	if(b>1){
 8001b84:	4b43      	ldr	r3, [pc, #268]	@ (8001c94 <ISR_SINE+0x114>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	dd7b      	ble.n	8001c84 <ISR_SINE+0x104>
	  Duty = (int)(duty_coeff*TIMER_PERIOD*sineValue[k]);
 8001b8c:	4b42      	ldr	r3, [pc, #264]	@ (8001c98 <ISR_SINE+0x118>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001c9c <ISR_SINE+0x11c>
 8001b96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b9a:	4b41      	ldr	r3, [pc, #260]	@ (8001ca0 <ISR_SINE+0x120>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a41      	ldr	r2, [pc, #260]	@ (8001ca4 <ISR_SINE+0x124>)
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb0:	ee17 2a90 	vmov	r2, s15
 8001bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca8 <ISR_SINE+0x128>)
 8001bb6:	601a      	str	r2, [r3, #0]
	  if (k==0) {
 8001bb8:	4b39      	ldr	r3, [pc, #228]	@ (8001ca0 <ISR_SINE+0x120>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d108      	bne.n	8001bd2 <ISR_SINE+0x52>
		HAL_GPIO_WritePin(DRIVER_L1_GPIO_Port, DRIVER_L1_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bc6:	4839      	ldr	r0, [pc, #228]	@ (8001cac <ISR_SINE+0x12c>)
 8001bc8:	f001 f99a 	bl	8002f00 <HAL_GPIO_WritePin>
		TIM1->CCR1= 0;
 8001bcc:	4b38      	ldr	r3, [pc, #224]	@ (8001cb0 <ISR_SINE+0x130>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	635a      	str	r2, [r3, #52]	@ 0x34
	  }
	  if (k==(sampleNum/2)) {
 8001bd2:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <ISR_SINE+0x134>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	0fda      	lsrs	r2, r3, #31
 8001bd8:	4413      	add	r3, r2
 8001bda:	105b      	asrs	r3, r3, #1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b30      	ldr	r3, [pc, #192]	@ (8001ca0 <ISR_SINE+0x120>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d108      	bne.n	8001bf8 <ISR_SINE+0x78>
		HAL_GPIO_WritePin(DRIVER_L2_GPIO_Port, DRIVER_L2_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2110      	movs	r1, #16
 8001bea:	4833      	ldr	r0, [pc, #204]	@ (8001cb8 <ISR_SINE+0x138>)
 8001bec:	f001 f988 	bl	8002f00 <HAL_GPIO_WritePin>
		TIM1->CCR1 = TIMER_PERIOD;
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb0 <ISR_SINE+0x130>)
 8001bf2:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8001bf6:	635a      	str	r2, [r3, #52]	@ 0x34
	  }
	  if (k>0 && k<(sampleNum/2))  {
 8001bf8:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <ISR_SINE+0x120>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	dd12      	ble.n	8001c26 <ISR_SINE+0xa6>
 8001c00:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb4 <ISR_SINE+0x134>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0fda      	lsrs	r2, r3, #31
 8001c06:	4413      	add	r3, r2
 8001c08:	105b      	asrs	r3, r3, #1
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <ISR_SINE+0x120>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dd08      	ble.n	8001c26 <ISR_SINE+0xa6>
		HAL_GPIO_WritePin(DRIVER_L2_GPIO_Port, DRIVER_L2_Pin, GPIO_PIN_SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	2110      	movs	r1, #16
 8001c18:	4827      	ldr	r0, [pc, #156]	@ (8001cb8 <ISR_SINE+0x138>)
 8001c1a:	f001 f971 	bl	8002f00 <HAL_GPIO_WritePin>
		TIM1->CCR1 = Duty;
 8001c1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <ISR_SINE+0x128>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <ISR_SINE+0x130>)
 8001c24:	635a      	str	r2, [r3, #52]	@ 0x34
	  }
	  if (k>0 && k>(sampleNum/2) ) {
 8001c26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <ISR_SINE+0x120>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	dd15      	ble.n	8001c5a <ISR_SINE+0xda>
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <ISR_SINE+0x134>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	0fda      	lsrs	r2, r3, #31
 8001c34:	4413      	add	r3, r2
 8001c36:	105b      	asrs	r3, r3, #1
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <ISR_SINE+0x120>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	da0b      	bge.n	8001c5a <ISR_SINE+0xda>
		HAL_GPIO_WritePin(DRIVER_L1_GPIO_Port, DRIVER_L1_Pin, GPIO_PIN_SET);
 8001c42:	2201      	movs	r2, #1
 8001c44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c48:	4818      	ldr	r0, [pc, #96]	@ (8001cac <ISR_SINE+0x12c>)
 8001c4a:	f001 f959 	bl	8002f00 <HAL_GPIO_WritePin>
		TIM1->CCR1 = TIMER_PERIOD + Duty;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <ISR_SINE+0x128>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f603 620f 	addw	r2, r3, #3599	@ 0xe0f
 8001c56:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <ISR_SINE+0x130>)
 8001c58:	635a      	str	r2, [r3, #52]	@ 0x34
	  }
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001c5a:	2120      	movs	r1, #32
 8001c5c:	4817      	ldr	r0, [pc, #92]	@ (8001cbc <ISR_SINE+0x13c>)
 8001c5e:	f001 f968 	bl	8002f32 <HAL_GPIO_TogglePin>
	  k++;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <ISR_SINE+0x120>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca0 <ISR_SINE+0x120>)
 8001c6a:	6013      	str	r3, [r2, #0]
	  if (k > sampleNum ) k=0;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <ISR_SINE+0x120>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <ISR_SINE+0x134>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dd02      	ble.n	8001c7e <ISR_SINE+0xfe>
 8001c78:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <ISR_SINE+0x120>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
	  b=0;
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <ISR_SINE+0x114>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
	}
	b++;
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <ISR_SINE+0x114>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4a02      	ldr	r2, [pc, #8]	@ (8001c94 <ISR_SINE+0x114>)
 8001c8c:	6013      	str	r3, [r2, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200004d0 	.word	0x200004d0
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	4560f000 	.word	0x4560f000
 8001ca0:	200004cc 	.word	0x200004cc
 8001ca4:	200004dc 	.word	0x200004dc
 8001ca8:	200004c8 	.word	0x200004c8
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	200004d4 	.word	0x200004d4
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020000 	.word	0x40020000

08001cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc6:	f000 fceb 	bl	80026a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cca:	f000 f89d 	bl	8001e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cce:	f7ff fe9f 	bl	8001a10 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001cd2:	f000 fb59 	bl	8002388 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cd6:	f000 fbf7 	bl	80024c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001cda:	2120      	movs	r1, #32
 8001cdc:	4841      	ldr	r0, [pc, #260]	@ (8001de4 <main+0x124>)
 8001cde:	f001 f928 	bl	8002f32 <HAL_GPIO_TogglePin>
  sampleNum = (int)(f_carrier/f_fundamental_1);
 8001ce2:	4b41      	ldr	r3, [pc, #260]	@ (8001de8 <main+0x128>)
 8001ce4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ce8:	601a      	str	r2, [r3, #0]

  radVal = 2 * PI / sampleNum;
 8001cea:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8001dec <main+0x12c>
 8001cee:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8001de8 <main+0x128>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d02:	4b3b      	ldr	r3, [pc, #236]	@ (8001df0 <main+0x130>)
 8001d04:	edc3 7a00 	vstr	s15, [r3]

  for(int i=1;i<sampleNum+1;i++){
 8001d08:	2301      	movs	r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	e022      	b.n	8001d54 <main+0x94>
	      sineValue[i] = sin(radVal*(i));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d18:	4b35      	ldr	r3, [pc, #212]	@ (8001df0 <main+0x130>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d22:	ee17 0a90 	vmov	r0, s15
 8001d26:	f7fe fd51 	bl	80007cc <__aeabi_f2d>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	ec43 2b10 	vmov	d0, r2, r3
 8001d32:	f004 f841 	bl	8005db8 <sin>
 8001d36:	ec53 2b10 	vmov	r2, r3, d0
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f7fe fe4d 	bl	80009dc <__aeabi_d2f>
 8001d42:	4602      	mov	r2, r0
 8001d44:	492b      	ldr	r1, [pc, #172]	@ (8001df4 <main+0x134>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	601a      	str	r2, [r3, #0]
  for(int i=1;i<sampleNum+1;i++){
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3301      	adds	r3, #1
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	4b24      	ldr	r3, [pc, #144]	@ (8001de8 <main+0x128>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	ddd7      	ble.n	8001d0e <main+0x4e>
  }

  delay_init ();
 8001d5e:	f7ff f823 	bl	8000da8 <delay_init>
  TIM1->CCR1 = 1799;
 8001d62:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <main+0x138>)
 8001d64:	f240 7207 	movw	r2, #1799	@ 0x707
 8001d68:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_Base_Start_IT(&htim1);
 8001d6a:	4824      	ldr	r0, [pc, #144]	@ (8001dfc <main+0x13c>)
 8001d6c:	f001 ff32 	bl	8003bd4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d70:	2100      	movs	r1, #0
 8001d72:	4822      	ldr	r0, [pc, #136]	@ (8001dfc <main+0x13c>)
 8001d74:	f001 fff8 	bl	8003d68 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4820      	ldr	r0, [pc, #128]	@ (8001dfc <main+0x13c>)
 8001d7c:	f002 fe7e 	bl	8004a7c <HAL_TIMEx_PWMN_Start>
//  test_pixel();
//  //drawFullGrid();
//  st7920_update();


  delay_ms(100);
 8001d80:	2064      	movs	r0, #100	@ 0x64
 8001d82:	f7ff f835 	bl	8000df0 <delay_ms>
  lcd_init();
 8001d86:	f7ff f9dd 	bl	8001144 <lcd_init>
  delay_ms(100);
 8001d8a:	2064      	movs	r0, #100	@ 0x64
 8001d8c:	f7ff f830 	bl	8000df0 <delay_ms>

  lcd_cls();
 8001d90:	f7ff f980 	bl	8001094 <lcd_cls>
//


  //lcd_draw_topbar();

  lcd_puts_3x5(1,2,"MIRI AIR+");
 8001d94:	4a1a      	ldr	r2, [pc, #104]	@ (8001e00 <main+0x140>)
 8001d96:	2102      	movs	r1, #2
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff fe19 	bl	80019d0 <lcd_puts_3x5>
  lcd_draw_signalStrenght(89);
 8001d9e:	2059      	movs	r0, #89	@ 0x59
 8001da0:	f7ff fb42 	bl	8001428 <lcd_draw_signalStrenght>

  lcd_draw_battery(2,105,50);
 8001da4:	2232      	movs	r2, #50	@ 0x32
 8001da6:	2169      	movs	r1, #105	@ 0x69
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff fc51 	bl	8001650 <lcd_draw_battery>
  lcd_draw_H_line(8,2,128);
 8001dae:	2280      	movs	r2, #128	@ 0x80
 8001db0:	2102      	movs	r1, #2
 8001db2:	2008      	movs	r0, #8
 8001db4:	f7ff faac 	bl	8001310 <lcd_draw_H_line>
  lcd_draw_V_line(8,8,64);
 8001db8:	2240      	movs	r2, #64	@ 0x40
 8001dba:	2108      	movs	r1, #8
 8001dbc:	2008      	movs	r0, #8
 8001dbe:	f7ff faf1 	bl	80013a4 <lcd_draw_V_line>
  lcd_update();
 8001dc2:	f7ff fce9 	bl	8001798 <lcd_update>

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001dc6:	2120      	movs	r1, #32
 8001dc8:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <main+0x124>)
 8001dca:	f001 f8b2 	bl	8002f32 <HAL_GPIO_TogglePin>
//  lcd_puts(20,10,"HUMIDITY");
//  lcd_puts(30,10,"PM 2.5");
//  lcd_puts(40,10,"PM 10");
//  lcd_puts(50,10,"CARBON DIOXIDE CO2");
//  lcd_update();
  menu_screen();
 8001dce:	f000 f913 	bl	8001ff8 <menu_screen>
//	  lcd_update();
//	  signal = random()%100;
//	  batt = random()%100;
//
//	  if(signal>=100)signal=14;
	  HAL_Delay(100);
 8001dd2:	2064      	movs	r0, #100	@ 0x64
 8001dd4:	f000 fcd6 	bl	8002784 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_7);
 8001dd8:	2180      	movs	r1, #128	@ 0x80
 8001dda:	480a      	ldr	r0, [pc, #40]	@ (8001e04 <main+0x144>)
 8001ddc:	f001 f8a9 	bl	8002f32 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001de0:	bf00      	nop
 8001de2:	e7f6      	b.n	8001dd2 <main+0x112>
 8001de4:	40020000 	.word	0x40020000
 8001de8:	200004d4 	.word	0x200004d4
 8001dec:	40490fdb 	.word	0x40490fdb
 8001df0:	200004d8 	.word	0x200004d8
 8001df4:	200004dc 	.word	0x200004dc
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	20001484 	.word	0x20001484
 8001e00:	08006e18 	.word	0x08006e18
 8001e04:	40020800 	.word	0x40020800

08001e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b094      	sub	sp, #80	@ 0x50
 8001e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	2234      	movs	r2, #52	@ 0x34
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 f935 	bl	8005086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1c:	f107 0308 	add.w	r3, r7, #8
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee4 <SystemClock_Config+0xdc>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee4 <SystemClock_Config+0xdc>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <SystemClock_Config+0xdc>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ee8 <SystemClock_Config+0xe0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a25      	ldr	r2, [pc, #148]	@ (8001ee8 <SystemClock_Config+0xe0>)
 8001e52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <SystemClock_Config+0xe0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e70:	2302      	movs	r3, #2
 8001e72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001e7c:	23b4      	movs	r3, #180	@ 0xb4
 8001e7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e84:	2302      	movs	r3, #2
 8001e86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 fb49 	bl	8003528 <HAL_RCC_OscConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e9c:	f000 f826 	bl	8001eec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ea0:	f001 f862 	bl	8002f68 <HAL_PWREx_EnableOverDrive>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001eaa:	f000 f81f 	bl	8001eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eae:	230f      	movs	r3, #15
 8001eb0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ec6:	f107 0308 	add.w	r3, r7, #8
 8001eca:	2105      	movs	r1, #5
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f001 f89b 	bl	8003008 <HAL_RCC_ClockConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ed8:	f000 f808 	bl	8001eec <Error_Handler>
  }
}
 8001edc:	bf00      	nop
 8001ede:	3750      	adds	r7, #80	@ 0x50
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <Error_Handler+0x8>

08001ef8 <clear_screen>:

extern uint8_t framebuffer[64][16];
uint8_t signal_ = 14;
uint8_t batt = 0;

void clear_screen(void) {
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
    for (uint8_t y = 10; y < 64; y++) {
 8001efe:	230a      	movs	r3, #10
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	e02f      	b.n	8001f64 <clear_screen+0x6c>
        for (uint8_t x = 10; x < 128; x++) {
 8001f04:	230a      	movs	r3, #10
 8001f06:	71bb      	strb	r3, [r7, #6]
 8001f08:	e025      	b.n	8001f56 <clear_screen+0x5e>
            uint8_t byte = x / 8;
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	717b      	strb	r3, [r7, #5]
            uint8_t bit = 7 - (x % 8);
 8001f10:	79bb      	ldrb	r3, [r7, #6]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	713b      	strb	r3, [r7, #4]
            framebuffer[y][byte] &= ~(0x01 << bit);
 8001f1c:	79fa      	ldrb	r2, [r7, #7]
 8001f1e:	797b      	ldrb	r3, [r7, #5]
 8001f20:	4915      	ldr	r1, [pc, #84]	@ (8001f78 <clear_screen+0x80>)
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	440a      	add	r2, r1
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b25a      	sxtb	r2, r3
 8001f2c:	793b      	ldrb	r3, [r7, #4]
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	b25b      	sxtb	r3, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	b259      	sxtb	r1, r3
 8001f3e:	79fa      	ldrb	r2, [r7, #7]
 8001f40:	797b      	ldrb	r3, [r7, #5]
 8001f42:	b2c8      	uxtb	r0, r1
 8001f44:	490c      	ldr	r1, [pc, #48]	@ (8001f78 <clear_screen+0x80>)
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	440a      	add	r2, r1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 10; x < 128; x++) {
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	3301      	adds	r3, #1
 8001f54:	71bb      	strb	r3, [r7, #6]
 8001f56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	dad5      	bge.n	8001f0a <clear_screen+0x12>
    for (uint8_t y = 10; y < 64; y++) {
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	3301      	adds	r3, #1
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f68:	d9cc      	bls.n	8001f04 <clear_screen+0xc>
        }
    }
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	200000bc 	.word	0x200000bc

08001f7c <update_telemetry>:

void update_telemetry(){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	  lcd_draw_signalStrenght(signal_);
 8001f80:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <update_telemetry+0x70>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fa4f 	bl	8001428 <lcd_draw_signalStrenght>
	  lcd_draw_battery(2,105,batt);
 8001f8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <update_telemetry+0x74>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2169      	movs	r1, #105	@ 0x69
 8001f92:	2002      	movs	r0, #2
 8001f94:	f7ff fb5c 	bl	8001650 <lcd_draw_battery>
	  signal_ = random()%100;
 8001f98:	f002 ff32 	bl	8004e00 <random>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ff4 <update_telemetry+0x78>)
 8001fa0:	fb82 1203 	smull	r1, r2, r2, r3
 8001fa4:	1151      	asrs	r1, r2, #5
 8001fa6:	17da      	asrs	r2, r3, #31
 8001fa8:	1a8a      	subs	r2, r1, r2
 8001faa:	2164      	movs	r1, #100	@ 0x64
 8001fac:	fb01 f202 	mul.w	r2, r1, r2
 8001fb0:	1a9a      	subs	r2, r3, r2
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <update_telemetry+0x70>)
 8001fb6:	701a      	strb	r2, [r3, #0]
	  batt = random()%100;
 8001fb8:	f002 ff22 	bl	8004e00 <random>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff4 <update_telemetry+0x78>)
 8001fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001fc4:	1151      	asrs	r1, r2, #5
 8001fc6:	17da      	asrs	r2, r3, #31
 8001fc8:	1a8a      	subs	r2, r1, r2
 8001fca:	2164      	movs	r1, #100	@ 0x64
 8001fcc:	fb01 f202 	mul.w	r2, r1, r2
 8001fd0:	1a9a      	subs	r2, r3, r2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <update_telemetry+0x74>)
 8001fd6:	701a      	strb	r2, [r3, #0]

	  if(signal_>=100)signal_=14;
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <update_telemetry+0x70>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b63      	cmp	r3, #99	@ 0x63
 8001fde:	d902      	bls.n	8001fe6 <update_telemetry+0x6a>
 8001fe0:	4b02      	ldr	r3, [pc, #8]	@ (8001fec <update_telemetry+0x70>)
 8001fe2:	220e      	movs	r2, #14
 8001fe4:	701a      	strb	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000034 	.word	0x20000034
 8001ff0:	2000147c 	.word	0x2000147c
 8001ff4:	51eb851f 	.word	0x51eb851f

08001ff8 <menu_screen>:

void menu_screen(){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
	bool exit = false;
 8001ffe:	2300      	movs	r3, #0
 8002000:	713b      	strb	r3, [r7, #4]
	uint8_t pointer_pos = 10, info_pos = 0;
 8002002:	230a      	movs	r3, #10
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	2300      	movs	r3, #0
 8002008:	71bb      	strb	r3, [r7, #6]
	bool pointer_dir = false;
 800200a:	2300      	movs	r3, #0
 800200c:	717b      	strb	r3, [r7, #5]

	while(!exit){
 800200e:	e06b      	b.n	80020e8 <menu_screen+0xf0>
		clear_screen();
 8002010:	f7ff ff72 	bl	8001ef8 <clear_screen>
		update_telemetry();
 8002014:	f7ff ffb2 	bl	8001f7c <update_telemetry>
		lcd_puts(10,10,parameters[info_pos + 0]);
 8002018:	79bb      	ldrb	r3, [r7, #6]
 800201a:	4a39      	ldr	r2, [pc, #228]	@ (8002100 <menu_screen+0x108>)
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	461a      	mov	r2, r3
 8002022:	210a      	movs	r1, #10
 8002024:	200a      	movs	r0, #10
 8002026:	f7ff fcb3 	bl	8001990 <lcd_puts>
		lcd_puts(20,10,parameters[info_pos + 1]);
 800202a:	79bb      	ldrb	r3, [r7, #6]
 800202c:	3301      	adds	r3, #1
 800202e:	4a34      	ldr	r2, [pc, #208]	@ (8002100 <menu_screen+0x108>)
 8002030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002034:	461a      	mov	r2, r3
 8002036:	210a      	movs	r1, #10
 8002038:	2014      	movs	r0, #20
 800203a:	f7ff fca9 	bl	8001990 <lcd_puts>
		lcd_puts(30,10,parameters[info_pos + 2]);
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	3302      	adds	r3, #2
 8002042:	4a2f      	ldr	r2, [pc, #188]	@ (8002100 <menu_screen+0x108>)
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	461a      	mov	r2, r3
 800204a:	210a      	movs	r1, #10
 800204c:	201e      	movs	r0, #30
 800204e:	f7ff fc9f 	bl	8001990 <lcd_puts>
		lcd_puts(40,10,parameters[info_pos + 3]);
 8002052:	79bb      	ldrb	r3, [r7, #6]
 8002054:	3303      	adds	r3, #3
 8002056:	4a2a      	ldr	r2, [pc, #168]	@ (8002100 <menu_screen+0x108>)
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	461a      	mov	r2, r3
 800205e:	210a      	movs	r1, #10
 8002060:	2028      	movs	r0, #40	@ 0x28
 8002062:	f7ff fc95 	bl	8001990 <lcd_puts>
		lcd_puts(50,10,parameters[info_pos + 4]);
 8002066:	79bb      	ldrb	r3, [r7, #6]
 8002068:	3304      	adds	r3, #4
 800206a:	4a25      	ldr	r2, [pc, #148]	@ (8002100 <menu_screen+0x108>)
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	461a      	mov	r2, r3
 8002072:	210a      	movs	r1, #10
 8002074:	2032      	movs	r0, #50	@ 0x32
 8002076:	f7ff fc8b 	bl	8001990 <lcd_puts>
		if(pointer_pos<=50 && pointer_pos>=10)lcd_draw_pointer(pointer_pos,0);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	2b32      	cmp	r3, #50	@ 0x32
 800207e:	d807      	bhi.n	8002090 <menu_screen+0x98>
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	2b09      	cmp	r3, #9
 8002084:	d904      	bls.n	8002090 <menu_screen+0x98>
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f8a0 	bl	80011d0 <lcd_draw_pointer>
		lcd_update();
 8002090:	f7ff fb82 	bl	8001798 <lcd_update>
		HAL_Delay(1000);
 8002094:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002098:	f000 fb74 	bl	8002784 <HAL_Delay>

		if(pointer_dir == false ){
 800209c:	797b      	ldrb	r3, [r7, #5]
 800209e:	f083 0301 	eor.w	r3, r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <menu_screen+0xce>
			pointer_pos +=10;
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	330a      	adds	r3, #10
 80020ac:	71fb      	strb	r3, [r7, #7]
			if(pointer_pos>50)info_pos++;
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b32      	cmp	r3, #50	@ 0x32
 80020b2:	d902      	bls.n	80020ba <menu_screen+0xc2>
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	3301      	adds	r3, #1
 80020b8:	71bb      	strb	r3, [r7, #6]
			if(pointer_pos >= 110)pointer_dir = true;
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2b6d      	cmp	r3, #109	@ 0x6d
 80020be:	d913      	bls.n	80020e8 <menu_screen+0xf0>
 80020c0:	2301      	movs	r3, #1
 80020c2:	717b      	strb	r3, [r7, #5]
 80020c4:	e010      	b.n	80020e8 <menu_screen+0xf0>
		}
		else if(pointer_dir == true ){
 80020c6:	797b      	ldrb	r3, [r7, #5]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <menu_screen+0xf0>
			pointer_pos -=10;
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	3b0a      	subs	r3, #10
 80020d0:	71fb      	strb	r3, [r7, #7]
			if(pointer_pos>=50)info_pos--;
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b31      	cmp	r3, #49	@ 0x31
 80020d6:	d902      	bls.n	80020de <menu_screen+0xe6>
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	3b01      	subs	r3, #1
 80020dc:	71bb      	strb	r3, [r7, #6]
			if(pointer_pos <= 10)pointer_dir = false;
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b0a      	cmp	r3, #10
 80020e2:	d801      	bhi.n	80020e8 <menu_screen+0xf0>
 80020e4:	2300      	movs	r3, #0
 80020e6:	717b      	strb	r3, [r7, #5]
	while(!exit){
 80020e8:	793b      	ldrb	r3, [r7, #4]
 80020ea:	f083 0301 	eor.w	r3, r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d18d      	bne.n	8002010 <menu_screen+0x18>
		}



	}
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008

08002104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_MspInit+0x4c>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	4a0f      	ldr	r2, [pc, #60]	@ (8002150 <HAL_MspInit+0x4c>)
 8002114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002118:	6453      	str	r3, [r2, #68]	@ 0x44
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <HAL_MspInit+0x4c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_MspInit+0x4c>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	4a08      	ldr	r2, [pc, #32]	@ (8002150 <HAL_MspInit+0x4c>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002134:	6413      	str	r3, [r2, #64]	@ 0x40
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_MspInit+0x4c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <NMI_Handler+0x4>

0800215c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <HardFault_Handler+0x4>

08002164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <MemManage_Handler+0x4>

0800216c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <UsageFault_Handler+0x4>

0800217c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021aa:	f000 facb 	bl	8002744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ISR_SINE();
 80021b8:	f7ff fce2 	bl	8001b80 <ISR_SINE>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021bc:	4804      	ldr	r0, [pc, #16]	@ (80021d0 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80021be:	f001 fe9b 	bl	8003ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021c2:	2120      	movs	r1, #32
 80021c4:	4803      	ldr	r0, [pc, #12]	@ (80021d4 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80021c6:	f000 feb4 	bl	8002f32 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20001484 	.word	0x20001484
 80021d4:	40020000 	.word	0x40020000

080021d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return 1;
 80021dc:	2301      	movs	r3, #1
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_kill>:

int _kill(int pid, int sig)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021f2:	f002 ff97 	bl	8005124 <__errno>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2216      	movs	r2, #22
 80021fa:	601a      	str	r2, [r3, #0]
  return -1;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_exit>:

void _exit (int status)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ffe7 	bl	80021e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800221a:	bf00      	nop
 800221c:	e7fd      	b.n	800221a <_exit+0x12>

0800221e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e00a      	b.n	8002246 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002230:	f3af 8000 	nop.w
 8002234:	4601      	mov	r1, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	60ba      	str	r2, [r7, #8]
 800223c:	b2ca      	uxtb	r2, r1
 800223e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3301      	adds	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	429a      	cmp	r2, r3
 800224c:	dbf0      	blt.n	8002230 <_read+0x12>
  }

  return len;
 800224e:	687b      	ldr	r3, [r7, #4]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	e009      	b.n	800227e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	60ba      	str	r2, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3301      	adds	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	dbf1      	blt.n	800226a <_write+0x12>
  }
  return len;
 8002286:	687b      	ldr	r3, [r7, #4]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_close>:

int _close(int file)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002298:	f04f 33ff 	mov.w	r3, #4294967295
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022b8:	605a      	str	r2, [r3, #4]
  return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <_isatty>:

int _isatty(int file)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d0:	2301      	movs	r3, #1
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002300:	4a14      	ldr	r2, [pc, #80]	@ (8002354 <_sbrk+0x5c>)
 8002302:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <_sbrk+0x60>)
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800230c:	4b13      	ldr	r3, [pc, #76]	@ (800235c <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002314:	4b11      	ldr	r3, [pc, #68]	@ (800235c <_sbrk+0x64>)
 8002316:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <_sbrk+0x68>)
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	429a      	cmp	r2, r3
 8002326:	d207      	bcs.n	8002338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002328:	f002 fefc 	bl	8005124 <__errno>
 800232c:	4603      	mov	r3, r0
 800232e:	220c      	movs	r2, #12
 8002330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	e009      	b.n	800234c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002338:	4b08      	ldr	r3, [pc, #32]	@ (800235c <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233e:	4b07      	ldr	r3, [pc, #28]	@ (800235c <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	4a05      	ldr	r2, [pc, #20]	@ (800235c <_sbrk+0x64>)
 8002348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20020000 	.word	0x20020000
 8002358:	00004000 	.word	0x00004000
 800235c:	20001480 	.word	0x20001480
 8002360:	20001668 	.word	0x20001668

08002364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002368:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <SystemInit+0x20>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <SystemInit+0x20>)
 8002370:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002374:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b096      	sub	sp, #88	@ 0x58
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]
 80023b6:	615a      	str	r2, [r3, #20]
 80023b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2220      	movs	r2, #32
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fe60 	bl	8005086 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023c6:	4b3e      	ldr	r3, [pc, #248]	@ (80024c0 <MX_TIM1_Init+0x138>)
 80023c8:	4a3e      	ldr	r2, [pc, #248]	@ (80024c4 <MX_TIM1_Init+0x13c>)
 80023ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023cc:	4b3c      	ldr	r3, [pc, #240]	@ (80024c0 <MX_TIM1_Init+0x138>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80023d2:	4b3b      	ldr	r3, [pc, #236]	@ (80024c0 <MX_TIM1_Init+0x138>)
 80023d4:	2220      	movs	r2, #32
 80023d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 80023d8:	4b39      	ldr	r3, [pc, #228]	@ (80024c0 <MX_TIM1_Init+0x138>)
 80023da:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80023de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e0:	4b37      	ldr	r3, [pc, #220]	@ (80024c0 <MX_TIM1_Init+0x138>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023e6:	4b36      	ldr	r3, [pc, #216]	@ (80024c0 <MX_TIM1_Init+0x138>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023ec:	4b34      	ldr	r3, [pc, #208]	@ (80024c0 <MX_TIM1_Init+0x138>)
 80023ee:	2280      	movs	r2, #128	@ 0x80
 80023f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023f2:	4833      	ldr	r0, [pc, #204]	@ (80024c0 <MX_TIM1_Init+0x138>)
 80023f4:	f001 fb36 	bl	8003a64 <HAL_TIM_Base_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80023fe:	f7ff fd75 	bl	8001eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002406:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002408:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800240c:	4619      	mov	r1, r3
 800240e:	482c      	ldr	r0, [pc, #176]	@ (80024c0 <MX_TIM1_Init+0x138>)
 8002410:	f001 ff24 	bl	800425c <HAL_TIM_ConfigClockSource>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800241a:	f7ff fd67 	bl	8001eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800241e:	4828      	ldr	r0, [pc, #160]	@ (80024c0 <MX_TIM1_Init+0x138>)
 8002420:	f001 fc48 	bl	8003cb4 <HAL_TIM_PWM_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800242a:	f7ff fd5f 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800242e:	2320      	movs	r3, #32
 8002430:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002436:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800243a:	4619      	mov	r1, r3
 800243c:	4820      	ldr	r0, [pc, #128]	@ (80024c0 <MX_TIM1_Init+0x138>)
 800243e:	f002 fbd7 	bl	8004bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002448:	f7ff fd50 	bl	8001eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800244c:	2360      	movs	r3, #96	@ 0x60
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002458:	2300      	movs	r3, #0
 800245a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800246c:	2200      	movs	r2, #0
 800246e:	4619      	mov	r1, r3
 8002470:	4813      	ldr	r0, [pc, #76]	@ (80024c0 <MX_TIM1_Init+0x138>)
 8002472:	f001 fe31 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800247c:	f7ff fd36 	bl	8001eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 800248c:	2314      	movs	r3, #20
 800248e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002494:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002498:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4807      	ldr	r0, [pc, #28]	@ (80024c0 <MX_TIM1_Init+0x138>)
 80024a4:	f002 fc20 	bl	8004ce8 <HAL_TIMEx_ConfigBreakDeadTime>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80024ae:	f7ff fd1d 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024b2:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <MX_TIM1_Init+0x138>)
 80024b4:	f000 f890 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 80024b8:	bf00      	nop
 80024ba:	3758      	adds	r7, #88	@ 0x58
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20001484 	.word	0x20001484
 80024c4:	40010000 	.word	0x40010000

080024c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024dc:	463b      	mov	r3, r7
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <MX_TIM2_Init+0x94>)
 80024e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <MX_TIM2_Init+0x94>)
 80024ee:	22b3      	movs	r2, #179	@ 0xb3
 80024f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	@ (800255c <MX_TIM2_Init+0x94>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80024f8:	4b18      	ldr	r3, [pc, #96]	@ (800255c <MX_TIM2_Init+0x94>)
 80024fa:	f04f 32ff 	mov.w	r2, #4294967295
 80024fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002500:	4b16      	ldr	r3, [pc, #88]	@ (800255c <MX_TIM2_Init+0x94>)
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002506:	4b15      	ldr	r3, [pc, #84]	@ (800255c <MX_TIM2_Init+0x94>)
 8002508:	2280      	movs	r2, #128	@ 0x80
 800250a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800250c:	4813      	ldr	r0, [pc, #76]	@ (800255c <MX_TIM2_Init+0x94>)
 800250e:	f001 faa9 	bl	8003a64 <HAL_TIM_Base_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002518:	f7ff fce8 	bl	8001eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002520:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002522:	f107 0308 	add.w	r3, r7, #8
 8002526:	4619      	mov	r1, r3
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <MX_TIM2_Init+0x94>)
 800252a:	f001 fe97 	bl	800425c <HAL_TIM_ConfigClockSource>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002534:	f7ff fcda 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002540:	463b      	mov	r3, r7
 8002542:	4619      	mov	r1, r3
 8002544:	4805      	ldr	r0, [pc, #20]	@ (800255c <MX_TIM2_Init+0x94>)
 8002546:	f002 fb53 	bl	8004bf0 <HAL_TIMEx_MasterConfigSynchronization>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002550:	f7ff fccc 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200014cc 	.word	0x200014cc

08002560 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a18      	ldr	r2, [pc, #96]	@ (80025d0 <HAL_TIM_Base_MspInit+0x70>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d116      	bne.n	80025a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b17      	ldr	r3, [pc, #92]	@ (80025d4 <HAL_TIM_Base_MspInit+0x74>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a16      	ldr	r2, [pc, #88]	@ (80025d4 <HAL_TIM_Base_MspInit+0x74>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <HAL_TIM_Base_MspInit+0x74>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	2019      	movs	r0, #25
 8002594:	f000 f9f5 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002598:	2019      	movs	r0, #25
 800259a:	f000 fa0e 	bl	80029ba <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800259e:	e012      	b.n	80025c6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a8:	d10d      	bne.n	80025c6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_TIM_Base_MspInit+0x74>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	4a08      	ldr	r2, [pc, #32]	@ (80025d4 <HAL_TIM_Base_MspInit+0x74>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_TIM_Base_MspInit+0x74>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40010000 	.word	0x40010000
 80025d4:	40023800 	.word	0x40023800

080025d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <HAL_TIM_MspPostInit+0x68>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d11e      	bne.n	8002638 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <HAL_TIM_MspPostInit+0x6c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a10      	ldr	r2, [pc, #64]	@ (8002644 <HAL_TIM_MspPostInit+0x6c>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b0e      	ldr	r3, [pc, #56]	@ (8002644 <HAL_TIM_MspPostInit+0x6c>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002616:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800261a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002628:	2301      	movs	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	4619      	mov	r1, r3
 8002632:	4805      	ldr	r0, [pc, #20]	@ (8002648 <HAL_TIM_MspPostInit+0x70>)
 8002634:	f000 f9dc 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002638:	bf00      	nop
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40010000 	.word	0x40010000
 8002644:	40023800 	.word	0x40023800
 8002648:	40020000 	.word	0x40020000

0800264c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800264c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002684 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002650:	f7ff fe88 	bl	8002364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002654:	480c      	ldr	r0, [pc, #48]	@ (8002688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002656:	490d      	ldr	r1, [pc, #52]	@ (800268c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002658:	4a0d      	ldr	r2, [pc, #52]	@ (8002690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800265c:	e002      	b.n	8002664 <LoopCopyDataInit>

0800265e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002662:	3304      	adds	r3, #4

08002664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002668:	d3f9      	bcc.n	800265e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266a:	4a0a      	ldr	r2, [pc, #40]	@ (8002694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800266c:	4c0a      	ldr	r4, [pc, #40]	@ (8002698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002670:	e001      	b.n	8002676 <LoopFillZerobss>

08002672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002674:	3204      	adds	r2, #4

08002676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002678:	d3fb      	bcc.n	8002672 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800267a:	f002 fd59 	bl	8005130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267e:	f7ff fb1f 	bl	8001cc0 <main>
  bx  lr    
 8002682:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002684:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800268c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002690:	080075e0 	.word	0x080075e0
  ldr r2, =_sbss
 8002694:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002698:	20001664 	.word	0x20001664

0800269c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800269c:	e7fe      	b.n	800269c <ADC_IRQHandler>
	...

080026a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a4:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <HAL_Init+0x40>)
 80026aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_Init+0x40>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <HAL_Init+0x40>)
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026bc:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <HAL_Init+0x40>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a07      	ldr	r2, [pc, #28]	@ (80026e0 <HAL_Init+0x40>)
 80026c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c8:	2003      	movs	r0, #3
 80026ca:	f000 f94f 	bl	800296c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ce:	200f      	movs	r0, #15
 80026d0:	f000 f808 	bl	80026e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d4:	f7ff fd16 	bl	8002104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023c00 	.word	0x40023c00

080026e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026ec:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_InitTick+0x54>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b12      	ldr	r3, [pc, #72]	@ (800273c <HAL_InitTick+0x58>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f967 	bl	80029d6 <HAL_SYSTICK_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e00e      	b.n	8002730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b0f      	cmp	r3, #15
 8002716:	d80a      	bhi.n	800272e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002718:	2200      	movs	r2, #0
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	f000 f92f 	bl	8002982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002724:	4a06      	ldr	r2, [pc, #24]	@ (8002740 <HAL_InitTick+0x5c>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000038 	.word	0x20000038
 800273c:	20000040 	.word	0x20000040
 8002740:	2000003c 	.word	0x2000003c

08002744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002748:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_IncTick+0x20>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_IncTick+0x24>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4413      	add	r3, r2
 8002754:	4a04      	ldr	r2, [pc, #16]	@ (8002768 <HAL_IncTick+0x24>)
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000040 	.word	0x20000040
 8002768:	20001514 	.word	0x20001514

0800276c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return uwTick;
 8002770:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <HAL_GetTick+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20001514 	.word	0x20001514

08002784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7ff ffee 	bl	800276c <HAL_GetTick>
 8002790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d005      	beq.n	80027aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800279e:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <HAL_Delay+0x44>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027aa:	bf00      	nop
 80027ac:	f7ff ffde 	bl	800276c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d8f7      	bhi.n	80027ac <HAL_Delay+0x28>
  {
  }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000040 	.word	0x20000040

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fe:	4a04      	ldr	r2, [pc, #16]	@ (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	60d3      	str	r3, [r2, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	@ (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	db0b      	blt.n	800285a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4907      	ldr	r1, [pc, #28]	@ (8002868 <__NVIC_EnableIRQ+0x38>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2001      	movs	r0, #1
 8002852:	fa00 f202 	lsl.w	r2, r0, r2
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100

0800286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0a      	blt.n	8002896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	490c      	ldr	r1, [pc, #48]	@ (80028b8 <__NVIC_SetPriority+0x4c>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	0112      	lsls	r2, r2, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	440b      	add	r3, r1
 8002890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002894:	e00a      	b.n	80028ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4908      	ldr	r1, [pc, #32]	@ (80028bc <__NVIC_SetPriority+0x50>)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3b04      	subs	r3, #4
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	761a      	strb	r2, [r3, #24]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	@ 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f1c3 0307 	rsb	r3, r3, #7
 80028da:	2b04      	cmp	r3, #4
 80028dc:	bf28      	it	cs
 80028de:	2304      	movcs	r3, #4
 80028e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d902      	bls.n	80028f0 <NVIC_EncodePriority+0x30>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3b03      	subs	r3, #3
 80028ee:	e000      	b.n	80028f2 <NVIC_EncodePriority+0x32>
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	401a      	ands	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43d9      	mvns	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	4313      	orrs	r3, r2
         );
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	@ 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002938:	d301      	bcc.n	800293e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293a:	2301      	movs	r3, #1
 800293c:	e00f      	b.n	800295e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <SysTick_Config+0x40>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002946:	210f      	movs	r1, #15
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f7ff ff8e 	bl	800286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <SysTick_Config+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002956:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <SysTick_Config+0x40>)
 8002958:	2207      	movs	r2, #7
 800295a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff29 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002994:	f7ff ff3e 	bl	8002814 <__NVIC_GetPriorityGrouping>
 8002998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	f7ff ff8e 	bl	80028c0 <NVIC_EncodePriority>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff5d 	bl	800286c <__NVIC_SetPriority>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff31 	bl	8002830 <__NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ffa2 	bl	8002928 <SysTick_Config>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	@ 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e165      	b.n	8002cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 8154 	bne.w	8002cd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d005      	beq.n	8002a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d130      	bne.n	8002aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 0201 	and.w	r2, r3, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d017      	beq.n	8002ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d123      	bne.n	8002b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80ae 	beq.w	8002cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf0 <HAL_GPIO_Init+0x300>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002cf0 <HAL_GPIO_Init+0x300>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b86:	4b5a      	ldr	r3, [pc, #360]	@ (8002cf0 <HAL_GPIO_Init+0x300>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b92:	4a58      	ldr	r2, [pc, #352]	@ (8002cf4 <HAL_GPIO_Init+0x304>)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8002cf8 <HAL_GPIO_Init+0x308>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d025      	beq.n	8002c0a <HAL_GPIO_Init+0x21a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8002cfc <HAL_GPIO_Init+0x30c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01f      	beq.n	8002c06 <HAL_GPIO_Init+0x216>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d00 <HAL_GPIO_Init+0x310>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0x212>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8002d04 <HAL_GPIO_Init+0x314>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0x20e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002d08 <HAL_GPIO_Init+0x318>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <HAL_GPIO_Init+0x20a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4a      	ldr	r2, [pc, #296]	@ (8002d0c <HAL_GPIO_Init+0x31c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x206>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a49      	ldr	r2, [pc, #292]	@ (8002d10 <HAL_GPIO_Init+0x320>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_GPIO_Init+0x202>
 8002bee:	2306      	movs	r3, #6
 8002bf0:	e00c      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e00a      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002bf6:	2305      	movs	r3, #5
 8002bf8:	e008      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	e006      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e004      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e002      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	f002 0203 	and.w	r2, r2, #3
 8002c12:	0092      	lsls	r2, r2, #2
 8002c14:	4093      	lsls	r3, r2
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c1c:	4935      	ldr	r1, [pc, #212]	@ (8002cf4 <HAL_GPIO_Init+0x304>)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	3302      	adds	r3, #2
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d14 <HAL_GPIO_Init+0x324>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4e:	4a31      	ldr	r2, [pc, #196]	@ (8002d14 <HAL_GPIO_Init+0x324>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c54:	4b2f      	ldr	r3, [pc, #188]	@ (8002d14 <HAL_GPIO_Init+0x324>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c78:	4a26      	ldr	r2, [pc, #152]	@ (8002d14 <HAL_GPIO_Init+0x324>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c7e:	4b25      	ldr	r3, [pc, #148]	@ (8002d14 <HAL_GPIO_Init+0x324>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d14 <HAL_GPIO_Init+0x324>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <HAL_GPIO_Init+0x324>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ccc:	4a11      	ldr	r2, [pc, #68]	@ (8002d14 <HAL_GPIO_Init+0x324>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b0f      	cmp	r3, #15
 8002cdc:	f67f ae96 	bls.w	8002a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	3724      	adds	r7, #36	@ 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	40020400 	.word	0x40020400
 8002d00:	40020800 	.word	0x40020800
 8002d04:	40020c00 	.word	0x40020c00
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40021400 	.word	0x40021400
 8002d10:	40021800 	.word	0x40021800
 8002d14:	40013c00 	.word	0x40013c00

08002d18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e0c7      	b.n	8002ec4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d34:	2201      	movs	r2, #1
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	f040 80b7 	bne.w	8002ebe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d50:	4a62      	ldr	r2, [pc, #392]	@ (8002edc <HAL_GPIO_DeInit+0x1c4>)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	089b      	lsrs	r3, r3, #2
 8002d56:	3302      	adds	r3, #2
 8002d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	220f      	movs	r2, #15
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a5a      	ldr	r2, [pc, #360]	@ (8002ee0 <HAL_GPIO_DeInit+0x1c8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d025      	beq.n	8002dc6 <HAL_GPIO_DeInit+0xae>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a59      	ldr	r2, [pc, #356]	@ (8002ee4 <HAL_GPIO_DeInit+0x1cc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01f      	beq.n	8002dc2 <HAL_GPIO_DeInit+0xaa>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a58      	ldr	r2, [pc, #352]	@ (8002ee8 <HAL_GPIO_DeInit+0x1d0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d019      	beq.n	8002dbe <HAL_GPIO_DeInit+0xa6>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a57      	ldr	r2, [pc, #348]	@ (8002eec <HAL_GPIO_DeInit+0x1d4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_GPIO_DeInit+0xa2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a56      	ldr	r2, [pc, #344]	@ (8002ef0 <HAL_GPIO_DeInit+0x1d8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00d      	beq.n	8002db6 <HAL_GPIO_DeInit+0x9e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a55      	ldr	r2, [pc, #340]	@ (8002ef4 <HAL_GPIO_DeInit+0x1dc>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <HAL_GPIO_DeInit+0x9a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a54      	ldr	r2, [pc, #336]	@ (8002ef8 <HAL_GPIO_DeInit+0x1e0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_GPIO_DeInit+0x96>
 8002daa:	2306      	movs	r3, #6
 8002dac:	e00c      	b.n	8002dc8 <HAL_GPIO_DeInit+0xb0>
 8002dae:	2307      	movs	r3, #7
 8002db0:	e00a      	b.n	8002dc8 <HAL_GPIO_DeInit+0xb0>
 8002db2:	2305      	movs	r3, #5
 8002db4:	e008      	b.n	8002dc8 <HAL_GPIO_DeInit+0xb0>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_DeInit+0xb0>
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e004      	b.n	8002dc8 <HAL_GPIO_DeInit+0xb0>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_DeInit+0xb0>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_DeInit+0xb0>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	f002 0203 	and.w	r2, r2, #3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	4093      	lsls	r3, r2
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d132      	bne.n	8002e3e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002dd8:	4b48      	ldr	r3, [pc, #288]	@ (8002efc <HAL_GPIO_DeInit+0x1e4>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	4946      	ldr	r1, [pc, #280]	@ (8002efc <HAL_GPIO_DeInit+0x1e4>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002de6:	4b45      	ldr	r3, [pc, #276]	@ (8002efc <HAL_GPIO_DeInit+0x1e4>)
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	4943      	ldr	r1, [pc, #268]	@ (8002efc <HAL_GPIO_DeInit+0x1e4>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002df4:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <HAL_GPIO_DeInit+0x1e4>)
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	493f      	ldr	r1, [pc, #252]	@ (8002efc <HAL_GPIO_DeInit+0x1e4>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e02:	4b3e      	ldr	r3, [pc, #248]	@ (8002efc <HAL_GPIO_DeInit+0x1e4>)
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	493c      	ldr	r1, [pc, #240]	@ (8002efc <HAL_GPIO_DeInit+0x1e4>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e20:	4a2e      	ldr	r2, [pc, #184]	@ (8002edc <HAL_GPIO_DeInit+0x1c4>)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	3302      	adds	r3, #2
 8002e28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	482a      	ldr	r0, [pc, #168]	@ (8002edc <HAL_GPIO_DeInit+0x1c4>)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	400a      	ands	r2, r1
 8002e38:	3302      	adds	r3, #2
 8002e3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2103      	movs	r1, #3
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	401a      	ands	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	08da      	lsrs	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3208      	adds	r2, #8
 8002e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	220f      	movs	r2, #15
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	08d2      	lsrs	r2, r2, #3
 8002e74:	4019      	ands	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3208      	adds	r2, #8
 8002e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2103      	movs	r1, #3
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	401a      	ands	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	2103      	movs	r1, #3
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	401a      	ands	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b0f      	cmp	r3, #15
 8002ec8:	f67f af34 	bls.w	8002d34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	40020c00 	.word	0x40020c00
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40021400 	.word	0x40021400
 8002ef8:	40021800 	.word	0x40021800
 8002efc:	40013c00 	.word	0x40013c00

08002f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f10:	787b      	ldrb	r3, [r7, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f1c:	e003      	b.n	8002f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f1e:	887b      	ldrh	r3, [r7, #2]
 8002f20:	041a      	lsls	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	619a      	str	r2, [r3, #24]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f44:	887a      	ldrh	r2, [r7, #2]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	041a      	lsls	r2, r3, #16
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	43d9      	mvns	r1, r3
 8002f50:	887b      	ldrh	r3, [r7, #2]
 8002f52:	400b      	ands	r3, r1
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	619a      	str	r2, [r3, #24]
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	4b20      	ldr	r3, [pc, #128]	@ (8002ff8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <HAL_PWREx_EnableOverDrive+0x94>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f94:	f7ff fbea 	bl	800276c <HAL_GetTick>
 8002f98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f9a:	e009      	b.n	8002fb0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f9c:	f7ff fbe6 	bl	800276c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002faa:	d901      	bls.n	8002fb0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e01f      	b.n	8002ff0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fb0:	4b13      	ldr	r3, [pc, #76]	@ (8003000 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fbc:	d1ee      	bne.n	8002f9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fbe:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fc4:	f7ff fbd2 	bl	800276c <HAL_GetTick>
 8002fc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fca:	e009      	b.n	8002fe0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fcc:	f7ff fbce 	bl	800276c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fda:	d901      	bls.n	8002fe0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e007      	b.n	8002ff0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fe0:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fec:	d1ee      	bne.n	8002fcc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	420e0040 	.word	0x420e0040
 8003000:	40007000 	.word	0x40007000
 8003004:	420e0044 	.word	0x420e0044

08003008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0cc      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b68      	ldr	r3, [pc, #416]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d90c      	bls.n	8003044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b65      	ldr	r3, [pc, #404]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b63      	ldr	r3, [pc, #396]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b8      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800305c:	4b59      	ldr	r3, [pc, #356]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a58      	ldr	r2, [pc, #352]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003066:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003074:	4b53      	ldr	r3, [pc, #332]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a52      	ldr	r2, [pc, #328]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800307e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003080:	4b50      	ldr	r3, [pc, #320]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	494d      	ldr	r1, [pc, #308]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d044      	beq.n	8003128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b47      	ldr	r3, [pc, #284]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d119      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c6:	4b3f      	ldr	r3, [pc, #252]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	4b3b      	ldr	r3, [pc, #236]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e067      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e6:	4b37      	ldr	r3, [pc, #220]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4934      	ldr	r1, [pc, #208]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f8:	f7ff fb38 	bl	800276c <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7ff fb34 	bl	800276c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e04f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	4b2b      	ldr	r3, [pc, #172]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 020c 	and.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	429a      	cmp	r2, r3
 8003126:	d1eb      	bne.n	8003100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003128:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d20c      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b22      	ldr	r3, [pc, #136]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b20      	ldr	r3, [pc, #128]	@ (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e032      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4916      	ldr	r1, [pc, #88]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800317a:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490e      	ldr	r1, [pc, #56]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800318e:	f000 f821 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003192:	4602      	mov	r2, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	490a      	ldr	r1, [pc, #40]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	fa22 f303 	lsr.w	r3, r2, r3
 80031a6:	4a09      	ldr	r2, [pc, #36]	@ (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031aa:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fa98 	bl	80026e4 <HAL_InitTick>

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023c00 	.word	0x40023c00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08007308 	.word	0x08007308
 80031cc:	20000038 	.word	0x20000038
 80031d0:	2000003c 	.word	0x2000003c

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d8:	b0a6      	sub	sp, #152	@ 0x98
 80031da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031fa:	4bc8      	ldr	r3, [pc, #800]	@ (800351c <HAL_RCC_GetSysClockFreq+0x348>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b0c      	cmp	r3, #12
 8003204:	f200 817e 	bhi.w	8003504 <HAL_RCC_GetSysClockFreq+0x330>
 8003208:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <HAL_RCC_GetSysClockFreq+0x3c>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003245 	.word	0x08003245
 8003214:	08003505 	.word	0x08003505
 8003218:	08003505 	.word	0x08003505
 800321c:	08003505 	.word	0x08003505
 8003220:	0800324d 	.word	0x0800324d
 8003224:	08003505 	.word	0x08003505
 8003228:	08003505 	.word	0x08003505
 800322c:	08003505 	.word	0x08003505
 8003230:	08003255 	.word	0x08003255
 8003234:	08003505 	.word	0x08003505
 8003238:	08003505 	.word	0x08003505
 800323c:	08003505 	.word	0x08003505
 8003240:	080033bf 	.word	0x080033bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003244:	4bb6      	ldr	r3, [pc, #728]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800324a:	e15f      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800324c:	4bb5      	ldr	r3, [pc, #724]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x350>)
 800324e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003252:	e15b      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003254:	4bb1      	ldr	r3, [pc, #708]	@ (800351c <HAL_RCC_GetSysClockFreq+0x348>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800325c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003260:	4bae      	ldr	r3, [pc, #696]	@ (800351c <HAL_RCC_GetSysClockFreq+0x348>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d031      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326c:	4bab      	ldr	r3, [pc, #684]	@ (800351c <HAL_RCC_GetSysClockFreq+0x348>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	2200      	movs	r2, #0
 8003274:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003276:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003278:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800327a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003280:	2300      	movs	r3, #0
 8003282:	667b      	str	r3, [r7, #100]	@ 0x64
 8003284:	4ba7      	ldr	r3, [pc, #668]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x350>)
 8003286:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800328a:	462a      	mov	r2, r5
 800328c:	fb03 f202 	mul.w	r2, r3, r2
 8003290:	2300      	movs	r3, #0
 8003292:	4621      	mov	r1, r4
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	4aa2      	ldr	r2, [pc, #648]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x350>)
 800329c:	4621      	mov	r1, r4
 800329e:	fba1 1202 	umull	r1, r2, r1, r2
 80032a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032a4:	460a      	mov	r2, r1
 80032a6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80032a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80032aa:	4413      	add	r3, r2
 80032ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032b2:	2200      	movs	r2, #0
 80032b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80032b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80032c0:	f7fd fbdc 	bl	8000a7c <__aeabi_uldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4613      	mov	r3, r2
 80032ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032ce:	e064      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d0:	4b92      	ldr	r3, [pc, #584]	@ (800351c <HAL_RCC_GetSysClockFreq+0x348>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	2200      	movs	r2, #0
 80032d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80032da:	657a      	str	r2, [r7, #84]	@ 0x54
 80032dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032e4:	2300      	movs	r3, #0
 80032e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80032ec:	4622      	mov	r2, r4
 80032ee:	462b      	mov	r3, r5
 80032f0:	f04f 0000 	mov.w	r0, #0
 80032f4:	f04f 0100 	mov.w	r1, #0
 80032f8:	0159      	lsls	r1, r3, #5
 80032fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fe:	0150      	lsls	r0, r2, #5
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4621      	mov	r1, r4
 8003306:	1a51      	subs	r1, r2, r1
 8003308:	6139      	str	r1, [r7, #16]
 800330a:	4629      	mov	r1, r5
 800330c:	eb63 0301 	sbc.w	r3, r3, r1
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800331e:	4659      	mov	r1, fp
 8003320:	018b      	lsls	r3, r1, #6
 8003322:	4651      	mov	r1, sl
 8003324:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003328:	4651      	mov	r1, sl
 800332a:	018a      	lsls	r2, r1, #6
 800332c:	4651      	mov	r1, sl
 800332e:	ebb2 0801 	subs.w	r8, r2, r1
 8003332:	4659      	mov	r1, fp
 8003334:	eb63 0901 	sbc.w	r9, r3, r1
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003344:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003348:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800334c:	4690      	mov	r8, r2
 800334e:	4699      	mov	r9, r3
 8003350:	4623      	mov	r3, r4
 8003352:	eb18 0303 	adds.w	r3, r8, r3
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	462b      	mov	r3, r5
 800335a:	eb49 0303 	adc.w	r3, r9, r3
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800336c:	4629      	mov	r1, r5
 800336e:	028b      	lsls	r3, r1, #10
 8003370:	4621      	mov	r1, r4
 8003372:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003376:	4621      	mov	r1, r4
 8003378:	028a      	lsls	r2, r1, #10
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003382:	2200      	movs	r2, #0
 8003384:	643b      	str	r3, [r7, #64]	@ 0x40
 8003386:	647a      	str	r2, [r7, #68]	@ 0x44
 8003388:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800338c:	f7fd fb76 	bl	8000a7c <__aeabi_uldivmod>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4613      	mov	r3, r2
 8003396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800339a:	4b60      	ldr	r3, [pc, #384]	@ (800351c <HAL_RCC_GetSysClockFreq+0x348>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	0c1b      	lsrs	r3, r3, #16
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	3301      	adds	r3, #1
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80033ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80033bc:	e0a6      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033be:	4b57      	ldr	r3, [pc, #348]	@ (800351c <HAL_RCC_GetSysClockFreq+0x348>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ca:	4b54      	ldr	r3, [pc, #336]	@ (800351c <HAL_RCC_GetSysClockFreq+0x348>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d02a      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d6:	4b51      	ldr	r3, [pc, #324]	@ (800351c <HAL_RCC_GetSysClockFreq+0x348>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	2200      	movs	r2, #0
 80033de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033e8:	2100      	movs	r1, #0
 80033ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x350>)
 80033ec:	fb03 f201 	mul.w	r2, r3, r1
 80033f0:	2300      	movs	r3, #0
 80033f2:	fb00 f303 	mul.w	r3, r0, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x350>)
 80033fa:	fba0 1202 	umull	r1, r2, r0, r2
 80033fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003400:	460a      	mov	r2, r1
 8003402:	673a      	str	r2, [r7, #112]	@ 0x70
 8003404:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003406:	4413      	add	r3, r2
 8003408:	677b      	str	r3, [r7, #116]	@ 0x74
 800340a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800340e:	2200      	movs	r2, #0
 8003410:	633b      	str	r3, [r7, #48]	@ 0x30
 8003412:	637a      	str	r2, [r7, #52]	@ 0x34
 8003414:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003418:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800341c:	f7fd fb2e 	bl	8000a7c <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4613      	mov	r3, r2
 8003426:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800342a:	e05b      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342c:	4b3b      	ldr	r3, [pc, #236]	@ (800351c <HAL_RCC_GetSysClockFreq+0x348>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	2200      	movs	r2, #0
 8003434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003436:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343e:	623b      	str	r3, [r7, #32]
 8003440:	2300      	movs	r3, #0
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
 8003444:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003448:	4642      	mov	r2, r8
 800344a:	464b      	mov	r3, r9
 800344c:	f04f 0000 	mov.w	r0, #0
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	0159      	lsls	r1, r3, #5
 8003456:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345a:	0150      	lsls	r0, r2, #5
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4641      	mov	r1, r8
 8003462:	ebb2 0a01 	subs.w	sl, r2, r1
 8003466:	4649      	mov	r1, r9
 8003468:	eb63 0b01 	sbc.w	fp, r3, r1
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003478:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800347c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003480:	ebb2 040a 	subs.w	r4, r2, sl
 8003484:	eb63 050b 	sbc.w	r5, r3, fp
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	00eb      	lsls	r3, r5, #3
 8003492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003496:	00e2      	lsls	r2, r4, #3
 8003498:	4614      	mov	r4, r2
 800349a:	461d      	mov	r5, r3
 800349c:	4643      	mov	r3, r8
 800349e:	18e3      	adds	r3, r4, r3
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	464b      	mov	r3, r9
 80034a4:	eb45 0303 	adc.w	r3, r5, r3
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034b6:	4629      	mov	r1, r5
 80034b8:	028b      	lsls	r3, r1, #10
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c0:	4621      	mov	r1, r4
 80034c2:	028a      	lsls	r2, r1, #10
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034cc:	2200      	movs	r2, #0
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	61fa      	str	r2, [r7, #28]
 80034d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d6:	f7fd fad1 	bl	8000a7c <__aeabi_uldivmod>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4613      	mov	r3, r2
 80034e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034e4:	4b0d      	ldr	r3, [pc, #52]	@ (800351c <HAL_RCC_GetSysClockFreq+0x348>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	0f1b      	lsrs	r3, r3, #28
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80034f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003502:	e003      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003504:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800350a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003510:	4618      	mov	r0, r3
 8003512:	3798      	adds	r7, #152	@ 0x98
 8003514:	46bd      	mov	sp, r7
 8003516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	00f42400 	.word	0x00f42400
 8003524:	017d7840 	.word	0x017d7840

08003528 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e28d      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8083 	beq.w	800364e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003548:	4b94      	ldr	r3, [pc, #592]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b04      	cmp	r3, #4
 8003552:	d019      	beq.n	8003588 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003554:	4b91      	ldr	r3, [pc, #580]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 030c 	and.w	r3, r3, #12
        || \
 800355c:	2b08      	cmp	r3, #8
 800355e:	d106      	bne.n	800356e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003560:	4b8e      	ldr	r3, [pc, #568]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003568:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800356c:	d00c      	beq.n	8003588 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356e:	4b8b      	ldr	r3, [pc, #556]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003576:	2b0c      	cmp	r3, #12
 8003578:	d112      	bne.n	80035a0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357a:	4b88      	ldr	r3, [pc, #544]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003582:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003586:	d10b      	bne.n	80035a0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	4b84      	ldr	r3, [pc, #528]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d05b      	beq.n	800364c <HAL_RCC_OscConfig+0x124>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d157      	bne.n	800364c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e25a      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x90>
 80035aa:	4b7c      	ldr	r3, [pc, #496]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a7b      	ldr	r2, [pc, #492]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e01d      	b.n	80035f4 <HAL_RCC_OscConfig+0xcc>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0xb4>
 80035c2:	4b76      	ldr	r3, [pc, #472]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a75      	ldr	r2, [pc, #468]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b73      	ldr	r3, [pc, #460]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a72      	ldr	r2, [pc, #456]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0xcc>
 80035dc:	4b6f      	ldr	r3, [pc, #444]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a6e      	ldr	r2, [pc, #440]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b6c      	ldr	r3, [pc, #432]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a6b      	ldr	r2, [pc, #428]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7ff f8b6 	bl	800276c <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7ff f8b2 	bl	800276c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	@ 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e21f      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b61      	ldr	r3, [pc, #388]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0xdc>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7ff f8a2 	bl	800276c <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7ff f89e 	bl	800276c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	@ 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e20b      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	4b57      	ldr	r3, [pc, #348]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x104>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d06f      	beq.n	800373a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800365a:	4b50      	ldr	r3, [pc, #320]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b00      	cmp	r3, #0
 8003664:	d017      	beq.n	8003696 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003666:	4b4d      	ldr	r3, [pc, #308]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
        || \
 800366e:	2b08      	cmp	r3, #8
 8003670:	d105      	bne.n	800367e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003672:	4b4a      	ldr	r3, [pc, #296]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367e:	4b47      	ldr	r3, [pc, #284]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b44      	ldr	r3, [pc, #272]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d116      	bne.n	80036c4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	4b41      	ldr	r3, [pc, #260]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x186>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e1d3      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ae:	4b3b      	ldr	r3, [pc, #236]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4937      	ldr	r1, [pc, #220]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	e03a      	b.n	800373a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036cc:	4b34      	ldr	r3, [pc, #208]	@ (80037a0 <HAL_RCC_OscConfig+0x278>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7ff f84b 	bl	800276c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036da:	f7ff f847 	bl	800276c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e1b4      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	4b2b      	ldr	r3, [pc, #172]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b28      	ldr	r3, [pc, #160]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4925      	ldr	r1, [pc, #148]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
 800370c:	e015      	b.n	800373a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370e:	4b24      	ldr	r3, [pc, #144]	@ (80037a0 <HAL_RCC_OscConfig+0x278>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7ff f82a 	bl	800276c <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371c:	f7ff f826 	bl	800276c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e193      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d036      	beq.n	80037b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <HAL_RCC_OscConfig+0x27c>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7ff f80a 	bl	800276c <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375c:	f7ff f806 	bl	800276c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e173      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x234>
 800377a:	e01b      	b.n	80037b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <HAL_RCC_OscConfig+0x27c>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003782:	f7fe fff3 	bl	800276c <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003788:	e00e      	b.n	80037a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378a:	f7fe ffef 	bl	800276c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d907      	bls.n	80037a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e15c      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
 800379c:	40023800 	.word	0x40023800
 80037a0:	42470000 	.word	0x42470000
 80037a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b8a      	ldr	r3, [pc, #552]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80037aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ea      	bne.n	800378a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8097 	beq.w	80038f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b83      	ldr	r3, [pc, #524]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b7f      	ldr	r3, [pc, #508]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	4a7e      	ldr	r2, [pc, #504]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e2:	4b7c      	ldr	r3, [pc, #496]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b79      	ldr	r3, [pc, #484]	@ (80039d8 <HAL_RCC_OscConfig+0x4b0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fe:	4b76      	ldr	r3, [pc, #472]	@ (80039d8 <HAL_RCC_OscConfig+0x4b0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a75      	ldr	r2, [pc, #468]	@ (80039d8 <HAL_RCC_OscConfig+0x4b0>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fe ffaf 	bl	800276c <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fe ffab 	bl	800276c <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e118      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	4b6c      	ldr	r3, [pc, #432]	@ (80039d8 <HAL_RCC_OscConfig+0x4b0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x31e>
 8003838:	4b66      	ldr	r3, [pc, #408]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383c:	4a65      	ldr	r2, [pc, #404]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	@ 0x70
 8003844:	e01c      	b.n	8003880 <HAL_RCC_OscConfig+0x358>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x340>
 800384e:	4b61      	ldr	r3, [pc, #388]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003852:	4a60      	ldr	r2, [pc, #384]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	6713      	str	r3, [r2, #112]	@ 0x70
 800385a:	4b5e      	ldr	r3, [pc, #376]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	4a5d      	ldr	r2, [pc, #372]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6713      	str	r3, [r2, #112]	@ 0x70
 8003866:	e00b      	b.n	8003880 <HAL_RCC_OscConfig+0x358>
 8003868:	4b5a      	ldr	r3, [pc, #360]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386c:	4a59      	ldr	r2, [pc, #356]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	6713      	str	r3, [r2, #112]	@ 0x70
 8003874:	4b57      	ldr	r3, [pc, #348]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003878:	4a56      	ldr	r2, [pc, #344]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 800387a:	f023 0304 	bic.w	r3, r3, #4
 800387e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d015      	beq.n	80038b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fe ff70 	bl	800276c <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fe ff6c 	bl	800276c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0d7      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	4b4b      	ldr	r3, [pc, #300]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ee      	beq.n	8003890 <HAL_RCC_OscConfig+0x368>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fe ff5a 	bl	800276c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fe ff56 	bl	800276c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0c1      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d2:	4b40      	ldr	r3, [pc, #256]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1ee      	bne.n	80038bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b3b      	ldr	r3, [pc, #236]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	4a3a      	ldr	r2, [pc, #232]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80ad 	beq.w	8003a54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038fa:	4b36      	ldr	r3, [pc, #216]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b08      	cmp	r3, #8
 8003904:	d060      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d145      	bne.n	800399a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	4b33      	ldr	r3, [pc, #204]	@ (80039dc <HAL_RCC_OscConfig+0x4b4>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe ff2a 	bl	800276c <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe ff26 	bl	800276c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e093      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	4b29      	ldr	r3, [pc, #164]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	019b      	lsls	r3, r3, #6
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	3b01      	subs	r3, #1
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	071b      	lsls	r3, r3, #28
 8003966:	491b      	ldr	r1, [pc, #108]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800396c:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <HAL_RCC_OscConfig+0x4b4>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fe fefb 	bl	800276c <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397a:	f7fe fef7 	bl	800276c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e064      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398c:	4b11      	ldr	r3, [pc, #68]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x452>
 8003998:	e05c      	b.n	8003a54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399a:	4b10      	ldr	r3, [pc, #64]	@ (80039dc <HAL_RCC_OscConfig+0x4b4>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fe fee4 	bl	800276c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fe fee0 	bl	800276c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e04d      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ba:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x480>
 80039c6:	e045      	b.n	8003a54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d107      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e040      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40007000 	.word	0x40007000
 80039dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a60 <HAL_RCC_OscConfig+0x538>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d030      	beq.n	8003a50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d129      	bne.n	8003a50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d122      	bne.n	8003a50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a10:	4013      	ands	r3, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d119      	bne.n	8003a50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d10f      	bne.n	8003a50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800

08003a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e041      	b.n	8003afa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fe fd68 	bl	8002560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f000 fcd4 	bl	8004450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d001      	beq.n	8003b1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e046      	b.n	8003baa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a23      	ldr	r2, [pc, #140]	@ (8003bb8 <HAL_TIM_Base_Start+0xb4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d022      	beq.n	8003b74 <HAL_TIM_Base_Start+0x70>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b36:	d01d      	beq.n	8003b74 <HAL_TIM_Base_Start+0x70>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bbc <HAL_TIM_Base_Start+0xb8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d018      	beq.n	8003b74 <HAL_TIM_Base_Start+0x70>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc0 <HAL_TIM_Base_Start+0xbc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <HAL_TIM_Base_Start+0x70>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc4 <HAL_TIM_Base_Start+0xc0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00e      	beq.n	8003b74 <HAL_TIM_Base_Start+0x70>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc8 <HAL_TIM_Base_Start+0xc4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d009      	beq.n	8003b74 <HAL_TIM_Base_Start+0x70>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a19      	ldr	r2, [pc, #100]	@ (8003bcc <HAL_TIM_Base_Start+0xc8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_TIM_Base_Start+0x70>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a18      	ldr	r2, [pc, #96]	@ (8003bd0 <HAL_TIM_Base_Start+0xcc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d111      	bne.n	8003b98 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d010      	beq.n	8003ba8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b96:	e007      	b.n	8003ba8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800
 8003bc4:	40000c00 	.word	0x40000c00
 8003bc8:	40010400 	.word	0x40010400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40001800 	.word	0x40001800

08003bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d001      	beq.n	8003bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e04e      	b.n	8003c8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a23      	ldr	r2, [pc, #140]	@ (8003c98 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d022      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x80>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c16:	d01d      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x80>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c9c <HAL_TIM_Base_Start_IT+0xc8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d018      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x80>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x80>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00e      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x80>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d009      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x80>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a19      	ldr	r2, [pc, #100]	@ (8003cac <HAL_TIM_Base_Start_IT+0xd8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x80>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a18      	ldr	r2, [pc, #96]	@ (8003cb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d111      	bne.n	8003c78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d010      	beq.n	8003c88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c76:	e007      	b.n	8003c88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800
 8003ca4:	40000c00 	.word	0x40000c00
 8003ca8:	40010400 	.word	0x40010400
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40001800 	.word	0x40001800

08003cb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e041      	b.n	8003d4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f839 	bl	8003d52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f000 fbac 	bl	8004450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <HAL_TIM_PWM_Start+0x24>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	bf14      	ite	ne
 8003d84:	2301      	movne	r3, #1
 8003d86:	2300      	moveq	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e022      	b.n	8003dd2 <HAL_TIM_PWM_Start+0x6a>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d109      	bne.n	8003da6 <HAL_TIM_PWM_Start+0x3e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e015      	b.n	8003dd2 <HAL_TIM_PWM_Start+0x6a>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d109      	bne.n	8003dc0 <HAL_TIM_PWM_Start+0x58>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e008      	b.n	8003dd2 <HAL_TIM_PWM_Start+0x6a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e07c      	b.n	8003ed4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_PWM_Start+0x82>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003de8:	e013      	b.n	8003e12 <HAL_TIM_PWM_Start+0xaa>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d104      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x92>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003df8:	e00b      	b.n	8003e12 <HAL_TIM_PWM_Start+0xaa>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d104      	bne.n	8003e0a <HAL_TIM_PWM_Start+0xa2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e08:	e003      	b.n	8003e12 <HAL_TIM_PWM_Start+0xaa>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2201      	movs	r2, #1
 8003e18:	6839      	ldr	r1, [r7, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fe08 	bl	8004a30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a2d      	ldr	r2, [pc, #180]	@ (8003edc <HAL_TIM_PWM_Start+0x174>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_TIM_PWM_Start+0xcc>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee0 <HAL_TIM_PWM_Start+0x178>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_PWM_Start+0xd0>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_TIM_PWM_Start+0xd2>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a22      	ldr	r2, [pc, #136]	@ (8003edc <HAL_TIM_PWM_Start+0x174>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d022      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x136>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e60:	d01d      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x136>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee4 <HAL_TIM_PWM_Start+0x17c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d018      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x136>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee8 <HAL_TIM_PWM_Start+0x180>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x136>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003eec <HAL_TIM_PWM_Start+0x184>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x136>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a16      	ldr	r2, [pc, #88]	@ (8003ee0 <HAL_TIM_PWM_Start+0x178>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x136>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a18      	ldr	r2, [pc, #96]	@ (8003ef0 <HAL_TIM_PWM_Start+0x188>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x136>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a16      	ldr	r2, [pc, #88]	@ (8003ef4 <HAL_TIM_PWM_Start+0x18c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d111      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b06      	cmp	r3, #6
 8003eae:	d010      	beq.n	8003ed2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec0:	e007      	b.n	8003ed2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40010400 	.word	0x40010400
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800
 8003eec:	40000c00 	.word	0x40000c00
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40001800 	.word	0x40001800

08003ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d020      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01b      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0202 	mvn.w	r2, #2
 8003f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fa65 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 8003f48:	e005      	b.n	8003f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fa57 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fa68 	bl	8004426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d020      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0204 	mvn.w	r2, #4
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fa3f 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fa31 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fa42 	bl	8004426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d020      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01b      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0208 	mvn.w	r2, #8
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fa19 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa0b 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fa1c 	bl	8004426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d020      	beq.n	8004040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01b      	beq.n	8004040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0210 	mvn.w	r2, #16
 8004010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2208      	movs	r2, #8
 8004016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f9f3 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f9e5 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f9f6 	bl	8004426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0201 	mvn.w	r2, #1
 800405c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9c3 	bl	80043ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00c      	beq.n	8004088 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fe8c 	bl	8004da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f9c7 	bl	800443a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0220 	mvn.w	r2, #32
 80040c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fe5e 	bl	8004d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e0ae      	b.n	8004254 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b0c      	cmp	r3, #12
 8004102:	f200 809f 	bhi.w	8004244 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004106:	a201      	add	r2, pc, #4	@ (adr r2, 800410c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004141 	.word	0x08004141
 8004110:	08004245 	.word	0x08004245
 8004114:	08004245 	.word	0x08004245
 8004118:	08004245 	.word	0x08004245
 800411c:	08004181 	.word	0x08004181
 8004120:	08004245 	.word	0x08004245
 8004124:	08004245 	.word	0x08004245
 8004128:	08004245 	.word	0x08004245
 800412c:	080041c3 	.word	0x080041c3
 8004130:	08004245 	.word	0x08004245
 8004134:	08004245 	.word	0x08004245
 8004138:	08004245 	.word	0x08004245
 800413c:	08004203 	.word	0x08004203
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fa28 	bl	800459c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0208 	orr.w	r2, r2, #8
 800415a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0204 	bic.w	r2, r2, #4
 800416a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6999      	ldr	r1, [r3, #24]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	619a      	str	r2, [r3, #24]
      break;
 800417e:	e064      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fa78 	bl	800467c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800419a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6999      	ldr	r1, [r3, #24]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	021a      	lsls	r2, r3, #8
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	619a      	str	r2, [r3, #24]
      break;
 80041c0:	e043      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 facd 	bl	8004768 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0208 	orr.w	r2, r2, #8
 80041dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0204 	bic.w	r2, r2, #4
 80041ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69d9      	ldr	r1, [r3, #28]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	61da      	str	r2, [r3, #28]
      break;
 8004200:	e023      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fb21 	bl	8004850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800421c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69d9      	ldr	r1, [r3, #28]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	021a      	lsls	r2, r3, #8
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	61da      	str	r2, [r3, #28]
      break;
 8004242:	e002      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
      break;
 8004248:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004252:	7dfb      	ldrb	r3, [r7, #23]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_TIM_ConfigClockSource+0x1c>
 8004274:	2302      	movs	r3, #2
 8004276:	e0b4      	b.n	80043e2 <HAL_TIM_ConfigClockSource+0x186>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800429e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b0:	d03e      	beq.n	8004330 <HAL_TIM_ConfigClockSource+0xd4>
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b6:	f200 8087 	bhi.w	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042be:	f000 8086 	beq.w	80043ce <HAL_TIM_ConfigClockSource+0x172>
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c6:	d87f      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042c8:	2b70      	cmp	r3, #112	@ 0x70
 80042ca:	d01a      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0xa6>
 80042cc:	2b70      	cmp	r3, #112	@ 0x70
 80042ce:	d87b      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d0:	2b60      	cmp	r3, #96	@ 0x60
 80042d2:	d050      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0x11a>
 80042d4:	2b60      	cmp	r3, #96	@ 0x60
 80042d6:	d877      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d8:	2b50      	cmp	r3, #80	@ 0x50
 80042da:	d03c      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0xfa>
 80042dc:	2b50      	cmp	r3, #80	@ 0x50
 80042de:	d873      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e0:	2b40      	cmp	r3, #64	@ 0x40
 80042e2:	d058      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x13a>
 80042e4:	2b40      	cmp	r3, #64	@ 0x40
 80042e6:	d86f      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e8:	2b30      	cmp	r3, #48	@ 0x30
 80042ea:	d064      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042ec:	2b30      	cmp	r3, #48	@ 0x30
 80042ee:	d86b      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d060      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d867      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d05c      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d05a      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004300:	e062      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004312:	f000 fb6d 	bl	80049f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	609a      	str	r2, [r3, #8]
      break;
 800432e:	e04f      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004340:	f000 fb56 	bl	80049f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004352:	609a      	str	r2, [r3, #8]
      break;
 8004354:	e03c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004362:	461a      	mov	r2, r3
 8004364:	f000 faca 	bl	80048fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2150      	movs	r1, #80	@ 0x50
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fb23 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 8004374:	e02c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004382:	461a      	mov	r2, r3
 8004384:	f000 fae9 	bl	800495a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2160      	movs	r1, #96	@ 0x60
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fb13 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 8004394:	e01c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a2:	461a      	mov	r2, r3
 80043a4:	f000 faaa 	bl	80048fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2140      	movs	r1, #64	@ 0x40
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fb03 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 80043b4:	e00c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f000 fafa 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 80043c6:	e003      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
      break;
 80043cc:	e000      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
	...

08004450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a43      	ldr	r2, [pc, #268]	@ (8004570 <TIM_Base_SetConfig+0x120>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <TIM_Base_SetConfig+0x40>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446e:	d00f      	beq.n	8004490 <TIM_Base_SetConfig+0x40>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a40      	ldr	r2, [pc, #256]	@ (8004574 <TIM_Base_SetConfig+0x124>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00b      	beq.n	8004490 <TIM_Base_SetConfig+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a3f      	ldr	r2, [pc, #252]	@ (8004578 <TIM_Base_SetConfig+0x128>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a3e      	ldr	r2, [pc, #248]	@ (800457c <TIM_Base_SetConfig+0x12c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3d      	ldr	r2, [pc, #244]	@ (8004580 <TIM_Base_SetConfig+0x130>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d108      	bne.n	80044a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a32      	ldr	r2, [pc, #200]	@ (8004570 <TIM_Base_SetConfig+0x120>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02b      	beq.n	8004502 <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b0:	d027      	beq.n	8004502 <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004574 <TIM_Base_SetConfig+0x124>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d023      	beq.n	8004502 <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004578 <TIM_Base_SetConfig+0x128>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d01f      	beq.n	8004502 <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2d      	ldr	r2, [pc, #180]	@ (800457c <TIM_Base_SetConfig+0x12c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01b      	beq.n	8004502 <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004580 <TIM_Base_SetConfig+0x130>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d017      	beq.n	8004502 <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004584 <TIM_Base_SetConfig+0x134>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004588 <TIM_Base_SetConfig+0x138>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00f      	beq.n	8004502 <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a29      	ldr	r2, [pc, #164]	@ (800458c <TIM_Base_SetConfig+0x13c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00b      	beq.n	8004502 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a28      	ldr	r2, [pc, #160]	@ (8004590 <TIM_Base_SetConfig+0x140>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a27      	ldr	r2, [pc, #156]	@ (8004594 <TIM_Base_SetConfig+0x144>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a26      	ldr	r2, [pc, #152]	@ (8004598 <TIM_Base_SetConfig+0x148>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d108      	bne.n	8004514 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a0e      	ldr	r2, [pc, #56]	@ (8004570 <TIM_Base_SetConfig+0x120>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0xf2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a10      	ldr	r2, [pc, #64]	@ (8004580 <TIM_Base_SetConfig+0x130>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d103      	bne.n	800454a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f043 0204 	orr.w	r2, r3, #4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	601a      	str	r2, [r3, #0]
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40010000 	.word	0x40010000
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	40000c00 	.word	0x40000c00
 8004580:	40010400 	.word	0x40010400
 8004584:	40014000 	.word	0x40014000
 8004588:	40014400 	.word	0x40014400
 800458c:	40014800 	.word	0x40014800
 8004590:	40001800 	.word	0x40001800
 8004594:	40001c00 	.word	0x40001c00
 8004598:	40002000 	.word	0x40002000

0800459c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f023 0201 	bic.w	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 0302 	bic.w	r3, r3, #2
 80045e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a20      	ldr	r2, [pc, #128]	@ (8004674 <TIM_OC1_SetConfig+0xd8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_OC1_SetConfig+0x64>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004678 <TIM_OC1_SetConfig+0xdc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d10c      	bne.n	800461a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f023 0308 	bic.w	r3, r3, #8
 8004606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f023 0304 	bic.w	r3, r3, #4
 8004618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a15      	ldr	r2, [pc, #84]	@ (8004674 <TIM_OC1_SetConfig+0xd8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_OC1_SetConfig+0x8e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a14      	ldr	r2, [pc, #80]	@ (8004678 <TIM_OC1_SetConfig+0xdc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d111      	bne.n	800464e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	621a      	str	r2, [r3, #32]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40010000 	.word	0x40010000
 8004678:	40010400 	.word	0x40010400

0800467c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f023 0210 	bic.w	r2, r3, #16
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f023 0320 	bic.w	r3, r3, #32
 80046c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a22      	ldr	r2, [pc, #136]	@ (8004760 <TIM_OC2_SetConfig+0xe4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_OC2_SetConfig+0x68>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a21      	ldr	r2, [pc, #132]	@ (8004764 <TIM_OC2_SetConfig+0xe8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d10d      	bne.n	8004700 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <TIM_OC2_SetConfig+0xe4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_OC2_SetConfig+0x94>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a16      	ldr	r2, [pc, #88]	@ (8004764 <TIM_OC2_SetConfig+0xe8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d113      	bne.n	8004738 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004716:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800471e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	621a      	str	r2, [r3, #32]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000
 8004764:	40010400 	.word	0x40010400

08004768 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0303 	bic.w	r3, r3, #3
 800479e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a21      	ldr	r2, [pc, #132]	@ (8004848 <TIM_OC3_SetConfig+0xe0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <TIM_OC3_SetConfig+0x66>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a20      	ldr	r2, [pc, #128]	@ (800484c <TIM_OC3_SetConfig+0xe4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d10d      	bne.n	80047ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a16      	ldr	r2, [pc, #88]	@ (8004848 <TIM_OC3_SetConfig+0xe0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d003      	beq.n	80047fa <TIM_OC3_SetConfig+0x92>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a15      	ldr	r2, [pc, #84]	@ (800484c <TIM_OC3_SetConfig+0xe4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d113      	bne.n	8004822 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	621a      	str	r2, [r3, #32]
}
 800483c:	bf00      	nop
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40010000 	.word	0x40010000
 800484c:	40010400 	.word	0x40010400

08004850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800489a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	031b      	lsls	r3, r3, #12
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a12      	ldr	r2, [pc, #72]	@ (80048f4 <TIM_OC4_SetConfig+0xa4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_OC4_SetConfig+0x68>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a11      	ldr	r2, [pc, #68]	@ (80048f8 <TIM_OC4_SetConfig+0xa8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d109      	bne.n	80048cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	019b      	lsls	r3, r3, #6
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40010400 	.word	0x40010400

080048fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0201 	bic.w	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f023 030a 	bic.w	r3, r3, #10
 8004938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	621a      	str	r2, [r3, #32]
}
 800494e:	bf00      	nop
 8004950:	371c      	adds	r7, #28
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800495a:	b480      	push	{r7}
 800495c:	b087      	sub	sp, #28
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f023 0210 	bic.w	r2, r3, #16
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	031b      	lsls	r3, r3, #12
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004996:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f043 0307 	orr.w	r3, r3, #7
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	609a      	str	r2, [r3, #8]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	021a      	lsls	r2, r3, #8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	609a      	str	r2, [r3, #8]
}
 8004a24:	bf00      	nop
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2201      	movs	r2, #1
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1a      	ldr	r2, [r3, #32]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	401a      	ands	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1a      	ldr	r2, [r3, #32]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	fa01 f303 	lsl.w	r3, r1, r3
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d109      	bne.n	8004aa0 <HAL_TIMEx_PWMN_Start+0x24>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	bf14      	ite	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	2300      	moveq	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	e022      	b.n	8004ae6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d109      	bne.n	8004aba <HAL_TIMEx_PWMN_Start+0x3e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	bf14      	ite	ne
 8004ab2:	2301      	movne	r3, #1
 8004ab4:	2300      	moveq	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e015      	b.n	8004ae6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d109      	bne.n	8004ad4 <HAL_TIMEx_PWMN_Start+0x58>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	e008      	b.n	8004ae6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e06d      	b.n	8004bca <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d104      	bne.n	8004afe <HAL_TIMEx_PWMN_Start+0x82>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004afc:	e013      	b.n	8004b26 <HAL_TIMEx_PWMN_Start+0xaa>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d104      	bne.n	8004b0e <HAL_TIMEx_PWMN_Start+0x92>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b0c:	e00b      	b.n	8004b26 <HAL_TIMEx_PWMN_Start+0xaa>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d104      	bne.n	8004b1e <HAL_TIMEx_PWMN_Start+0xa2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b1c:	e003      	b.n	8004b26 <HAL_TIMEx_PWMN_Start+0xaa>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	6839      	ldr	r1, [r7, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f940 	bl	8004db4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a22      	ldr	r2, [pc, #136]	@ (8004bd4 <HAL_TIMEx_PWMN_Start+0x158>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x118>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b56:	d01d      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x118>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x118>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1d      	ldr	r2, [pc, #116]	@ (8004bdc <HAL_TIMEx_PWMN_Start+0x160>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x118>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1b      	ldr	r2, [pc, #108]	@ (8004be0 <HAL_TIMEx_PWMN_Start+0x164>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x118>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004be4 <HAL_TIMEx_PWMN_Start+0x168>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x118>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a18      	ldr	r2, [pc, #96]	@ (8004be8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x118>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a17      	ldr	r2, [pc, #92]	@ (8004bec <HAL_TIMEx_PWMN_Start+0x170>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d111      	bne.n	8004bb8 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b06      	cmp	r3, #6
 8004ba4:	d010      	beq.n	8004bc8 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0201 	orr.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb6:	e007      	b.n	8004bc8 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00
 8004be4:	40010400 	.word	0x40010400
 8004be8:	40014000 	.word	0x40014000
 8004bec:	40001800 	.word	0x40001800

08004bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e05a      	b.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a21      	ldr	r2, [pc, #132]	@ (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d022      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c54:	d01d      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d018      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a18      	ldr	r2, [pc, #96]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a17      	ldr	r2, [pc, #92]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d10c      	bne.n	8004cac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40010400 	.word	0x40010400
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	40001800 	.word	0x40001800

08004ce8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e03d      	b.n	8004d80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1a      	ldr	r2, [r3, #32]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <random>:
 8004e00:	4b16      	ldr	r3, [pc, #88]	@ (8004e5c <random+0x5c>)
 8004e02:	b510      	push	{r4, lr}
 8004e04:	681c      	ldr	r4, [r3, #0]
 8004e06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004e08:	b9b3      	cbnz	r3, 8004e38 <random+0x38>
 8004e0a:	2018      	movs	r0, #24
 8004e0c:	f000 fa20 	bl	8005250 <malloc>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6320      	str	r0, [r4, #48]	@ 0x30
 8004e14:	b920      	cbnz	r0, 8004e20 <random+0x20>
 8004e16:	4b12      	ldr	r3, [pc, #72]	@ (8004e60 <random+0x60>)
 8004e18:	4812      	ldr	r0, [pc, #72]	@ (8004e64 <random+0x64>)
 8004e1a:	214c      	movs	r1, #76	@ 0x4c
 8004e1c:	f000 f9b0 	bl	8005180 <__assert_func>
 8004e20:	4911      	ldr	r1, [pc, #68]	@ (8004e68 <random+0x68>)
 8004e22:	4b12      	ldr	r3, [pc, #72]	@ (8004e6c <random+0x6c>)
 8004e24:	e9c0 1300 	strd	r1, r3, [r0]
 8004e28:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <random+0x70>)
 8004e2a:	6083      	str	r3, [r0, #8]
 8004e2c:	230b      	movs	r3, #11
 8004e2e:	8183      	strh	r3, [r0, #12]
 8004e30:	2100      	movs	r1, #0
 8004e32:	2001      	movs	r0, #1
 8004e34:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004e38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004e3a:	480e      	ldr	r0, [pc, #56]	@ (8004e74 <random+0x74>)
 8004e3c:	690b      	ldr	r3, [r1, #16]
 8004e3e:	694c      	ldr	r4, [r1, #20]
 8004e40:	4a0d      	ldr	r2, [pc, #52]	@ (8004e78 <random+0x78>)
 8004e42:	4358      	muls	r0, r3
 8004e44:	fb02 0004 	mla	r0, r2, r4, r0
 8004e48:	fba3 3202 	umull	r3, r2, r3, r2
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	eb40 0002 	adc.w	r0, r0, r2
 8004e52:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004e56:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004e5a:	bd10      	pop	{r4, pc}
 8004e5c:	20000050 	.word	0x20000050
 8004e60:	08007318 	.word	0x08007318
 8004e64:	0800732f 	.word	0x0800732f
 8004e68:	abcd330e 	.word	0xabcd330e
 8004e6c:	e66d1234 	.word	0xe66d1234
 8004e70:	0005deec 	.word	0x0005deec
 8004e74:	5851f42d 	.word	0x5851f42d
 8004e78:	4c957f2d 	.word	0x4c957f2d

08004e7c <std>:
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	4604      	mov	r4, r0
 8004e82:	e9c0 3300 	strd	r3, r3, [r0]
 8004e86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e8a:	6083      	str	r3, [r0, #8]
 8004e8c:	8181      	strh	r1, [r0, #12]
 8004e8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e90:	81c2      	strh	r2, [r0, #14]
 8004e92:	6183      	str	r3, [r0, #24]
 8004e94:	4619      	mov	r1, r3
 8004e96:	2208      	movs	r2, #8
 8004e98:	305c      	adds	r0, #92	@ 0x5c
 8004e9a:	f000 f8f4 	bl	8005086 <memset>
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed4 <std+0x58>)
 8004ea0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed8 <std+0x5c>)
 8004ea4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8004edc <std+0x60>)
 8004ea8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee0 <std+0x64>)
 8004eac:	6323      	str	r3, [r4, #48]	@ 0x30
 8004eae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee4 <std+0x68>)
 8004eb0:	6224      	str	r4, [r4, #32]
 8004eb2:	429c      	cmp	r4, r3
 8004eb4:	d006      	beq.n	8004ec4 <std+0x48>
 8004eb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004eba:	4294      	cmp	r4, r2
 8004ebc:	d002      	beq.n	8004ec4 <std+0x48>
 8004ebe:	33d0      	adds	r3, #208	@ 0xd0
 8004ec0:	429c      	cmp	r4, r3
 8004ec2:	d105      	bne.n	8004ed0 <std+0x54>
 8004ec4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ecc:	f000 b954 	b.w	8005178 <__retarget_lock_init_recursive>
 8004ed0:	bd10      	pop	{r4, pc}
 8004ed2:	bf00      	nop
 8004ed4:	08005001 	.word	0x08005001
 8004ed8:	08005023 	.word	0x08005023
 8004edc:	0800505b 	.word	0x0800505b
 8004ee0:	0800507f 	.word	0x0800507f
 8004ee4:	20001518 	.word	0x20001518

08004ee8 <stdio_exit_handler>:
 8004ee8:	4a02      	ldr	r2, [pc, #8]	@ (8004ef4 <stdio_exit_handler+0xc>)
 8004eea:	4903      	ldr	r1, [pc, #12]	@ (8004ef8 <stdio_exit_handler+0x10>)
 8004eec:	4803      	ldr	r0, [pc, #12]	@ (8004efc <stdio_exit_handler+0x14>)
 8004eee:	f000 b869 	b.w	8004fc4 <_fwalk_sglue>
 8004ef2:	bf00      	nop
 8004ef4:	20000044 	.word	0x20000044
 8004ef8:	080054c5 	.word	0x080054c5
 8004efc:	20000054 	.word	0x20000054

08004f00 <cleanup_stdio>:
 8004f00:	6841      	ldr	r1, [r0, #4]
 8004f02:	4b0c      	ldr	r3, [pc, #48]	@ (8004f34 <cleanup_stdio+0x34>)
 8004f04:	4299      	cmp	r1, r3
 8004f06:	b510      	push	{r4, lr}
 8004f08:	4604      	mov	r4, r0
 8004f0a:	d001      	beq.n	8004f10 <cleanup_stdio+0x10>
 8004f0c:	f000 fada 	bl	80054c4 <_fflush_r>
 8004f10:	68a1      	ldr	r1, [r4, #8]
 8004f12:	4b09      	ldr	r3, [pc, #36]	@ (8004f38 <cleanup_stdio+0x38>)
 8004f14:	4299      	cmp	r1, r3
 8004f16:	d002      	beq.n	8004f1e <cleanup_stdio+0x1e>
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 fad3 	bl	80054c4 <_fflush_r>
 8004f1e:	68e1      	ldr	r1, [r4, #12]
 8004f20:	4b06      	ldr	r3, [pc, #24]	@ (8004f3c <cleanup_stdio+0x3c>)
 8004f22:	4299      	cmp	r1, r3
 8004f24:	d004      	beq.n	8004f30 <cleanup_stdio+0x30>
 8004f26:	4620      	mov	r0, r4
 8004f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f2c:	f000 baca 	b.w	80054c4 <_fflush_r>
 8004f30:	bd10      	pop	{r4, pc}
 8004f32:	bf00      	nop
 8004f34:	20001518 	.word	0x20001518
 8004f38:	20001580 	.word	0x20001580
 8004f3c:	200015e8 	.word	0x200015e8

08004f40 <global_stdio_init.part.0>:
 8004f40:	b510      	push	{r4, lr}
 8004f42:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <global_stdio_init.part.0+0x30>)
 8004f44:	4c0b      	ldr	r4, [pc, #44]	@ (8004f74 <global_stdio_init.part.0+0x34>)
 8004f46:	4a0c      	ldr	r2, [pc, #48]	@ (8004f78 <global_stdio_init.part.0+0x38>)
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2104      	movs	r1, #4
 8004f50:	f7ff ff94 	bl	8004e7c <std>
 8004f54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f58:	2201      	movs	r2, #1
 8004f5a:	2109      	movs	r1, #9
 8004f5c:	f7ff ff8e 	bl	8004e7c <std>
 8004f60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f64:	2202      	movs	r2, #2
 8004f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f6a:	2112      	movs	r1, #18
 8004f6c:	f7ff bf86 	b.w	8004e7c <std>
 8004f70:	20001650 	.word	0x20001650
 8004f74:	20001518 	.word	0x20001518
 8004f78:	08004ee9 	.word	0x08004ee9

08004f7c <__sfp_lock_acquire>:
 8004f7c:	4801      	ldr	r0, [pc, #4]	@ (8004f84 <__sfp_lock_acquire+0x8>)
 8004f7e:	f000 b8fc 	b.w	800517a <__retarget_lock_acquire_recursive>
 8004f82:	bf00      	nop
 8004f84:	20001659 	.word	0x20001659

08004f88 <__sfp_lock_release>:
 8004f88:	4801      	ldr	r0, [pc, #4]	@ (8004f90 <__sfp_lock_release+0x8>)
 8004f8a:	f000 b8f7 	b.w	800517c <__retarget_lock_release_recursive>
 8004f8e:	bf00      	nop
 8004f90:	20001659 	.word	0x20001659

08004f94 <__sinit>:
 8004f94:	b510      	push	{r4, lr}
 8004f96:	4604      	mov	r4, r0
 8004f98:	f7ff fff0 	bl	8004f7c <__sfp_lock_acquire>
 8004f9c:	6a23      	ldr	r3, [r4, #32]
 8004f9e:	b11b      	cbz	r3, 8004fa8 <__sinit+0x14>
 8004fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa4:	f7ff bff0 	b.w	8004f88 <__sfp_lock_release>
 8004fa8:	4b04      	ldr	r3, [pc, #16]	@ (8004fbc <__sinit+0x28>)
 8004faa:	6223      	str	r3, [r4, #32]
 8004fac:	4b04      	ldr	r3, [pc, #16]	@ (8004fc0 <__sinit+0x2c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f5      	bne.n	8004fa0 <__sinit+0xc>
 8004fb4:	f7ff ffc4 	bl	8004f40 <global_stdio_init.part.0>
 8004fb8:	e7f2      	b.n	8004fa0 <__sinit+0xc>
 8004fba:	bf00      	nop
 8004fbc:	08004f01 	.word	0x08004f01
 8004fc0:	20001650 	.word	0x20001650

08004fc4 <_fwalk_sglue>:
 8004fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc8:	4607      	mov	r7, r0
 8004fca:	4688      	mov	r8, r1
 8004fcc:	4614      	mov	r4, r2
 8004fce:	2600      	movs	r6, #0
 8004fd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fd4:	f1b9 0901 	subs.w	r9, r9, #1
 8004fd8:	d505      	bpl.n	8004fe6 <_fwalk_sglue+0x22>
 8004fda:	6824      	ldr	r4, [r4, #0]
 8004fdc:	2c00      	cmp	r4, #0
 8004fde:	d1f7      	bne.n	8004fd0 <_fwalk_sglue+0xc>
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fe6:	89ab      	ldrh	r3, [r5, #12]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d907      	bls.n	8004ffc <_fwalk_sglue+0x38>
 8004fec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	d003      	beq.n	8004ffc <_fwalk_sglue+0x38>
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	47c0      	blx	r8
 8004ffa:	4306      	orrs	r6, r0
 8004ffc:	3568      	adds	r5, #104	@ 0x68
 8004ffe:	e7e9      	b.n	8004fd4 <_fwalk_sglue+0x10>

08005000 <__sread>:
 8005000:	b510      	push	{r4, lr}
 8005002:	460c      	mov	r4, r1
 8005004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005008:	f000 f868 	bl	80050dc <_read_r>
 800500c:	2800      	cmp	r0, #0
 800500e:	bfab      	itete	ge
 8005010:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005012:	89a3      	ldrhlt	r3, [r4, #12]
 8005014:	181b      	addge	r3, r3, r0
 8005016:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800501a:	bfac      	ite	ge
 800501c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800501e:	81a3      	strhlt	r3, [r4, #12]
 8005020:	bd10      	pop	{r4, pc}

08005022 <__swrite>:
 8005022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005026:	461f      	mov	r7, r3
 8005028:	898b      	ldrh	r3, [r1, #12]
 800502a:	05db      	lsls	r3, r3, #23
 800502c:	4605      	mov	r5, r0
 800502e:	460c      	mov	r4, r1
 8005030:	4616      	mov	r6, r2
 8005032:	d505      	bpl.n	8005040 <__swrite+0x1e>
 8005034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005038:	2302      	movs	r3, #2
 800503a:	2200      	movs	r2, #0
 800503c:	f000 f83c 	bl	80050b8 <_lseek_r>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005046:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800504a:	81a3      	strh	r3, [r4, #12]
 800504c:	4632      	mov	r2, r6
 800504e:	463b      	mov	r3, r7
 8005050:	4628      	mov	r0, r5
 8005052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005056:	f000 b853 	b.w	8005100 <_write_r>

0800505a <__sseek>:
 800505a:	b510      	push	{r4, lr}
 800505c:	460c      	mov	r4, r1
 800505e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005062:	f000 f829 	bl	80050b8 <_lseek_r>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	bf15      	itete	ne
 800506c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800506e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005072:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005076:	81a3      	strheq	r3, [r4, #12]
 8005078:	bf18      	it	ne
 800507a:	81a3      	strhne	r3, [r4, #12]
 800507c:	bd10      	pop	{r4, pc}

0800507e <__sclose>:
 800507e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005082:	f000 b809 	b.w	8005098 <_close_r>

08005086 <memset>:
 8005086:	4402      	add	r2, r0
 8005088:	4603      	mov	r3, r0
 800508a:	4293      	cmp	r3, r2
 800508c:	d100      	bne.n	8005090 <memset+0xa>
 800508e:	4770      	bx	lr
 8005090:	f803 1b01 	strb.w	r1, [r3], #1
 8005094:	e7f9      	b.n	800508a <memset+0x4>
	...

08005098 <_close_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4d06      	ldr	r5, [pc, #24]	@ (80050b4 <_close_r+0x1c>)
 800509c:	2300      	movs	r3, #0
 800509e:	4604      	mov	r4, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	f7fd f8f4 	bl	8002290 <_close>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_close_r+0x1a>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_close_r+0x1a>
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	20001654 	.word	0x20001654

080050b8 <_lseek_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4d07      	ldr	r5, [pc, #28]	@ (80050d8 <_lseek_r+0x20>)
 80050bc:	4604      	mov	r4, r0
 80050be:	4608      	mov	r0, r1
 80050c0:	4611      	mov	r1, r2
 80050c2:	2200      	movs	r2, #0
 80050c4:	602a      	str	r2, [r5, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f7fd f909 	bl	80022de <_lseek>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_lseek_r+0x1e>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_lseek_r+0x1e>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	20001654 	.word	0x20001654

080050dc <_read_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4d07      	ldr	r5, [pc, #28]	@ (80050fc <_read_r+0x20>)
 80050e0:	4604      	mov	r4, r0
 80050e2:	4608      	mov	r0, r1
 80050e4:	4611      	mov	r1, r2
 80050e6:	2200      	movs	r2, #0
 80050e8:	602a      	str	r2, [r5, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f7fd f897 	bl	800221e <_read>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d102      	bne.n	80050fa <_read_r+0x1e>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b103      	cbz	r3, 80050fa <_read_r+0x1e>
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	20001654 	.word	0x20001654

08005100 <_write_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4d07      	ldr	r5, [pc, #28]	@ (8005120 <_write_r+0x20>)
 8005104:	4604      	mov	r4, r0
 8005106:	4608      	mov	r0, r1
 8005108:	4611      	mov	r1, r2
 800510a:	2200      	movs	r2, #0
 800510c:	602a      	str	r2, [r5, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	f7fd f8a2 	bl	8002258 <_write>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_write_r+0x1e>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b103      	cbz	r3, 800511e <_write_r+0x1e>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	20001654 	.word	0x20001654

08005124 <__errno>:
 8005124:	4b01      	ldr	r3, [pc, #4]	@ (800512c <__errno+0x8>)
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000050 	.word	0x20000050

08005130 <__libc_init_array>:
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	4d0d      	ldr	r5, [pc, #52]	@ (8005168 <__libc_init_array+0x38>)
 8005134:	4c0d      	ldr	r4, [pc, #52]	@ (800516c <__libc_init_array+0x3c>)
 8005136:	1b64      	subs	r4, r4, r5
 8005138:	10a4      	asrs	r4, r4, #2
 800513a:	2600      	movs	r6, #0
 800513c:	42a6      	cmp	r6, r4
 800513e:	d109      	bne.n	8005154 <__libc_init_array+0x24>
 8005140:	4d0b      	ldr	r5, [pc, #44]	@ (8005170 <__libc_init_array+0x40>)
 8005142:	4c0c      	ldr	r4, [pc, #48]	@ (8005174 <__libc_init_array+0x44>)
 8005144:	f001 fe5c 	bl	8006e00 <_init>
 8005148:	1b64      	subs	r4, r4, r5
 800514a:	10a4      	asrs	r4, r4, #2
 800514c:	2600      	movs	r6, #0
 800514e:	42a6      	cmp	r6, r4
 8005150:	d105      	bne.n	800515e <__libc_init_array+0x2e>
 8005152:	bd70      	pop	{r4, r5, r6, pc}
 8005154:	f855 3b04 	ldr.w	r3, [r5], #4
 8005158:	4798      	blx	r3
 800515a:	3601      	adds	r6, #1
 800515c:	e7ee      	b.n	800513c <__libc_init_array+0xc>
 800515e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005162:	4798      	blx	r3
 8005164:	3601      	adds	r6, #1
 8005166:	e7f2      	b.n	800514e <__libc_init_array+0x1e>
 8005168:	080075d8 	.word	0x080075d8
 800516c:	080075d8 	.word	0x080075d8
 8005170:	080075d8 	.word	0x080075d8
 8005174:	080075dc 	.word	0x080075dc

08005178 <__retarget_lock_init_recursive>:
 8005178:	4770      	bx	lr

0800517a <__retarget_lock_acquire_recursive>:
 800517a:	4770      	bx	lr

0800517c <__retarget_lock_release_recursive>:
 800517c:	4770      	bx	lr
	...

08005180 <__assert_func>:
 8005180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005182:	4614      	mov	r4, r2
 8005184:	461a      	mov	r2, r3
 8005186:	4b09      	ldr	r3, [pc, #36]	@ (80051ac <__assert_func+0x2c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4605      	mov	r5, r0
 800518c:	68d8      	ldr	r0, [r3, #12]
 800518e:	b14c      	cbz	r4, 80051a4 <__assert_func+0x24>
 8005190:	4b07      	ldr	r3, [pc, #28]	@ (80051b0 <__assert_func+0x30>)
 8005192:	9100      	str	r1, [sp, #0]
 8005194:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005198:	4906      	ldr	r1, [pc, #24]	@ (80051b4 <__assert_func+0x34>)
 800519a:	462b      	mov	r3, r5
 800519c:	f000 f9ba 	bl	8005514 <fiprintf>
 80051a0:	f000 f9da 	bl	8005558 <abort>
 80051a4:	4b04      	ldr	r3, [pc, #16]	@ (80051b8 <__assert_func+0x38>)
 80051a6:	461c      	mov	r4, r3
 80051a8:	e7f3      	b.n	8005192 <__assert_func+0x12>
 80051aa:	bf00      	nop
 80051ac:	20000050 	.word	0x20000050
 80051b0:	08007389 	.word	0x08007389
 80051b4:	08007396 	.word	0x08007396
 80051b8:	080073c4 	.word	0x080073c4

080051bc <_free_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4605      	mov	r5, r0
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d041      	beq.n	8005248 <_free_r+0x8c>
 80051c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c8:	1f0c      	subs	r4, r1, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bfb8      	it	lt
 80051ce:	18e4      	addlt	r4, r4, r3
 80051d0:	f000 f8e8 	bl	80053a4 <__malloc_lock>
 80051d4:	4a1d      	ldr	r2, [pc, #116]	@ (800524c <_free_r+0x90>)
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	b933      	cbnz	r3, 80051e8 <_free_r+0x2c>
 80051da:	6063      	str	r3, [r4, #4]
 80051dc:	6014      	str	r4, [r2, #0]
 80051de:	4628      	mov	r0, r5
 80051e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051e4:	f000 b8e4 	b.w	80053b0 <__malloc_unlock>
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d908      	bls.n	80051fe <_free_r+0x42>
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	1821      	adds	r1, r4, r0
 80051f0:	428b      	cmp	r3, r1
 80051f2:	bf01      	itttt	eq
 80051f4:	6819      	ldreq	r1, [r3, #0]
 80051f6:	685b      	ldreq	r3, [r3, #4]
 80051f8:	1809      	addeq	r1, r1, r0
 80051fa:	6021      	streq	r1, [r4, #0]
 80051fc:	e7ed      	b.n	80051da <_free_r+0x1e>
 80051fe:	461a      	mov	r2, r3
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	b10b      	cbz	r3, 8005208 <_free_r+0x4c>
 8005204:	42a3      	cmp	r3, r4
 8005206:	d9fa      	bls.n	80051fe <_free_r+0x42>
 8005208:	6811      	ldr	r1, [r2, #0]
 800520a:	1850      	adds	r0, r2, r1
 800520c:	42a0      	cmp	r0, r4
 800520e:	d10b      	bne.n	8005228 <_free_r+0x6c>
 8005210:	6820      	ldr	r0, [r4, #0]
 8005212:	4401      	add	r1, r0
 8005214:	1850      	adds	r0, r2, r1
 8005216:	4283      	cmp	r3, r0
 8005218:	6011      	str	r1, [r2, #0]
 800521a:	d1e0      	bne.n	80051de <_free_r+0x22>
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	6053      	str	r3, [r2, #4]
 8005222:	4408      	add	r0, r1
 8005224:	6010      	str	r0, [r2, #0]
 8005226:	e7da      	b.n	80051de <_free_r+0x22>
 8005228:	d902      	bls.n	8005230 <_free_r+0x74>
 800522a:	230c      	movs	r3, #12
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	e7d6      	b.n	80051de <_free_r+0x22>
 8005230:	6820      	ldr	r0, [r4, #0]
 8005232:	1821      	adds	r1, r4, r0
 8005234:	428b      	cmp	r3, r1
 8005236:	bf04      	itt	eq
 8005238:	6819      	ldreq	r1, [r3, #0]
 800523a:	685b      	ldreq	r3, [r3, #4]
 800523c:	6063      	str	r3, [r4, #4]
 800523e:	bf04      	itt	eq
 8005240:	1809      	addeq	r1, r1, r0
 8005242:	6021      	streq	r1, [r4, #0]
 8005244:	6054      	str	r4, [r2, #4]
 8005246:	e7ca      	b.n	80051de <_free_r+0x22>
 8005248:	bd38      	pop	{r3, r4, r5, pc}
 800524a:	bf00      	nop
 800524c:	20001660 	.word	0x20001660

08005250 <malloc>:
 8005250:	4b02      	ldr	r3, [pc, #8]	@ (800525c <malloc+0xc>)
 8005252:	4601      	mov	r1, r0
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	f000 b825 	b.w	80052a4 <_malloc_r>
 800525a:	bf00      	nop
 800525c:	20000050 	.word	0x20000050

08005260 <sbrk_aligned>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	4e0f      	ldr	r6, [pc, #60]	@ (80052a0 <sbrk_aligned+0x40>)
 8005264:	460c      	mov	r4, r1
 8005266:	6831      	ldr	r1, [r6, #0]
 8005268:	4605      	mov	r5, r0
 800526a:	b911      	cbnz	r1, 8005272 <sbrk_aligned+0x12>
 800526c:	f000 f964 	bl	8005538 <_sbrk_r>
 8005270:	6030      	str	r0, [r6, #0]
 8005272:	4621      	mov	r1, r4
 8005274:	4628      	mov	r0, r5
 8005276:	f000 f95f 	bl	8005538 <_sbrk_r>
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	d103      	bne.n	8005286 <sbrk_aligned+0x26>
 800527e:	f04f 34ff 	mov.w	r4, #4294967295
 8005282:	4620      	mov	r0, r4
 8005284:	bd70      	pop	{r4, r5, r6, pc}
 8005286:	1cc4      	adds	r4, r0, #3
 8005288:	f024 0403 	bic.w	r4, r4, #3
 800528c:	42a0      	cmp	r0, r4
 800528e:	d0f8      	beq.n	8005282 <sbrk_aligned+0x22>
 8005290:	1a21      	subs	r1, r4, r0
 8005292:	4628      	mov	r0, r5
 8005294:	f000 f950 	bl	8005538 <_sbrk_r>
 8005298:	3001      	adds	r0, #1
 800529a:	d1f2      	bne.n	8005282 <sbrk_aligned+0x22>
 800529c:	e7ef      	b.n	800527e <sbrk_aligned+0x1e>
 800529e:	bf00      	nop
 80052a0:	2000165c 	.word	0x2000165c

080052a4 <_malloc_r>:
 80052a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052a8:	1ccd      	adds	r5, r1, #3
 80052aa:	f025 0503 	bic.w	r5, r5, #3
 80052ae:	3508      	adds	r5, #8
 80052b0:	2d0c      	cmp	r5, #12
 80052b2:	bf38      	it	cc
 80052b4:	250c      	movcc	r5, #12
 80052b6:	2d00      	cmp	r5, #0
 80052b8:	4606      	mov	r6, r0
 80052ba:	db01      	blt.n	80052c0 <_malloc_r+0x1c>
 80052bc:	42a9      	cmp	r1, r5
 80052be:	d904      	bls.n	80052ca <_malloc_r+0x26>
 80052c0:	230c      	movs	r3, #12
 80052c2:	6033      	str	r3, [r6, #0]
 80052c4:	2000      	movs	r0, #0
 80052c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053a0 <_malloc_r+0xfc>
 80052ce:	f000 f869 	bl	80053a4 <__malloc_lock>
 80052d2:	f8d8 3000 	ldr.w	r3, [r8]
 80052d6:	461c      	mov	r4, r3
 80052d8:	bb44      	cbnz	r4, 800532c <_malloc_r+0x88>
 80052da:	4629      	mov	r1, r5
 80052dc:	4630      	mov	r0, r6
 80052de:	f7ff ffbf 	bl	8005260 <sbrk_aligned>
 80052e2:	1c43      	adds	r3, r0, #1
 80052e4:	4604      	mov	r4, r0
 80052e6:	d158      	bne.n	800539a <_malloc_r+0xf6>
 80052e8:	f8d8 4000 	ldr.w	r4, [r8]
 80052ec:	4627      	mov	r7, r4
 80052ee:	2f00      	cmp	r7, #0
 80052f0:	d143      	bne.n	800537a <_malloc_r+0xd6>
 80052f2:	2c00      	cmp	r4, #0
 80052f4:	d04b      	beq.n	800538e <_malloc_r+0xea>
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	4639      	mov	r1, r7
 80052fa:	4630      	mov	r0, r6
 80052fc:	eb04 0903 	add.w	r9, r4, r3
 8005300:	f000 f91a 	bl	8005538 <_sbrk_r>
 8005304:	4581      	cmp	r9, r0
 8005306:	d142      	bne.n	800538e <_malloc_r+0xea>
 8005308:	6821      	ldr	r1, [r4, #0]
 800530a:	1a6d      	subs	r5, r5, r1
 800530c:	4629      	mov	r1, r5
 800530e:	4630      	mov	r0, r6
 8005310:	f7ff ffa6 	bl	8005260 <sbrk_aligned>
 8005314:	3001      	adds	r0, #1
 8005316:	d03a      	beq.n	800538e <_malloc_r+0xea>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	442b      	add	r3, r5
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	f8d8 3000 	ldr.w	r3, [r8]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	bb62      	cbnz	r2, 8005380 <_malloc_r+0xdc>
 8005326:	f8c8 7000 	str.w	r7, [r8]
 800532a:	e00f      	b.n	800534c <_malloc_r+0xa8>
 800532c:	6822      	ldr	r2, [r4, #0]
 800532e:	1b52      	subs	r2, r2, r5
 8005330:	d420      	bmi.n	8005374 <_malloc_r+0xd0>
 8005332:	2a0b      	cmp	r2, #11
 8005334:	d917      	bls.n	8005366 <_malloc_r+0xc2>
 8005336:	1961      	adds	r1, r4, r5
 8005338:	42a3      	cmp	r3, r4
 800533a:	6025      	str	r5, [r4, #0]
 800533c:	bf18      	it	ne
 800533e:	6059      	strne	r1, [r3, #4]
 8005340:	6863      	ldr	r3, [r4, #4]
 8005342:	bf08      	it	eq
 8005344:	f8c8 1000 	streq.w	r1, [r8]
 8005348:	5162      	str	r2, [r4, r5]
 800534a:	604b      	str	r3, [r1, #4]
 800534c:	4630      	mov	r0, r6
 800534e:	f000 f82f 	bl	80053b0 <__malloc_unlock>
 8005352:	f104 000b 	add.w	r0, r4, #11
 8005356:	1d23      	adds	r3, r4, #4
 8005358:	f020 0007 	bic.w	r0, r0, #7
 800535c:	1ac2      	subs	r2, r0, r3
 800535e:	bf1c      	itt	ne
 8005360:	1a1b      	subne	r3, r3, r0
 8005362:	50a3      	strne	r3, [r4, r2]
 8005364:	e7af      	b.n	80052c6 <_malloc_r+0x22>
 8005366:	6862      	ldr	r2, [r4, #4]
 8005368:	42a3      	cmp	r3, r4
 800536a:	bf0c      	ite	eq
 800536c:	f8c8 2000 	streq.w	r2, [r8]
 8005370:	605a      	strne	r2, [r3, #4]
 8005372:	e7eb      	b.n	800534c <_malloc_r+0xa8>
 8005374:	4623      	mov	r3, r4
 8005376:	6864      	ldr	r4, [r4, #4]
 8005378:	e7ae      	b.n	80052d8 <_malloc_r+0x34>
 800537a:	463c      	mov	r4, r7
 800537c:	687f      	ldr	r7, [r7, #4]
 800537e:	e7b6      	b.n	80052ee <_malloc_r+0x4a>
 8005380:	461a      	mov	r2, r3
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	42a3      	cmp	r3, r4
 8005386:	d1fb      	bne.n	8005380 <_malloc_r+0xdc>
 8005388:	2300      	movs	r3, #0
 800538a:	6053      	str	r3, [r2, #4]
 800538c:	e7de      	b.n	800534c <_malloc_r+0xa8>
 800538e:	230c      	movs	r3, #12
 8005390:	6033      	str	r3, [r6, #0]
 8005392:	4630      	mov	r0, r6
 8005394:	f000 f80c 	bl	80053b0 <__malloc_unlock>
 8005398:	e794      	b.n	80052c4 <_malloc_r+0x20>
 800539a:	6005      	str	r5, [r0, #0]
 800539c:	e7d6      	b.n	800534c <_malloc_r+0xa8>
 800539e:	bf00      	nop
 80053a0:	20001660 	.word	0x20001660

080053a4 <__malloc_lock>:
 80053a4:	4801      	ldr	r0, [pc, #4]	@ (80053ac <__malloc_lock+0x8>)
 80053a6:	f7ff bee8 	b.w	800517a <__retarget_lock_acquire_recursive>
 80053aa:	bf00      	nop
 80053ac:	20001658 	.word	0x20001658

080053b0 <__malloc_unlock>:
 80053b0:	4801      	ldr	r0, [pc, #4]	@ (80053b8 <__malloc_unlock+0x8>)
 80053b2:	f7ff bee3 	b.w	800517c <__retarget_lock_release_recursive>
 80053b6:	bf00      	nop
 80053b8:	20001658 	.word	0x20001658

080053bc <__sflush_r>:
 80053bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c4:	0716      	lsls	r6, r2, #28
 80053c6:	4605      	mov	r5, r0
 80053c8:	460c      	mov	r4, r1
 80053ca:	d454      	bmi.n	8005476 <__sflush_r+0xba>
 80053cc:	684b      	ldr	r3, [r1, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dc02      	bgt.n	80053d8 <__sflush_r+0x1c>
 80053d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dd48      	ble.n	800546a <__sflush_r+0xae>
 80053d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053da:	2e00      	cmp	r6, #0
 80053dc:	d045      	beq.n	800546a <__sflush_r+0xae>
 80053de:	2300      	movs	r3, #0
 80053e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053e4:	682f      	ldr	r7, [r5, #0]
 80053e6:	6a21      	ldr	r1, [r4, #32]
 80053e8:	602b      	str	r3, [r5, #0]
 80053ea:	d030      	beq.n	800544e <__sflush_r+0x92>
 80053ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	0759      	lsls	r1, r3, #29
 80053f2:	d505      	bpl.n	8005400 <__sflush_r+0x44>
 80053f4:	6863      	ldr	r3, [r4, #4]
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053fa:	b10b      	cbz	r3, 8005400 <__sflush_r+0x44>
 80053fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	2300      	movs	r3, #0
 8005402:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005404:	6a21      	ldr	r1, [r4, #32]
 8005406:	4628      	mov	r0, r5
 8005408:	47b0      	blx	r6
 800540a:	1c43      	adds	r3, r0, #1
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	d106      	bne.n	800541e <__sflush_r+0x62>
 8005410:	6829      	ldr	r1, [r5, #0]
 8005412:	291d      	cmp	r1, #29
 8005414:	d82b      	bhi.n	800546e <__sflush_r+0xb2>
 8005416:	4a2a      	ldr	r2, [pc, #168]	@ (80054c0 <__sflush_r+0x104>)
 8005418:	40ca      	lsrs	r2, r1
 800541a:	07d6      	lsls	r6, r2, #31
 800541c:	d527      	bpl.n	800546e <__sflush_r+0xb2>
 800541e:	2200      	movs	r2, #0
 8005420:	6062      	str	r2, [r4, #4]
 8005422:	04d9      	lsls	r1, r3, #19
 8005424:	6922      	ldr	r2, [r4, #16]
 8005426:	6022      	str	r2, [r4, #0]
 8005428:	d504      	bpl.n	8005434 <__sflush_r+0x78>
 800542a:	1c42      	adds	r2, r0, #1
 800542c:	d101      	bne.n	8005432 <__sflush_r+0x76>
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	b903      	cbnz	r3, 8005434 <__sflush_r+0x78>
 8005432:	6560      	str	r0, [r4, #84]	@ 0x54
 8005434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005436:	602f      	str	r7, [r5, #0]
 8005438:	b1b9      	cbz	r1, 800546a <__sflush_r+0xae>
 800543a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800543e:	4299      	cmp	r1, r3
 8005440:	d002      	beq.n	8005448 <__sflush_r+0x8c>
 8005442:	4628      	mov	r0, r5
 8005444:	f7ff feba 	bl	80051bc <_free_r>
 8005448:	2300      	movs	r3, #0
 800544a:	6363      	str	r3, [r4, #52]	@ 0x34
 800544c:	e00d      	b.n	800546a <__sflush_r+0xae>
 800544e:	2301      	movs	r3, #1
 8005450:	4628      	mov	r0, r5
 8005452:	47b0      	blx	r6
 8005454:	4602      	mov	r2, r0
 8005456:	1c50      	adds	r0, r2, #1
 8005458:	d1c9      	bne.n	80053ee <__sflush_r+0x32>
 800545a:	682b      	ldr	r3, [r5, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0c6      	beq.n	80053ee <__sflush_r+0x32>
 8005460:	2b1d      	cmp	r3, #29
 8005462:	d001      	beq.n	8005468 <__sflush_r+0xac>
 8005464:	2b16      	cmp	r3, #22
 8005466:	d11e      	bne.n	80054a6 <__sflush_r+0xea>
 8005468:	602f      	str	r7, [r5, #0]
 800546a:	2000      	movs	r0, #0
 800546c:	e022      	b.n	80054b4 <__sflush_r+0xf8>
 800546e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005472:	b21b      	sxth	r3, r3
 8005474:	e01b      	b.n	80054ae <__sflush_r+0xf2>
 8005476:	690f      	ldr	r7, [r1, #16]
 8005478:	2f00      	cmp	r7, #0
 800547a:	d0f6      	beq.n	800546a <__sflush_r+0xae>
 800547c:	0793      	lsls	r3, r2, #30
 800547e:	680e      	ldr	r6, [r1, #0]
 8005480:	bf08      	it	eq
 8005482:	694b      	ldreq	r3, [r1, #20]
 8005484:	600f      	str	r7, [r1, #0]
 8005486:	bf18      	it	ne
 8005488:	2300      	movne	r3, #0
 800548a:	eba6 0807 	sub.w	r8, r6, r7
 800548e:	608b      	str	r3, [r1, #8]
 8005490:	f1b8 0f00 	cmp.w	r8, #0
 8005494:	dde9      	ble.n	800546a <__sflush_r+0xae>
 8005496:	6a21      	ldr	r1, [r4, #32]
 8005498:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800549a:	4643      	mov	r3, r8
 800549c:	463a      	mov	r2, r7
 800549e:	4628      	mov	r0, r5
 80054a0:	47b0      	blx	r6
 80054a2:	2800      	cmp	r0, #0
 80054a4:	dc08      	bgt.n	80054b8 <__sflush_r+0xfc>
 80054a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ae:	81a3      	strh	r3, [r4, #12]
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b8:	4407      	add	r7, r0
 80054ba:	eba8 0800 	sub.w	r8, r8, r0
 80054be:	e7e7      	b.n	8005490 <__sflush_r+0xd4>
 80054c0:	20400001 	.word	0x20400001

080054c4 <_fflush_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	690b      	ldr	r3, [r1, #16]
 80054c8:	4605      	mov	r5, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	b913      	cbnz	r3, 80054d4 <_fflush_r+0x10>
 80054ce:	2500      	movs	r5, #0
 80054d0:	4628      	mov	r0, r5
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	b118      	cbz	r0, 80054de <_fflush_r+0x1a>
 80054d6:	6a03      	ldr	r3, [r0, #32]
 80054d8:	b90b      	cbnz	r3, 80054de <_fflush_r+0x1a>
 80054da:	f7ff fd5b 	bl	8004f94 <__sinit>
 80054de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f3      	beq.n	80054ce <_fflush_r+0xa>
 80054e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054e8:	07d0      	lsls	r0, r2, #31
 80054ea:	d404      	bmi.n	80054f6 <_fflush_r+0x32>
 80054ec:	0599      	lsls	r1, r3, #22
 80054ee:	d402      	bmi.n	80054f6 <_fflush_r+0x32>
 80054f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054f2:	f7ff fe42 	bl	800517a <__retarget_lock_acquire_recursive>
 80054f6:	4628      	mov	r0, r5
 80054f8:	4621      	mov	r1, r4
 80054fa:	f7ff ff5f 	bl	80053bc <__sflush_r>
 80054fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005500:	07da      	lsls	r2, r3, #31
 8005502:	4605      	mov	r5, r0
 8005504:	d4e4      	bmi.n	80054d0 <_fflush_r+0xc>
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	059b      	lsls	r3, r3, #22
 800550a:	d4e1      	bmi.n	80054d0 <_fflush_r+0xc>
 800550c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800550e:	f7ff fe35 	bl	800517c <__retarget_lock_release_recursive>
 8005512:	e7dd      	b.n	80054d0 <_fflush_r+0xc>

08005514 <fiprintf>:
 8005514:	b40e      	push	{r1, r2, r3}
 8005516:	b503      	push	{r0, r1, lr}
 8005518:	4601      	mov	r1, r0
 800551a:	ab03      	add	r3, sp, #12
 800551c:	4805      	ldr	r0, [pc, #20]	@ (8005534 <fiprintf+0x20>)
 800551e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005522:	6800      	ldr	r0, [r0, #0]
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	f000 f847 	bl	80055b8 <_vfiprintf_r>
 800552a:	b002      	add	sp, #8
 800552c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005530:	b003      	add	sp, #12
 8005532:	4770      	bx	lr
 8005534:	20000050 	.word	0x20000050

08005538 <_sbrk_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d06      	ldr	r5, [pc, #24]	@ (8005554 <_sbrk_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fc fed8 	bl	80022f8 <_sbrk>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_sbrk_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_sbrk_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20001654 	.word	0x20001654

08005558 <abort>:
 8005558:	b508      	push	{r3, lr}
 800555a:	2006      	movs	r0, #6
 800555c:	f000 fb8c 	bl	8005c78 <raise>
 8005560:	2001      	movs	r0, #1
 8005562:	f7fc fe51 	bl	8002208 <_exit>

08005566 <__sfputc_r>:
 8005566:	6893      	ldr	r3, [r2, #8]
 8005568:	3b01      	subs	r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	b410      	push	{r4}
 800556e:	6093      	str	r3, [r2, #8]
 8005570:	da08      	bge.n	8005584 <__sfputc_r+0x1e>
 8005572:	6994      	ldr	r4, [r2, #24]
 8005574:	42a3      	cmp	r3, r4
 8005576:	db01      	blt.n	800557c <__sfputc_r+0x16>
 8005578:	290a      	cmp	r1, #10
 800557a:	d103      	bne.n	8005584 <__sfputc_r+0x1e>
 800557c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005580:	f000 babe 	b.w	8005b00 <__swbuf_r>
 8005584:	6813      	ldr	r3, [r2, #0]
 8005586:	1c58      	adds	r0, r3, #1
 8005588:	6010      	str	r0, [r2, #0]
 800558a:	7019      	strb	r1, [r3, #0]
 800558c:	4608      	mov	r0, r1
 800558e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005592:	4770      	bx	lr

08005594 <__sfputs_r>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	4606      	mov	r6, r0
 8005598:	460f      	mov	r7, r1
 800559a:	4614      	mov	r4, r2
 800559c:	18d5      	adds	r5, r2, r3
 800559e:	42ac      	cmp	r4, r5
 80055a0:	d101      	bne.n	80055a6 <__sfputs_r+0x12>
 80055a2:	2000      	movs	r0, #0
 80055a4:	e007      	b.n	80055b6 <__sfputs_r+0x22>
 80055a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055aa:	463a      	mov	r2, r7
 80055ac:	4630      	mov	r0, r6
 80055ae:	f7ff ffda 	bl	8005566 <__sfputc_r>
 80055b2:	1c43      	adds	r3, r0, #1
 80055b4:	d1f3      	bne.n	800559e <__sfputs_r+0xa>
 80055b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080055b8 <_vfiprintf_r>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	460d      	mov	r5, r1
 80055be:	b09d      	sub	sp, #116	@ 0x74
 80055c0:	4614      	mov	r4, r2
 80055c2:	4698      	mov	r8, r3
 80055c4:	4606      	mov	r6, r0
 80055c6:	b118      	cbz	r0, 80055d0 <_vfiprintf_r+0x18>
 80055c8:	6a03      	ldr	r3, [r0, #32]
 80055ca:	b90b      	cbnz	r3, 80055d0 <_vfiprintf_r+0x18>
 80055cc:	f7ff fce2 	bl	8004f94 <__sinit>
 80055d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055d2:	07d9      	lsls	r1, r3, #31
 80055d4:	d405      	bmi.n	80055e2 <_vfiprintf_r+0x2a>
 80055d6:	89ab      	ldrh	r3, [r5, #12]
 80055d8:	059a      	lsls	r2, r3, #22
 80055da:	d402      	bmi.n	80055e2 <_vfiprintf_r+0x2a>
 80055dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055de:	f7ff fdcc 	bl	800517a <__retarget_lock_acquire_recursive>
 80055e2:	89ab      	ldrh	r3, [r5, #12]
 80055e4:	071b      	lsls	r3, r3, #28
 80055e6:	d501      	bpl.n	80055ec <_vfiprintf_r+0x34>
 80055e8:	692b      	ldr	r3, [r5, #16]
 80055ea:	b99b      	cbnz	r3, 8005614 <_vfiprintf_r+0x5c>
 80055ec:	4629      	mov	r1, r5
 80055ee:	4630      	mov	r0, r6
 80055f0:	f000 fac4 	bl	8005b7c <__swsetup_r>
 80055f4:	b170      	cbz	r0, 8005614 <_vfiprintf_r+0x5c>
 80055f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055f8:	07dc      	lsls	r4, r3, #31
 80055fa:	d504      	bpl.n	8005606 <_vfiprintf_r+0x4e>
 80055fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005600:	b01d      	add	sp, #116	@ 0x74
 8005602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005606:	89ab      	ldrh	r3, [r5, #12]
 8005608:	0598      	lsls	r0, r3, #22
 800560a:	d4f7      	bmi.n	80055fc <_vfiprintf_r+0x44>
 800560c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800560e:	f7ff fdb5 	bl	800517c <__retarget_lock_release_recursive>
 8005612:	e7f3      	b.n	80055fc <_vfiprintf_r+0x44>
 8005614:	2300      	movs	r3, #0
 8005616:	9309      	str	r3, [sp, #36]	@ 0x24
 8005618:	2320      	movs	r3, #32
 800561a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800561e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005622:	2330      	movs	r3, #48	@ 0x30
 8005624:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80057d4 <_vfiprintf_r+0x21c>
 8005628:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800562c:	f04f 0901 	mov.w	r9, #1
 8005630:	4623      	mov	r3, r4
 8005632:	469a      	mov	sl, r3
 8005634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005638:	b10a      	cbz	r2, 800563e <_vfiprintf_r+0x86>
 800563a:	2a25      	cmp	r2, #37	@ 0x25
 800563c:	d1f9      	bne.n	8005632 <_vfiprintf_r+0x7a>
 800563e:	ebba 0b04 	subs.w	fp, sl, r4
 8005642:	d00b      	beq.n	800565c <_vfiprintf_r+0xa4>
 8005644:	465b      	mov	r3, fp
 8005646:	4622      	mov	r2, r4
 8005648:	4629      	mov	r1, r5
 800564a:	4630      	mov	r0, r6
 800564c:	f7ff ffa2 	bl	8005594 <__sfputs_r>
 8005650:	3001      	adds	r0, #1
 8005652:	f000 80a7 	beq.w	80057a4 <_vfiprintf_r+0x1ec>
 8005656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005658:	445a      	add	r2, fp
 800565a:	9209      	str	r2, [sp, #36]	@ 0x24
 800565c:	f89a 3000 	ldrb.w	r3, [sl]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 809f 	beq.w	80057a4 <_vfiprintf_r+0x1ec>
 8005666:	2300      	movs	r3, #0
 8005668:	f04f 32ff 	mov.w	r2, #4294967295
 800566c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005670:	f10a 0a01 	add.w	sl, sl, #1
 8005674:	9304      	str	r3, [sp, #16]
 8005676:	9307      	str	r3, [sp, #28]
 8005678:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800567c:	931a      	str	r3, [sp, #104]	@ 0x68
 800567e:	4654      	mov	r4, sl
 8005680:	2205      	movs	r2, #5
 8005682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005686:	4853      	ldr	r0, [pc, #332]	@ (80057d4 <_vfiprintf_r+0x21c>)
 8005688:	f7fa fdc2 	bl	8000210 <memchr>
 800568c:	9a04      	ldr	r2, [sp, #16]
 800568e:	b9d8      	cbnz	r0, 80056c8 <_vfiprintf_r+0x110>
 8005690:	06d1      	lsls	r1, r2, #27
 8005692:	bf44      	itt	mi
 8005694:	2320      	movmi	r3, #32
 8005696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800569a:	0713      	lsls	r3, r2, #28
 800569c:	bf44      	itt	mi
 800569e:	232b      	movmi	r3, #43	@ 0x2b
 80056a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056a4:	f89a 3000 	ldrb.w	r3, [sl]
 80056a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80056aa:	d015      	beq.n	80056d8 <_vfiprintf_r+0x120>
 80056ac:	9a07      	ldr	r2, [sp, #28]
 80056ae:	4654      	mov	r4, sl
 80056b0:	2000      	movs	r0, #0
 80056b2:	f04f 0c0a 	mov.w	ip, #10
 80056b6:	4621      	mov	r1, r4
 80056b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056bc:	3b30      	subs	r3, #48	@ 0x30
 80056be:	2b09      	cmp	r3, #9
 80056c0:	d94b      	bls.n	800575a <_vfiprintf_r+0x1a2>
 80056c2:	b1b0      	cbz	r0, 80056f2 <_vfiprintf_r+0x13a>
 80056c4:	9207      	str	r2, [sp, #28]
 80056c6:	e014      	b.n	80056f2 <_vfiprintf_r+0x13a>
 80056c8:	eba0 0308 	sub.w	r3, r0, r8
 80056cc:	fa09 f303 	lsl.w	r3, r9, r3
 80056d0:	4313      	orrs	r3, r2
 80056d2:	9304      	str	r3, [sp, #16]
 80056d4:	46a2      	mov	sl, r4
 80056d6:	e7d2      	b.n	800567e <_vfiprintf_r+0xc6>
 80056d8:	9b03      	ldr	r3, [sp, #12]
 80056da:	1d19      	adds	r1, r3, #4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	9103      	str	r1, [sp, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bfbb      	ittet	lt
 80056e4:	425b      	neglt	r3, r3
 80056e6:	f042 0202 	orrlt.w	r2, r2, #2
 80056ea:	9307      	strge	r3, [sp, #28]
 80056ec:	9307      	strlt	r3, [sp, #28]
 80056ee:	bfb8      	it	lt
 80056f0:	9204      	strlt	r2, [sp, #16]
 80056f2:	7823      	ldrb	r3, [r4, #0]
 80056f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80056f6:	d10a      	bne.n	800570e <_vfiprintf_r+0x156>
 80056f8:	7863      	ldrb	r3, [r4, #1]
 80056fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80056fc:	d132      	bne.n	8005764 <_vfiprintf_r+0x1ac>
 80056fe:	9b03      	ldr	r3, [sp, #12]
 8005700:	1d1a      	adds	r2, r3, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	9203      	str	r2, [sp, #12]
 8005706:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800570a:	3402      	adds	r4, #2
 800570c:	9305      	str	r3, [sp, #20]
 800570e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80057e4 <_vfiprintf_r+0x22c>
 8005712:	7821      	ldrb	r1, [r4, #0]
 8005714:	2203      	movs	r2, #3
 8005716:	4650      	mov	r0, sl
 8005718:	f7fa fd7a 	bl	8000210 <memchr>
 800571c:	b138      	cbz	r0, 800572e <_vfiprintf_r+0x176>
 800571e:	9b04      	ldr	r3, [sp, #16]
 8005720:	eba0 000a 	sub.w	r0, r0, sl
 8005724:	2240      	movs	r2, #64	@ 0x40
 8005726:	4082      	lsls	r2, r0
 8005728:	4313      	orrs	r3, r2
 800572a:	3401      	adds	r4, #1
 800572c:	9304      	str	r3, [sp, #16]
 800572e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005732:	4829      	ldr	r0, [pc, #164]	@ (80057d8 <_vfiprintf_r+0x220>)
 8005734:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005738:	2206      	movs	r2, #6
 800573a:	f7fa fd69 	bl	8000210 <memchr>
 800573e:	2800      	cmp	r0, #0
 8005740:	d03f      	beq.n	80057c2 <_vfiprintf_r+0x20a>
 8005742:	4b26      	ldr	r3, [pc, #152]	@ (80057dc <_vfiprintf_r+0x224>)
 8005744:	bb1b      	cbnz	r3, 800578e <_vfiprintf_r+0x1d6>
 8005746:	9b03      	ldr	r3, [sp, #12]
 8005748:	3307      	adds	r3, #7
 800574a:	f023 0307 	bic.w	r3, r3, #7
 800574e:	3308      	adds	r3, #8
 8005750:	9303      	str	r3, [sp, #12]
 8005752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005754:	443b      	add	r3, r7
 8005756:	9309      	str	r3, [sp, #36]	@ 0x24
 8005758:	e76a      	b.n	8005630 <_vfiprintf_r+0x78>
 800575a:	fb0c 3202 	mla	r2, ip, r2, r3
 800575e:	460c      	mov	r4, r1
 8005760:	2001      	movs	r0, #1
 8005762:	e7a8      	b.n	80056b6 <_vfiprintf_r+0xfe>
 8005764:	2300      	movs	r3, #0
 8005766:	3401      	adds	r4, #1
 8005768:	9305      	str	r3, [sp, #20]
 800576a:	4619      	mov	r1, r3
 800576c:	f04f 0c0a 	mov.w	ip, #10
 8005770:	4620      	mov	r0, r4
 8005772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005776:	3a30      	subs	r2, #48	@ 0x30
 8005778:	2a09      	cmp	r2, #9
 800577a:	d903      	bls.n	8005784 <_vfiprintf_r+0x1cc>
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0c6      	beq.n	800570e <_vfiprintf_r+0x156>
 8005780:	9105      	str	r1, [sp, #20]
 8005782:	e7c4      	b.n	800570e <_vfiprintf_r+0x156>
 8005784:	fb0c 2101 	mla	r1, ip, r1, r2
 8005788:	4604      	mov	r4, r0
 800578a:	2301      	movs	r3, #1
 800578c:	e7f0      	b.n	8005770 <_vfiprintf_r+0x1b8>
 800578e:	ab03      	add	r3, sp, #12
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	462a      	mov	r2, r5
 8005794:	4b12      	ldr	r3, [pc, #72]	@ (80057e0 <_vfiprintf_r+0x228>)
 8005796:	a904      	add	r1, sp, #16
 8005798:	4630      	mov	r0, r6
 800579a:	f3af 8000 	nop.w
 800579e:	4607      	mov	r7, r0
 80057a0:	1c78      	adds	r0, r7, #1
 80057a2:	d1d6      	bne.n	8005752 <_vfiprintf_r+0x19a>
 80057a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057a6:	07d9      	lsls	r1, r3, #31
 80057a8:	d405      	bmi.n	80057b6 <_vfiprintf_r+0x1fe>
 80057aa:	89ab      	ldrh	r3, [r5, #12]
 80057ac:	059a      	lsls	r2, r3, #22
 80057ae:	d402      	bmi.n	80057b6 <_vfiprintf_r+0x1fe>
 80057b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057b2:	f7ff fce3 	bl	800517c <__retarget_lock_release_recursive>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	065b      	lsls	r3, r3, #25
 80057ba:	f53f af1f 	bmi.w	80055fc <_vfiprintf_r+0x44>
 80057be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057c0:	e71e      	b.n	8005600 <_vfiprintf_r+0x48>
 80057c2:	ab03      	add	r3, sp, #12
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	462a      	mov	r2, r5
 80057c8:	4b05      	ldr	r3, [pc, #20]	@ (80057e0 <_vfiprintf_r+0x228>)
 80057ca:	a904      	add	r1, sp, #16
 80057cc:	4630      	mov	r0, r6
 80057ce:	f000 f879 	bl	80058c4 <_printf_i>
 80057d2:	e7e4      	b.n	800579e <_vfiprintf_r+0x1e6>
 80057d4:	080073c5 	.word	0x080073c5
 80057d8:	080073cf 	.word	0x080073cf
 80057dc:	00000000 	.word	0x00000000
 80057e0:	08005595 	.word	0x08005595
 80057e4:	080073cb 	.word	0x080073cb

080057e8 <_printf_common>:
 80057e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	4616      	mov	r6, r2
 80057ee:	4698      	mov	r8, r3
 80057f0:	688a      	ldr	r2, [r1, #8]
 80057f2:	690b      	ldr	r3, [r1, #16]
 80057f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057f8:	4293      	cmp	r3, r2
 80057fa:	bfb8      	it	lt
 80057fc:	4613      	movlt	r3, r2
 80057fe:	6033      	str	r3, [r6, #0]
 8005800:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005804:	4607      	mov	r7, r0
 8005806:	460c      	mov	r4, r1
 8005808:	b10a      	cbz	r2, 800580e <_printf_common+0x26>
 800580a:	3301      	adds	r3, #1
 800580c:	6033      	str	r3, [r6, #0]
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	0699      	lsls	r1, r3, #26
 8005812:	bf42      	ittt	mi
 8005814:	6833      	ldrmi	r3, [r6, #0]
 8005816:	3302      	addmi	r3, #2
 8005818:	6033      	strmi	r3, [r6, #0]
 800581a:	6825      	ldr	r5, [r4, #0]
 800581c:	f015 0506 	ands.w	r5, r5, #6
 8005820:	d106      	bne.n	8005830 <_printf_common+0x48>
 8005822:	f104 0a19 	add.w	sl, r4, #25
 8005826:	68e3      	ldr	r3, [r4, #12]
 8005828:	6832      	ldr	r2, [r6, #0]
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	42ab      	cmp	r3, r5
 800582e:	dc26      	bgt.n	800587e <_printf_common+0x96>
 8005830:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005834:	6822      	ldr	r2, [r4, #0]
 8005836:	3b00      	subs	r3, #0
 8005838:	bf18      	it	ne
 800583a:	2301      	movne	r3, #1
 800583c:	0692      	lsls	r2, r2, #26
 800583e:	d42b      	bmi.n	8005898 <_printf_common+0xb0>
 8005840:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005844:	4641      	mov	r1, r8
 8005846:	4638      	mov	r0, r7
 8005848:	47c8      	blx	r9
 800584a:	3001      	adds	r0, #1
 800584c:	d01e      	beq.n	800588c <_printf_common+0xa4>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	6922      	ldr	r2, [r4, #16]
 8005852:	f003 0306 	and.w	r3, r3, #6
 8005856:	2b04      	cmp	r3, #4
 8005858:	bf02      	ittt	eq
 800585a:	68e5      	ldreq	r5, [r4, #12]
 800585c:	6833      	ldreq	r3, [r6, #0]
 800585e:	1aed      	subeq	r5, r5, r3
 8005860:	68a3      	ldr	r3, [r4, #8]
 8005862:	bf0c      	ite	eq
 8005864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005868:	2500      	movne	r5, #0
 800586a:	4293      	cmp	r3, r2
 800586c:	bfc4      	itt	gt
 800586e:	1a9b      	subgt	r3, r3, r2
 8005870:	18ed      	addgt	r5, r5, r3
 8005872:	2600      	movs	r6, #0
 8005874:	341a      	adds	r4, #26
 8005876:	42b5      	cmp	r5, r6
 8005878:	d11a      	bne.n	80058b0 <_printf_common+0xc8>
 800587a:	2000      	movs	r0, #0
 800587c:	e008      	b.n	8005890 <_printf_common+0xa8>
 800587e:	2301      	movs	r3, #1
 8005880:	4652      	mov	r2, sl
 8005882:	4641      	mov	r1, r8
 8005884:	4638      	mov	r0, r7
 8005886:	47c8      	blx	r9
 8005888:	3001      	adds	r0, #1
 800588a:	d103      	bne.n	8005894 <_printf_common+0xac>
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005894:	3501      	adds	r5, #1
 8005896:	e7c6      	b.n	8005826 <_printf_common+0x3e>
 8005898:	18e1      	adds	r1, r4, r3
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	2030      	movs	r0, #48	@ 0x30
 800589e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058a2:	4422      	add	r2, r4
 80058a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058ac:	3302      	adds	r3, #2
 80058ae:	e7c7      	b.n	8005840 <_printf_common+0x58>
 80058b0:	2301      	movs	r3, #1
 80058b2:	4622      	mov	r2, r4
 80058b4:	4641      	mov	r1, r8
 80058b6:	4638      	mov	r0, r7
 80058b8:	47c8      	blx	r9
 80058ba:	3001      	adds	r0, #1
 80058bc:	d0e6      	beq.n	800588c <_printf_common+0xa4>
 80058be:	3601      	adds	r6, #1
 80058c0:	e7d9      	b.n	8005876 <_printf_common+0x8e>
	...

080058c4 <_printf_i>:
 80058c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c8:	7e0f      	ldrb	r7, [r1, #24]
 80058ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058cc:	2f78      	cmp	r7, #120	@ 0x78
 80058ce:	4691      	mov	r9, r2
 80058d0:	4680      	mov	r8, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	469a      	mov	sl, r3
 80058d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058da:	d807      	bhi.n	80058ec <_printf_i+0x28>
 80058dc:	2f62      	cmp	r7, #98	@ 0x62
 80058de:	d80a      	bhi.n	80058f6 <_printf_i+0x32>
 80058e0:	2f00      	cmp	r7, #0
 80058e2:	f000 80d1 	beq.w	8005a88 <_printf_i+0x1c4>
 80058e6:	2f58      	cmp	r7, #88	@ 0x58
 80058e8:	f000 80b8 	beq.w	8005a5c <_printf_i+0x198>
 80058ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058f4:	e03a      	b.n	800596c <_printf_i+0xa8>
 80058f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058fa:	2b15      	cmp	r3, #21
 80058fc:	d8f6      	bhi.n	80058ec <_printf_i+0x28>
 80058fe:	a101      	add	r1, pc, #4	@ (adr r1, 8005904 <_printf_i+0x40>)
 8005900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005904:	0800595d 	.word	0x0800595d
 8005908:	08005971 	.word	0x08005971
 800590c:	080058ed 	.word	0x080058ed
 8005910:	080058ed 	.word	0x080058ed
 8005914:	080058ed 	.word	0x080058ed
 8005918:	080058ed 	.word	0x080058ed
 800591c:	08005971 	.word	0x08005971
 8005920:	080058ed 	.word	0x080058ed
 8005924:	080058ed 	.word	0x080058ed
 8005928:	080058ed 	.word	0x080058ed
 800592c:	080058ed 	.word	0x080058ed
 8005930:	08005a6f 	.word	0x08005a6f
 8005934:	0800599b 	.word	0x0800599b
 8005938:	08005a29 	.word	0x08005a29
 800593c:	080058ed 	.word	0x080058ed
 8005940:	080058ed 	.word	0x080058ed
 8005944:	08005a91 	.word	0x08005a91
 8005948:	080058ed 	.word	0x080058ed
 800594c:	0800599b 	.word	0x0800599b
 8005950:	080058ed 	.word	0x080058ed
 8005954:	080058ed 	.word	0x080058ed
 8005958:	08005a31 	.word	0x08005a31
 800595c:	6833      	ldr	r3, [r6, #0]
 800595e:	1d1a      	adds	r2, r3, #4
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6032      	str	r2, [r6, #0]
 8005964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005968:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800596c:	2301      	movs	r3, #1
 800596e:	e09c      	b.n	8005aaa <_printf_i+0x1e6>
 8005970:	6833      	ldr	r3, [r6, #0]
 8005972:	6820      	ldr	r0, [r4, #0]
 8005974:	1d19      	adds	r1, r3, #4
 8005976:	6031      	str	r1, [r6, #0]
 8005978:	0606      	lsls	r6, r0, #24
 800597a:	d501      	bpl.n	8005980 <_printf_i+0xbc>
 800597c:	681d      	ldr	r5, [r3, #0]
 800597e:	e003      	b.n	8005988 <_printf_i+0xc4>
 8005980:	0645      	lsls	r5, r0, #25
 8005982:	d5fb      	bpl.n	800597c <_printf_i+0xb8>
 8005984:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005988:	2d00      	cmp	r5, #0
 800598a:	da03      	bge.n	8005994 <_printf_i+0xd0>
 800598c:	232d      	movs	r3, #45	@ 0x2d
 800598e:	426d      	negs	r5, r5
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005994:	4858      	ldr	r0, [pc, #352]	@ (8005af8 <_printf_i+0x234>)
 8005996:	230a      	movs	r3, #10
 8005998:	e011      	b.n	80059be <_printf_i+0xfa>
 800599a:	6821      	ldr	r1, [r4, #0]
 800599c:	6833      	ldr	r3, [r6, #0]
 800599e:	0608      	lsls	r0, r1, #24
 80059a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80059a4:	d402      	bmi.n	80059ac <_printf_i+0xe8>
 80059a6:	0649      	lsls	r1, r1, #25
 80059a8:	bf48      	it	mi
 80059aa:	b2ad      	uxthmi	r5, r5
 80059ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80059ae:	4852      	ldr	r0, [pc, #328]	@ (8005af8 <_printf_i+0x234>)
 80059b0:	6033      	str	r3, [r6, #0]
 80059b2:	bf14      	ite	ne
 80059b4:	230a      	movne	r3, #10
 80059b6:	2308      	moveq	r3, #8
 80059b8:	2100      	movs	r1, #0
 80059ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059be:	6866      	ldr	r6, [r4, #4]
 80059c0:	60a6      	str	r6, [r4, #8]
 80059c2:	2e00      	cmp	r6, #0
 80059c4:	db05      	blt.n	80059d2 <_printf_i+0x10e>
 80059c6:	6821      	ldr	r1, [r4, #0]
 80059c8:	432e      	orrs	r6, r5
 80059ca:	f021 0104 	bic.w	r1, r1, #4
 80059ce:	6021      	str	r1, [r4, #0]
 80059d0:	d04b      	beq.n	8005a6a <_printf_i+0x1a6>
 80059d2:	4616      	mov	r6, r2
 80059d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80059d8:	fb03 5711 	mls	r7, r3, r1, r5
 80059dc:	5dc7      	ldrb	r7, [r0, r7]
 80059de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059e2:	462f      	mov	r7, r5
 80059e4:	42bb      	cmp	r3, r7
 80059e6:	460d      	mov	r5, r1
 80059e8:	d9f4      	bls.n	80059d4 <_printf_i+0x110>
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d10b      	bne.n	8005a06 <_printf_i+0x142>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	07df      	lsls	r7, r3, #31
 80059f2:	d508      	bpl.n	8005a06 <_printf_i+0x142>
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	6861      	ldr	r1, [r4, #4]
 80059f8:	4299      	cmp	r1, r3
 80059fa:	bfde      	ittt	le
 80059fc:	2330      	movle	r3, #48	@ 0x30
 80059fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a06:	1b92      	subs	r2, r2, r6
 8005a08:	6122      	str	r2, [r4, #16]
 8005a0a:	f8cd a000 	str.w	sl, [sp]
 8005a0e:	464b      	mov	r3, r9
 8005a10:	aa03      	add	r2, sp, #12
 8005a12:	4621      	mov	r1, r4
 8005a14:	4640      	mov	r0, r8
 8005a16:	f7ff fee7 	bl	80057e8 <_printf_common>
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d14a      	bne.n	8005ab4 <_printf_i+0x1f0>
 8005a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a22:	b004      	add	sp, #16
 8005a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	f043 0320 	orr.w	r3, r3, #32
 8005a2e:	6023      	str	r3, [r4, #0]
 8005a30:	4832      	ldr	r0, [pc, #200]	@ (8005afc <_printf_i+0x238>)
 8005a32:	2778      	movs	r7, #120	@ 0x78
 8005a34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	6831      	ldr	r1, [r6, #0]
 8005a3c:	061f      	lsls	r7, r3, #24
 8005a3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a42:	d402      	bmi.n	8005a4a <_printf_i+0x186>
 8005a44:	065f      	lsls	r7, r3, #25
 8005a46:	bf48      	it	mi
 8005a48:	b2ad      	uxthmi	r5, r5
 8005a4a:	6031      	str	r1, [r6, #0]
 8005a4c:	07d9      	lsls	r1, r3, #31
 8005a4e:	bf44      	itt	mi
 8005a50:	f043 0320 	orrmi.w	r3, r3, #32
 8005a54:	6023      	strmi	r3, [r4, #0]
 8005a56:	b11d      	cbz	r5, 8005a60 <_printf_i+0x19c>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	e7ad      	b.n	80059b8 <_printf_i+0xf4>
 8005a5c:	4826      	ldr	r0, [pc, #152]	@ (8005af8 <_printf_i+0x234>)
 8005a5e:	e7e9      	b.n	8005a34 <_printf_i+0x170>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	f023 0320 	bic.w	r3, r3, #32
 8005a66:	6023      	str	r3, [r4, #0]
 8005a68:	e7f6      	b.n	8005a58 <_printf_i+0x194>
 8005a6a:	4616      	mov	r6, r2
 8005a6c:	e7bd      	b.n	80059ea <_printf_i+0x126>
 8005a6e:	6833      	ldr	r3, [r6, #0]
 8005a70:	6825      	ldr	r5, [r4, #0]
 8005a72:	6961      	ldr	r1, [r4, #20]
 8005a74:	1d18      	adds	r0, r3, #4
 8005a76:	6030      	str	r0, [r6, #0]
 8005a78:	062e      	lsls	r6, r5, #24
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	d501      	bpl.n	8005a82 <_printf_i+0x1be>
 8005a7e:	6019      	str	r1, [r3, #0]
 8005a80:	e002      	b.n	8005a88 <_printf_i+0x1c4>
 8005a82:	0668      	lsls	r0, r5, #25
 8005a84:	d5fb      	bpl.n	8005a7e <_printf_i+0x1ba>
 8005a86:	8019      	strh	r1, [r3, #0]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	6123      	str	r3, [r4, #16]
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	e7bc      	b.n	8005a0a <_printf_i+0x146>
 8005a90:	6833      	ldr	r3, [r6, #0]
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	6032      	str	r2, [r6, #0]
 8005a96:	681e      	ldr	r6, [r3, #0]
 8005a98:	6862      	ldr	r2, [r4, #4]
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f7fa fbb7 	bl	8000210 <memchr>
 8005aa2:	b108      	cbz	r0, 8005aa8 <_printf_i+0x1e4>
 8005aa4:	1b80      	subs	r0, r0, r6
 8005aa6:	6060      	str	r0, [r4, #4]
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	6123      	str	r3, [r4, #16]
 8005aac:	2300      	movs	r3, #0
 8005aae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ab2:	e7aa      	b.n	8005a0a <_printf_i+0x146>
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	4632      	mov	r2, r6
 8005ab8:	4649      	mov	r1, r9
 8005aba:	4640      	mov	r0, r8
 8005abc:	47d0      	blx	sl
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d0ad      	beq.n	8005a1e <_printf_i+0x15a>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	079b      	lsls	r3, r3, #30
 8005ac6:	d413      	bmi.n	8005af0 <_printf_i+0x22c>
 8005ac8:	68e0      	ldr	r0, [r4, #12]
 8005aca:	9b03      	ldr	r3, [sp, #12]
 8005acc:	4298      	cmp	r0, r3
 8005ace:	bfb8      	it	lt
 8005ad0:	4618      	movlt	r0, r3
 8005ad2:	e7a6      	b.n	8005a22 <_printf_i+0x15e>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	4632      	mov	r2, r6
 8005ad8:	4649      	mov	r1, r9
 8005ada:	4640      	mov	r0, r8
 8005adc:	47d0      	blx	sl
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d09d      	beq.n	8005a1e <_printf_i+0x15a>
 8005ae2:	3501      	adds	r5, #1
 8005ae4:	68e3      	ldr	r3, [r4, #12]
 8005ae6:	9903      	ldr	r1, [sp, #12]
 8005ae8:	1a5b      	subs	r3, r3, r1
 8005aea:	42ab      	cmp	r3, r5
 8005aec:	dcf2      	bgt.n	8005ad4 <_printf_i+0x210>
 8005aee:	e7eb      	b.n	8005ac8 <_printf_i+0x204>
 8005af0:	2500      	movs	r5, #0
 8005af2:	f104 0619 	add.w	r6, r4, #25
 8005af6:	e7f5      	b.n	8005ae4 <_printf_i+0x220>
 8005af8:	080073d6 	.word	0x080073d6
 8005afc:	080073e7 	.word	0x080073e7

08005b00 <__swbuf_r>:
 8005b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b02:	460e      	mov	r6, r1
 8005b04:	4614      	mov	r4, r2
 8005b06:	4605      	mov	r5, r0
 8005b08:	b118      	cbz	r0, 8005b12 <__swbuf_r+0x12>
 8005b0a:	6a03      	ldr	r3, [r0, #32]
 8005b0c:	b90b      	cbnz	r3, 8005b12 <__swbuf_r+0x12>
 8005b0e:	f7ff fa41 	bl	8004f94 <__sinit>
 8005b12:	69a3      	ldr	r3, [r4, #24]
 8005b14:	60a3      	str	r3, [r4, #8]
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	071a      	lsls	r2, r3, #28
 8005b1a:	d501      	bpl.n	8005b20 <__swbuf_r+0x20>
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	b943      	cbnz	r3, 8005b32 <__swbuf_r+0x32>
 8005b20:	4621      	mov	r1, r4
 8005b22:	4628      	mov	r0, r5
 8005b24:	f000 f82a 	bl	8005b7c <__swsetup_r>
 8005b28:	b118      	cbz	r0, 8005b32 <__swbuf_r+0x32>
 8005b2a:	f04f 37ff 	mov.w	r7, #4294967295
 8005b2e:	4638      	mov	r0, r7
 8005b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	6922      	ldr	r2, [r4, #16]
 8005b36:	1a98      	subs	r0, r3, r2
 8005b38:	6963      	ldr	r3, [r4, #20]
 8005b3a:	b2f6      	uxtb	r6, r6
 8005b3c:	4283      	cmp	r3, r0
 8005b3e:	4637      	mov	r7, r6
 8005b40:	dc05      	bgt.n	8005b4e <__swbuf_r+0x4e>
 8005b42:	4621      	mov	r1, r4
 8005b44:	4628      	mov	r0, r5
 8005b46:	f7ff fcbd 	bl	80054c4 <_fflush_r>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d1ed      	bne.n	8005b2a <__swbuf_r+0x2a>
 8005b4e:	68a3      	ldr	r3, [r4, #8]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	60a3      	str	r3, [r4, #8]
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	6022      	str	r2, [r4, #0]
 8005b5a:	701e      	strb	r6, [r3, #0]
 8005b5c:	6962      	ldr	r2, [r4, #20]
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d004      	beq.n	8005b6e <__swbuf_r+0x6e>
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	07db      	lsls	r3, r3, #31
 8005b68:	d5e1      	bpl.n	8005b2e <__swbuf_r+0x2e>
 8005b6a:	2e0a      	cmp	r6, #10
 8005b6c:	d1df      	bne.n	8005b2e <__swbuf_r+0x2e>
 8005b6e:	4621      	mov	r1, r4
 8005b70:	4628      	mov	r0, r5
 8005b72:	f7ff fca7 	bl	80054c4 <_fflush_r>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d0d9      	beq.n	8005b2e <__swbuf_r+0x2e>
 8005b7a:	e7d6      	b.n	8005b2a <__swbuf_r+0x2a>

08005b7c <__swsetup_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4b29      	ldr	r3, [pc, #164]	@ (8005c24 <__swsetup_r+0xa8>)
 8005b80:	4605      	mov	r5, r0
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	460c      	mov	r4, r1
 8005b86:	b118      	cbz	r0, 8005b90 <__swsetup_r+0x14>
 8005b88:	6a03      	ldr	r3, [r0, #32]
 8005b8a:	b90b      	cbnz	r3, 8005b90 <__swsetup_r+0x14>
 8005b8c:	f7ff fa02 	bl	8004f94 <__sinit>
 8005b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b94:	0719      	lsls	r1, r3, #28
 8005b96:	d422      	bmi.n	8005bde <__swsetup_r+0x62>
 8005b98:	06da      	lsls	r2, r3, #27
 8005b9a:	d407      	bmi.n	8005bac <__swsetup_r+0x30>
 8005b9c:	2209      	movs	r2, #9
 8005b9e:	602a      	str	r2, [r5, #0]
 8005ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8005baa:	e033      	b.n	8005c14 <__swsetup_r+0x98>
 8005bac:	0758      	lsls	r0, r3, #29
 8005bae:	d512      	bpl.n	8005bd6 <__swsetup_r+0x5a>
 8005bb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bb2:	b141      	cbz	r1, 8005bc6 <__swsetup_r+0x4a>
 8005bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	d002      	beq.n	8005bc2 <__swsetup_r+0x46>
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f7ff fafd 	bl	80051bc <_free_r>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6063      	str	r3, [r4, #4]
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f043 0308 	orr.w	r3, r3, #8
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	6923      	ldr	r3, [r4, #16]
 8005be0:	b94b      	cbnz	r3, 8005bf6 <__swsetup_r+0x7a>
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bec:	d003      	beq.n	8005bf6 <__swsetup_r+0x7a>
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f000 f883 	bl	8005cfc <__smakebuf_r>
 8005bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bfa:	f013 0201 	ands.w	r2, r3, #1
 8005bfe:	d00a      	beq.n	8005c16 <__swsetup_r+0x9a>
 8005c00:	2200      	movs	r2, #0
 8005c02:	60a2      	str	r2, [r4, #8]
 8005c04:	6962      	ldr	r2, [r4, #20]
 8005c06:	4252      	negs	r2, r2
 8005c08:	61a2      	str	r2, [r4, #24]
 8005c0a:	6922      	ldr	r2, [r4, #16]
 8005c0c:	b942      	cbnz	r2, 8005c20 <__swsetup_r+0xa4>
 8005c0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c12:	d1c5      	bne.n	8005ba0 <__swsetup_r+0x24>
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
 8005c16:	0799      	lsls	r1, r3, #30
 8005c18:	bf58      	it	pl
 8005c1a:	6962      	ldrpl	r2, [r4, #20]
 8005c1c:	60a2      	str	r2, [r4, #8]
 8005c1e:	e7f4      	b.n	8005c0a <__swsetup_r+0x8e>
 8005c20:	2000      	movs	r0, #0
 8005c22:	e7f7      	b.n	8005c14 <__swsetup_r+0x98>
 8005c24:	20000050 	.word	0x20000050

08005c28 <_raise_r>:
 8005c28:	291f      	cmp	r1, #31
 8005c2a:	b538      	push	{r3, r4, r5, lr}
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	d904      	bls.n	8005c3c <_raise_r+0x14>
 8005c32:	2316      	movs	r3, #22
 8005c34:	6003      	str	r3, [r0, #0]
 8005c36:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005c3e:	b112      	cbz	r2, 8005c46 <_raise_r+0x1e>
 8005c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c44:	b94b      	cbnz	r3, 8005c5a <_raise_r+0x32>
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 f830 	bl	8005cac <_getpid_r>
 8005c4c:	4622      	mov	r2, r4
 8005c4e:	4601      	mov	r1, r0
 8005c50:	4628      	mov	r0, r5
 8005c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c56:	f000 b817 	b.w	8005c88 <_kill_r>
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d00a      	beq.n	8005c74 <_raise_r+0x4c>
 8005c5e:	1c59      	adds	r1, r3, #1
 8005c60:	d103      	bne.n	8005c6a <_raise_r+0x42>
 8005c62:	2316      	movs	r3, #22
 8005c64:	6003      	str	r3, [r0, #0]
 8005c66:	2001      	movs	r0, #1
 8005c68:	e7e7      	b.n	8005c3a <_raise_r+0x12>
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005c70:	4620      	mov	r0, r4
 8005c72:	4798      	blx	r3
 8005c74:	2000      	movs	r0, #0
 8005c76:	e7e0      	b.n	8005c3a <_raise_r+0x12>

08005c78 <raise>:
 8005c78:	4b02      	ldr	r3, [pc, #8]	@ (8005c84 <raise+0xc>)
 8005c7a:	4601      	mov	r1, r0
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	f7ff bfd3 	b.w	8005c28 <_raise_r>
 8005c82:	bf00      	nop
 8005c84:	20000050 	.word	0x20000050

08005c88 <_kill_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	4d07      	ldr	r5, [pc, #28]	@ (8005ca8 <_kill_r+0x20>)
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4604      	mov	r4, r0
 8005c90:	4608      	mov	r0, r1
 8005c92:	4611      	mov	r1, r2
 8005c94:	602b      	str	r3, [r5, #0]
 8005c96:	f7fc faa7 	bl	80021e8 <_kill>
 8005c9a:	1c43      	adds	r3, r0, #1
 8005c9c:	d102      	bne.n	8005ca4 <_kill_r+0x1c>
 8005c9e:	682b      	ldr	r3, [r5, #0]
 8005ca0:	b103      	cbz	r3, 8005ca4 <_kill_r+0x1c>
 8005ca2:	6023      	str	r3, [r4, #0]
 8005ca4:	bd38      	pop	{r3, r4, r5, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20001654 	.word	0x20001654

08005cac <_getpid_r>:
 8005cac:	f7fc ba94 	b.w	80021d8 <_getpid>

08005cb0 <__swhatbuf_r>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	b096      	sub	sp, #88	@ 0x58
 8005cbc:	4615      	mov	r5, r2
 8005cbe:	461e      	mov	r6, r3
 8005cc0:	da0d      	bge.n	8005cde <__swhatbuf_r+0x2e>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005cc8:	f04f 0100 	mov.w	r1, #0
 8005ccc:	bf14      	ite	ne
 8005cce:	2340      	movne	r3, #64	@ 0x40
 8005cd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	6031      	str	r1, [r6, #0]
 8005cd8:	602b      	str	r3, [r5, #0]
 8005cda:	b016      	add	sp, #88	@ 0x58
 8005cdc:	bd70      	pop	{r4, r5, r6, pc}
 8005cde:	466a      	mov	r2, sp
 8005ce0:	f000 f848 	bl	8005d74 <_fstat_r>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	dbec      	blt.n	8005cc2 <__swhatbuf_r+0x12>
 8005ce8:	9901      	ldr	r1, [sp, #4]
 8005cea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005cee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005cf2:	4259      	negs	r1, r3
 8005cf4:	4159      	adcs	r1, r3
 8005cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cfa:	e7eb      	b.n	8005cd4 <__swhatbuf_r+0x24>

08005cfc <__smakebuf_r>:
 8005cfc:	898b      	ldrh	r3, [r1, #12]
 8005cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d00:	079d      	lsls	r5, r3, #30
 8005d02:	4606      	mov	r6, r0
 8005d04:	460c      	mov	r4, r1
 8005d06:	d507      	bpl.n	8005d18 <__smakebuf_r+0x1c>
 8005d08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	2301      	movs	r3, #1
 8005d12:	6163      	str	r3, [r4, #20]
 8005d14:	b003      	add	sp, #12
 8005d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d18:	ab01      	add	r3, sp, #4
 8005d1a:	466a      	mov	r2, sp
 8005d1c:	f7ff ffc8 	bl	8005cb0 <__swhatbuf_r>
 8005d20:	9f00      	ldr	r7, [sp, #0]
 8005d22:	4605      	mov	r5, r0
 8005d24:	4639      	mov	r1, r7
 8005d26:	4630      	mov	r0, r6
 8005d28:	f7ff fabc 	bl	80052a4 <_malloc_r>
 8005d2c:	b948      	cbnz	r0, 8005d42 <__smakebuf_r+0x46>
 8005d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d32:	059a      	lsls	r2, r3, #22
 8005d34:	d4ee      	bmi.n	8005d14 <__smakebuf_r+0x18>
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	f043 0302 	orr.w	r3, r3, #2
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	e7e2      	b.n	8005d08 <__smakebuf_r+0xc>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	6020      	str	r0, [r4, #0]
 8005d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	9b01      	ldr	r3, [sp, #4]
 8005d4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d52:	b15b      	cbz	r3, 8005d6c <__smakebuf_r+0x70>
 8005d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f000 f81d 	bl	8005d98 <_isatty_r>
 8005d5e:	b128      	cbz	r0, 8005d6c <__smakebuf_r+0x70>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	431d      	orrs	r5, r3
 8005d70:	81a5      	strh	r5, [r4, #12]
 8005d72:	e7cf      	b.n	8005d14 <__smakebuf_r+0x18>

08005d74 <_fstat_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d07      	ldr	r5, [pc, #28]	@ (8005d94 <_fstat_r+0x20>)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	602b      	str	r3, [r5, #0]
 8005d82:	f7fc fa91 	bl	80022a8 <_fstat>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	d102      	bne.n	8005d90 <_fstat_r+0x1c>
 8005d8a:	682b      	ldr	r3, [r5, #0]
 8005d8c:	b103      	cbz	r3, 8005d90 <_fstat_r+0x1c>
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	bd38      	pop	{r3, r4, r5, pc}
 8005d92:	bf00      	nop
 8005d94:	20001654 	.word	0x20001654

08005d98 <_isatty_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d06      	ldr	r5, [pc, #24]	@ (8005db4 <_isatty_r+0x1c>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fc fa90 	bl	80022c8 <_isatty>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_isatty_r+0x1a>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_isatty_r+0x1a>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	20001654 	.word	0x20001654

08005db8 <sin>:
 8005db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dba:	ec53 2b10 	vmov	r2, r3, d0
 8005dbe:	4826      	ldr	r0, [pc, #152]	@ (8005e58 <sin+0xa0>)
 8005dc0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005dc4:	4281      	cmp	r1, r0
 8005dc6:	d807      	bhi.n	8005dd8 <sin+0x20>
 8005dc8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005e50 <sin+0x98>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	b005      	add	sp, #20
 8005dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dd4:	f000 b90c 	b.w	8005ff0 <__kernel_sin>
 8005dd8:	4820      	ldr	r0, [pc, #128]	@ (8005e5c <sin+0xa4>)
 8005dda:	4281      	cmp	r1, r0
 8005ddc:	d908      	bls.n	8005df0 <sin+0x38>
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	f7fa fb93 	bl	800050c <__aeabi_dsub>
 8005de6:	ec41 0b10 	vmov	d0, r0, r1
 8005dea:	b005      	add	sp, #20
 8005dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8005df0:	4668      	mov	r0, sp
 8005df2:	f000 f9b9 	bl	8006168 <__ieee754_rem_pio2>
 8005df6:	f000 0003 	and.w	r0, r0, #3
 8005dfa:	2801      	cmp	r0, #1
 8005dfc:	d00c      	beq.n	8005e18 <sin+0x60>
 8005dfe:	2802      	cmp	r0, #2
 8005e00:	d011      	beq.n	8005e26 <sin+0x6e>
 8005e02:	b9e8      	cbnz	r0, 8005e40 <sin+0x88>
 8005e04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e08:	ed9d 0b00 	vldr	d0, [sp]
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	f000 f8ef 	bl	8005ff0 <__kernel_sin>
 8005e12:	ec51 0b10 	vmov	r0, r1, d0
 8005e16:	e7e6      	b.n	8005de6 <sin+0x2e>
 8005e18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e1c:	ed9d 0b00 	vldr	d0, [sp]
 8005e20:	f000 f81e 	bl	8005e60 <__kernel_cos>
 8005e24:	e7f5      	b.n	8005e12 <sin+0x5a>
 8005e26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e2a:	ed9d 0b00 	vldr	d0, [sp]
 8005e2e:	2001      	movs	r0, #1
 8005e30:	f000 f8de 	bl	8005ff0 <__kernel_sin>
 8005e34:	ec53 2b10 	vmov	r2, r3, d0
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005e3e:	e7d2      	b.n	8005de6 <sin+0x2e>
 8005e40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e44:	ed9d 0b00 	vldr	d0, [sp]
 8005e48:	f000 f80a 	bl	8005e60 <__kernel_cos>
 8005e4c:	e7f2      	b.n	8005e34 <sin+0x7c>
 8005e4e:	bf00      	nop
	...
 8005e58:	3fe921fb 	.word	0x3fe921fb
 8005e5c:	7fefffff 	.word	0x7fefffff

08005e60 <__kernel_cos>:
 8005e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	ec57 6b10 	vmov	r6, r7, d0
 8005e68:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005e6c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005e70:	ed8d 1b00 	vstr	d1, [sp]
 8005e74:	d206      	bcs.n	8005e84 <__kernel_cos+0x24>
 8005e76:	4630      	mov	r0, r6
 8005e78:	4639      	mov	r1, r7
 8005e7a:	f7fa fd87 	bl	800098c <__aeabi_d2iz>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	f000 8088 	beq.w	8005f94 <__kernel_cos+0x134>
 8005e84:	4632      	mov	r2, r6
 8005e86:	463b      	mov	r3, r7
 8005e88:	4630      	mov	r0, r6
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	f7fa fa10 	bl	80002b0 <__aeabi_dmul>
 8005e90:	4b51      	ldr	r3, [pc, #324]	@ (8005fd8 <__kernel_cos+0x178>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	4604      	mov	r4, r0
 8005e96:	460d      	mov	r5, r1
 8005e98:	f7fa fa0a 	bl	80002b0 <__aeabi_dmul>
 8005e9c:	a340      	add	r3, pc, #256	@ (adr r3, 8005fa0 <__kernel_cos+0x140>)
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	4682      	mov	sl, r0
 8005ea4:	468b      	mov	fp, r1
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	f7fa fa01 	bl	80002b0 <__aeabi_dmul>
 8005eae:	a33e      	add	r3, pc, #248	@ (adr r3, 8005fa8 <__kernel_cos+0x148>)
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	f7fa fb2c 	bl	8000510 <__adddf3>
 8005eb8:	4622      	mov	r2, r4
 8005eba:	462b      	mov	r3, r5
 8005ebc:	f7fa f9f8 	bl	80002b0 <__aeabi_dmul>
 8005ec0:	a33b      	add	r3, pc, #236	@ (adr r3, 8005fb0 <__kernel_cos+0x150>)
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	f7fa fb21 	bl	800050c <__aeabi_dsub>
 8005eca:	4622      	mov	r2, r4
 8005ecc:	462b      	mov	r3, r5
 8005ece:	f7fa f9ef 	bl	80002b0 <__aeabi_dmul>
 8005ed2:	a339      	add	r3, pc, #228	@ (adr r3, 8005fb8 <__kernel_cos+0x158>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f7fa fb1a 	bl	8000510 <__adddf3>
 8005edc:	4622      	mov	r2, r4
 8005ede:	462b      	mov	r3, r5
 8005ee0:	f7fa f9e6 	bl	80002b0 <__aeabi_dmul>
 8005ee4:	a336      	add	r3, pc, #216	@ (adr r3, 8005fc0 <__kernel_cos+0x160>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f7fa fb0f 	bl	800050c <__aeabi_dsub>
 8005eee:	4622      	mov	r2, r4
 8005ef0:	462b      	mov	r3, r5
 8005ef2:	f7fa f9dd 	bl	80002b0 <__aeabi_dmul>
 8005ef6:	a334      	add	r3, pc, #208	@ (adr r3, 8005fc8 <__kernel_cos+0x168>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f7fa fb08 	bl	8000510 <__adddf3>
 8005f00:	4622      	mov	r2, r4
 8005f02:	462b      	mov	r3, r5
 8005f04:	f7fa f9d4 	bl	80002b0 <__aeabi_dmul>
 8005f08:	4622      	mov	r2, r4
 8005f0a:	462b      	mov	r3, r5
 8005f0c:	f7fa f9d0 	bl	80002b0 <__aeabi_dmul>
 8005f10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f14:	4604      	mov	r4, r0
 8005f16:	460d      	mov	r5, r1
 8005f18:	4630      	mov	r0, r6
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	f7fa f9c8 	bl	80002b0 <__aeabi_dmul>
 8005f20:	460b      	mov	r3, r1
 8005f22:	4602      	mov	r2, r0
 8005f24:	4629      	mov	r1, r5
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7fa faf0 	bl	800050c <__aeabi_dsub>
 8005f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8005fdc <__kernel_cos+0x17c>)
 8005f2e:	4598      	cmp	r8, r3
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	d810      	bhi.n	8005f58 <__kernel_cos+0xf8>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4650      	mov	r0, sl
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	f7fa fae5 	bl	800050c <__aeabi_dsub>
 8005f42:	460b      	mov	r3, r1
 8005f44:	4926      	ldr	r1, [pc, #152]	@ (8005fe0 <__kernel_cos+0x180>)
 8005f46:	4602      	mov	r2, r0
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f7fa fadf 	bl	800050c <__aeabi_dsub>
 8005f4e:	ec41 0b10 	vmov	d0, r0, r1
 8005f52:	b003      	add	sp, #12
 8005f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f58:	4b22      	ldr	r3, [pc, #136]	@ (8005fe4 <__kernel_cos+0x184>)
 8005f5a:	4921      	ldr	r1, [pc, #132]	@ (8005fe0 <__kernel_cos+0x180>)
 8005f5c:	4598      	cmp	r8, r3
 8005f5e:	bf8c      	ite	hi
 8005f60:	4d21      	ldrhi	r5, [pc, #132]	@ (8005fe8 <__kernel_cos+0x188>)
 8005f62:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005f66:	2400      	movs	r4, #0
 8005f68:	4622      	mov	r2, r4
 8005f6a:	462b      	mov	r3, r5
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	f7fa facd 	bl	800050c <__aeabi_dsub>
 8005f72:	4622      	mov	r2, r4
 8005f74:	4680      	mov	r8, r0
 8005f76:	4689      	mov	r9, r1
 8005f78:	462b      	mov	r3, r5
 8005f7a:	4650      	mov	r0, sl
 8005f7c:	4659      	mov	r1, fp
 8005f7e:	f7fa fac5 	bl	800050c <__aeabi_dsub>
 8005f82:	4632      	mov	r2, r6
 8005f84:	463b      	mov	r3, r7
 8005f86:	f7fa fac1 	bl	800050c <__aeabi_dsub>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4640      	mov	r0, r8
 8005f90:	4649      	mov	r1, r9
 8005f92:	e7da      	b.n	8005f4a <__kernel_cos+0xea>
 8005f94:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005fd0 <__kernel_cos+0x170>
 8005f98:	e7db      	b.n	8005f52 <__kernel_cos+0xf2>
 8005f9a:	bf00      	nop
 8005f9c:	f3af 8000 	nop.w
 8005fa0:	be8838d4 	.word	0xbe8838d4
 8005fa4:	bda8fae9 	.word	0xbda8fae9
 8005fa8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005fac:	3e21ee9e 	.word	0x3e21ee9e
 8005fb0:	809c52ad 	.word	0x809c52ad
 8005fb4:	3e927e4f 	.word	0x3e927e4f
 8005fb8:	19cb1590 	.word	0x19cb1590
 8005fbc:	3efa01a0 	.word	0x3efa01a0
 8005fc0:	16c15177 	.word	0x16c15177
 8005fc4:	3f56c16c 	.word	0x3f56c16c
 8005fc8:	5555554c 	.word	0x5555554c
 8005fcc:	3fa55555 	.word	0x3fa55555
 8005fd0:	00000000 	.word	0x00000000
 8005fd4:	3ff00000 	.word	0x3ff00000
 8005fd8:	3fe00000 	.word	0x3fe00000
 8005fdc:	3fd33332 	.word	0x3fd33332
 8005fe0:	3ff00000 	.word	0x3ff00000
 8005fe4:	3fe90000 	.word	0x3fe90000
 8005fe8:	3fd20000 	.word	0x3fd20000
 8005fec:	00000000 	.word	0x00000000

08005ff0 <__kernel_sin>:
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	ec55 4b10 	vmov	r4, r5, d0
 8005ff8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006002:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006006:	4680      	mov	r8, r0
 8006008:	d205      	bcs.n	8006016 <__kernel_sin+0x26>
 800600a:	4620      	mov	r0, r4
 800600c:	4629      	mov	r1, r5
 800600e:	f7fa fcbd 	bl	800098c <__aeabi_d2iz>
 8006012:	2800      	cmp	r0, #0
 8006014:	d052      	beq.n	80060bc <__kernel_sin+0xcc>
 8006016:	4622      	mov	r2, r4
 8006018:	462b      	mov	r3, r5
 800601a:	4620      	mov	r0, r4
 800601c:	4629      	mov	r1, r5
 800601e:	f7fa f947 	bl	80002b0 <__aeabi_dmul>
 8006022:	4682      	mov	sl, r0
 8006024:	468b      	mov	fp, r1
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4620      	mov	r0, r4
 800602c:	4629      	mov	r1, r5
 800602e:	f7fa f93f 	bl	80002b0 <__aeabi_dmul>
 8006032:	a342      	add	r3, pc, #264	@ (adr r3, 800613c <__kernel_sin+0x14c>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	e9cd 0100 	strd	r0, r1, [sp]
 800603c:	4650      	mov	r0, sl
 800603e:	4659      	mov	r1, fp
 8006040:	f7fa f936 	bl	80002b0 <__aeabi_dmul>
 8006044:	a33f      	add	r3, pc, #252	@ (adr r3, 8006144 <__kernel_sin+0x154>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa fa5f 	bl	800050c <__aeabi_dsub>
 800604e:	4652      	mov	r2, sl
 8006050:	465b      	mov	r3, fp
 8006052:	f7fa f92d 	bl	80002b0 <__aeabi_dmul>
 8006056:	a33d      	add	r3, pc, #244	@ (adr r3, 800614c <__kernel_sin+0x15c>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f7fa fa58 	bl	8000510 <__adddf3>
 8006060:	4652      	mov	r2, sl
 8006062:	465b      	mov	r3, fp
 8006064:	f7fa f924 	bl	80002b0 <__aeabi_dmul>
 8006068:	a33a      	add	r3, pc, #232	@ (adr r3, 8006154 <__kernel_sin+0x164>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f7fa fa4d 	bl	800050c <__aeabi_dsub>
 8006072:	4652      	mov	r2, sl
 8006074:	465b      	mov	r3, fp
 8006076:	f7fa f91b 	bl	80002b0 <__aeabi_dmul>
 800607a:	a338      	add	r3, pc, #224	@ (adr r3, 800615c <__kernel_sin+0x16c>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f7fa fa46 	bl	8000510 <__adddf3>
 8006084:	4606      	mov	r6, r0
 8006086:	460f      	mov	r7, r1
 8006088:	f1b8 0f00 	cmp.w	r8, #0
 800608c:	d11b      	bne.n	80060c6 <__kernel_sin+0xd6>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4650      	mov	r0, sl
 8006094:	4659      	mov	r1, fp
 8006096:	f7fa f90b 	bl	80002b0 <__aeabi_dmul>
 800609a:	a325      	add	r3, pc, #148	@ (adr r3, 8006130 <__kernel_sin+0x140>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa fa34 	bl	800050c <__aeabi_dsub>
 80060a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060a8:	f7fa f902 	bl	80002b0 <__aeabi_dmul>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4620      	mov	r0, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	f7fa fa2c 	bl	8000510 <__adddf3>
 80060b8:	4604      	mov	r4, r0
 80060ba:	460d      	mov	r5, r1
 80060bc:	ec45 4b10 	vmov	d0, r4, r5
 80060c0:	b005      	add	sp, #20
 80060c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006138 <__kernel_sin+0x148>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	f7fa f8ef 	bl	80002b0 <__aeabi_dmul>
 80060d2:	4632      	mov	r2, r6
 80060d4:	4680      	mov	r8, r0
 80060d6:	4689      	mov	r9, r1
 80060d8:	463b      	mov	r3, r7
 80060da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060de:	f7fa f8e7 	bl	80002b0 <__aeabi_dmul>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4640      	mov	r0, r8
 80060e8:	4649      	mov	r1, r9
 80060ea:	f7fa fa0f 	bl	800050c <__aeabi_dsub>
 80060ee:	4652      	mov	r2, sl
 80060f0:	465b      	mov	r3, fp
 80060f2:	f7fa f8dd 	bl	80002b0 <__aeabi_dmul>
 80060f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060fa:	f7fa fa07 	bl	800050c <__aeabi_dsub>
 80060fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8006130 <__kernel_sin+0x140>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	4606      	mov	r6, r0
 8006106:	460f      	mov	r7, r1
 8006108:	e9dd 0100 	ldrd	r0, r1, [sp]
 800610c:	f7fa f8d0 	bl	80002b0 <__aeabi_dmul>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4630      	mov	r0, r6
 8006116:	4639      	mov	r1, r7
 8006118:	f7fa f9fa 	bl	8000510 <__adddf3>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4620      	mov	r0, r4
 8006122:	4629      	mov	r1, r5
 8006124:	f7fa f9f2 	bl	800050c <__aeabi_dsub>
 8006128:	e7c6      	b.n	80060b8 <__kernel_sin+0xc8>
 800612a:	bf00      	nop
 800612c:	f3af 8000 	nop.w
 8006130:	55555549 	.word	0x55555549
 8006134:	3fc55555 	.word	0x3fc55555
 8006138:	3fe00000 	.word	0x3fe00000
 800613c:	5acfd57c 	.word	0x5acfd57c
 8006140:	3de5d93a 	.word	0x3de5d93a
 8006144:	8a2b9ceb 	.word	0x8a2b9ceb
 8006148:	3e5ae5e6 	.word	0x3e5ae5e6
 800614c:	57b1fe7d 	.word	0x57b1fe7d
 8006150:	3ec71de3 	.word	0x3ec71de3
 8006154:	19c161d5 	.word	0x19c161d5
 8006158:	3f2a01a0 	.word	0x3f2a01a0
 800615c:	1110f8a6 	.word	0x1110f8a6
 8006160:	3f811111 	.word	0x3f811111
 8006164:	00000000 	.word	0x00000000

08006168 <__ieee754_rem_pio2>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	ec57 6b10 	vmov	r6, r7, d0
 8006170:	4bc5      	ldr	r3, [pc, #788]	@ (8006488 <__ieee754_rem_pio2+0x320>)
 8006172:	b08d      	sub	sp, #52	@ 0x34
 8006174:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006178:	4598      	cmp	r8, r3
 800617a:	4604      	mov	r4, r0
 800617c:	9704      	str	r7, [sp, #16]
 800617e:	d807      	bhi.n	8006190 <__ieee754_rem_pio2+0x28>
 8006180:	2200      	movs	r2, #0
 8006182:	2300      	movs	r3, #0
 8006184:	ed80 0b00 	vstr	d0, [r0]
 8006188:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800618c:	2500      	movs	r5, #0
 800618e:	e028      	b.n	80061e2 <__ieee754_rem_pio2+0x7a>
 8006190:	4bbe      	ldr	r3, [pc, #760]	@ (800648c <__ieee754_rem_pio2+0x324>)
 8006192:	4598      	cmp	r8, r3
 8006194:	d878      	bhi.n	8006288 <__ieee754_rem_pio2+0x120>
 8006196:	9b04      	ldr	r3, [sp, #16]
 8006198:	4dbd      	ldr	r5, [pc, #756]	@ (8006490 <__ieee754_rem_pio2+0x328>)
 800619a:	2b00      	cmp	r3, #0
 800619c:	4630      	mov	r0, r6
 800619e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006450 <__ieee754_rem_pio2+0x2e8>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	4639      	mov	r1, r7
 80061a6:	dd38      	ble.n	800621a <__ieee754_rem_pio2+0xb2>
 80061a8:	f7fa f9b0 	bl	800050c <__aeabi_dsub>
 80061ac:	45a8      	cmp	r8, r5
 80061ae:	4606      	mov	r6, r0
 80061b0:	460f      	mov	r7, r1
 80061b2:	d01a      	beq.n	80061ea <__ieee754_rem_pio2+0x82>
 80061b4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006458 <__ieee754_rem_pio2+0x2f0>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f7fa f9a7 	bl	800050c <__aeabi_dsub>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4680      	mov	r8, r0
 80061c4:	4689      	mov	r9, r1
 80061c6:	4630      	mov	r0, r6
 80061c8:	4639      	mov	r1, r7
 80061ca:	f7fa f99f 	bl	800050c <__aeabi_dsub>
 80061ce:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006458 <__ieee754_rem_pio2+0x2f0>)
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f7fa f99a 	bl	800050c <__aeabi_dsub>
 80061d8:	e9c4 8900 	strd	r8, r9, [r4]
 80061dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80061e0:	2501      	movs	r5, #1
 80061e2:	4628      	mov	r0, r5
 80061e4:	b00d      	add	sp, #52	@ 0x34
 80061e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ea:	a39d      	add	r3, pc, #628	@ (adr r3, 8006460 <__ieee754_rem_pio2+0x2f8>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f7fa f98c 	bl	800050c <__aeabi_dsub>
 80061f4:	a39c      	add	r3, pc, #624	@ (adr r3, 8006468 <__ieee754_rem_pio2+0x300>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	4606      	mov	r6, r0
 80061fc:	460f      	mov	r7, r1
 80061fe:	f7fa f985 	bl	800050c <__aeabi_dsub>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4680      	mov	r8, r0
 8006208:	4689      	mov	r9, r1
 800620a:	4630      	mov	r0, r6
 800620c:	4639      	mov	r1, r7
 800620e:	f7fa f97d 	bl	800050c <__aeabi_dsub>
 8006212:	a395      	add	r3, pc, #596	@ (adr r3, 8006468 <__ieee754_rem_pio2+0x300>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	e7dc      	b.n	80061d4 <__ieee754_rem_pio2+0x6c>
 800621a:	f7fa f979 	bl	8000510 <__adddf3>
 800621e:	45a8      	cmp	r8, r5
 8006220:	4606      	mov	r6, r0
 8006222:	460f      	mov	r7, r1
 8006224:	d018      	beq.n	8006258 <__ieee754_rem_pio2+0xf0>
 8006226:	a38c      	add	r3, pc, #560	@ (adr r3, 8006458 <__ieee754_rem_pio2+0x2f0>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f7fa f970 	bl	8000510 <__adddf3>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4680      	mov	r8, r0
 8006236:	4689      	mov	r9, r1
 8006238:	4630      	mov	r0, r6
 800623a:	4639      	mov	r1, r7
 800623c:	f7fa f966 	bl	800050c <__aeabi_dsub>
 8006240:	a385      	add	r3, pc, #532	@ (adr r3, 8006458 <__ieee754_rem_pio2+0x2f0>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f963 	bl	8000510 <__adddf3>
 800624a:	f04f 35ff 	mov.w	r5, #4294967295
 800624e:	e9c4 8900 	strd	r8, r9, [r4]
 8006252:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006256:	e7c4      	b.n	80061e2 <__ieee754_rem_pio2+0x7a>
 8006258:	a381      	add	r3, pc, #516	@ (adr r3, 8006460 <__ieee754_rem_pio2+0x2f8>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f7fa f957 	bl	8000510 <__adddf3>
 8006262:	a381      	add	r3, pc, #516	@ (adr r3, 8006468 <__ieee754_rem_pio2+0x300>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	4606      	mov	r6, r0
 800626a:	460f      	mov	r7, r1
 800626c:	f7fa f950 	bl	8000510 <__adddf3>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4680      	mov	r8, r0
 8006276:	4689      	mov	r9, r1
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	f7fa f946 	bl	800050c <__aeabi_dsub>
 8006280:	a379      	add	r3, pc, #484	@ (adr r3, 8006468 <__ieee754_rem_pio2+0x300>)
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	e7de      	b.n	8006246 <__ieee754_rem_pio2+0xde>
 8006288:	4b82      	ldr	r3, [pc, #520]	@ (8006494 <__ieee754_rem_pio2+0x32c>)
 800628a:	4598      	cmp	r8, r3
 800628c:	f200 80d1 	bhi.w	8006432 <__ieee754_rem_pio2+0x2ca>
 8006290:	f000 f966 	bl	8006560 <fabs>
 8006294:	ec57 6b10 	vmov	r6, r7, d0
 8006298:	a375      	add	r3, pc, #468	@ (adr r3, 8006470 <__ieee754_rem_pio2+0x308>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	4630      	mov	r0, r6
 80062a0:	4639      	mov	r1, r7
 80062a2:	f7fa f805 	bl	80002b0 <__aeabi_dmul>
 80062a6:	4b7c      	ldr	r3, [pc, #496]	@ (8006498 <__ieee754_rem_pio2+0x330>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	f7fa f931 	bl	8000510 <__adddf3>
 80062ae:	f7fa fb6d 	bl	800098c <__aeabi_d2iz>
 80062b2:	4605      	mov	r5, r0
 80062b4:	f7fa fa78 	bl	80007a8 <__aeabi_i2d>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062c0:	a363      	add	r3, pc, #396	@ (adr r3, 8006450 <__ieee754_rem_pio2+0x2e8>)
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f7f9 fff3 	bl	80002b0 <__aeabi_dmul>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4630      	mov	r0, r6
 80062d0:	4639      	mov	r1, r7
 80062d2:	f7fa f91b 	bl	800050c <__aeabi_dsub>
 80062d6:	a360      	add	r3, pc, #384	@ (adr r3, 8006458 <__ieee754_rem_pio2+0x2f0>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	4682      	mov	sl, r0
 80062de:	468b      	mov	fp, r1
 80062e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062e4:	f7f9 ffe4 	bl	80002b0 <__aeabi_dmul>
 80062e8:	2d1f      	cmp	r5, #31
 80062ea:	4606      	mov	r6, r0
 80062ec:	460f      	mov	r7, r1
 80062ee:	dc0c      	bgt.n	800630a <__ieee754_rem_pio2+0x1a2>
 80062f0:	4b6a      	ldr	r3, [pc, #424]	@ (800649c <__ieee754_rem_pio2+0x334>)
 80062f2:	1e6a      	subs	r2, r5, #1
 80062f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f8:	4543      	cmp	r3, r8
 80062fa:	d006      	beq.n	800630a <__ieee754_rem_pio2+0x1a2>
 80062fc:	4632      	mov	r2, r6
 80062fe:	463b      	mov	r3, r7
 8006300:	4650      	mov	r0, sl
 8006302:	4659      	mov	r1, fp
 8006304:	f7fa f902 	bl	800050c <__aeabi_dsub>
 8006308:	e00e      	b.n	8006328 <__ieee754_rem_pio2+0x1c0>
 800630a:	463b      	mov	r3, r7
 800630c:	4632      	mov	r2, r6
 800630e:	4650      	mov	r0, sl
 8006310:	4659      	mov	r1, fp
 8006312:	f7fa f8fb 	bl	800050c <__aeabi_dsub>
 8006316:	ea4f 5328 	mov.w	r3, r8, asr #20
 800631a:	9305      	str	r3, [sp, #20]
 800631c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006320:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006324:	2b10      	cmp	r3, #16
 8006326:	dc02      	bgt.n	800632e <__ieee754_rem_pio2+0x1c6>
 8006328:	e9c4 0100 	strd	r0, r1, [r4]
 800632c:	e039      	b.n	80063a2 <__ieee754_rem_pio2+0x23a>
 800632e:	a34c      	add	r3, pc, #304	@ (adr r3, 8006460 <__ieee754_rem_pio2+0x2f8>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006338:	f7f9 ffba 	bl	80002b0 <__aeabi_dmul>
 800633c:	4606      	mov	r6, r0
 800633e:	460f      	mov	r7, r1
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4650      	mov	r0, sl
 8006346:	4659      	mov	r1, fp
 8006348:	f7fa f8e0 	bl	800050c <__aeabi_dsub>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4680      	mov	r8, r0
 8006352:	4689      	mov	r9, r1
 8006354:	4650      	mov	r0, sl
 8006356:	4659      	mov	r1, fp
 8006358:	f7fa f8d8 	bl	800050c <__aeabi_dsub>
 800635c:	4632      	mov	r2, r6
 800635e:	463b      	mov	r3, r7
 8006360:	f7fa f8d4 	bl	800050c <__aeabi_dsub>
 8006364:	a340      	add	r3, pc, #256	@ (adr r3, 8006468 <__ieee754_rem_pio2+0x300>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	4606      	mov	r6, r0
 800636c:	460f      	mov	r7, r1
 800636e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006372:	f7f9 ff9d 	bl	80002b0 <__aeabi_dmul>
 8006376:	4632      	mov	r2, r6
 8006378:	463b      	mov	r3, r7
 800637a:	f7fa f8c7 	bl	800050c <__aeabi_dsub>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4606      	mov	r6, r0
 8006384:	460f      	mov	r7, r1
 8006386:	4640      	mov	r0, r8
 8006388:	4649      	mov	r1, r9
 800638a:	f7fa f8bf 	bl	800050c <__aeabi_dsub>
 800638e:	9a05      	ldr	r2, [sp, #20]
 8006390:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b31      	cmp	r3, #49	@ 0x31
 8006398:	dc20      	bgt.n	80063dc <__ieee754_rem_pio2+0x274>
 800639a:	e9c4 0100 	strd	r0, r1, [r4]
 800639e:	46c2      	mov	sl, r8
 80063a0:	46cb      	mov	fp, r9
 80063a2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80063a6:	4650      	mov	r0, sl
 80063a8:	4642      	mov	r2, r8
 80063aa:	464b      	mov	r3, r9
 80063ac:	4659      	mov	r1, fp
 80063ae:	f7fa f8ad 	bl	800050c <__aeabi_dsub>
 80063b2:	463b      	mov	r3, r7
 80063b4:	4632      	mov	r2, r6
 80063b6:	f7fa f8a9 	bl	800050c <__aeabi_dsub>
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80063c2:	f6bf af0e 	bge.w	80061e2 <__ieee754_rem_pio2+0x7a>
 80063c6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80063ca:	6063      	str	r3, [r4, #4]
 80063cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80063d0:	f8c4 8000 	str.w	r8, [r4]
 80063d4:	60a0      	str	r0, [r4, #8]
 80063d6:	60e3      	str	r3, [r4, #12]
 80063d8:	426d      	negs	r5, r5
 80063da:	e702      	b.n	80061e2 <__ieee754_rem_pio2+0x7a>
 80063dc:	a326      	add	r3, pc, #152	@ (adr r3, 8006478 <__ieee754_rem_pio2+0x310>)
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063e6:	f7f9 ff63 	bl	80002b0 <__aeabi_dmul>
 80063ea:	4606      	mov	r6, r0
 80063ec:	460f      	mov	r7, r1
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4640      	mov	r0, r8
 80063f4:	4649      	mov	r1, r9
 80063f6:	f7fa f889 	bl	800050c <__aeabi_dsub>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4682      	mov	sl, r0
 8006400:	468b      	mov	fp, r1
 8006402:	4640      	mov	r0, r8
 8006404:	4649      	mov	r1, r9
 8006406:	f7fa f881 	bl	800050c <__aeabi_dsub>
 800640a:	4632      	mov	r2, r6
 800640c:	463b      	mov	r3, r7
 800640e:	f7fa f87d 	bl	800050c <__aeabi_dsub>
 8006412:	a31b      	add	r3, pc, #108	@ (adr r3, 8006480 <__ieee754_rem_pio2+0x318>)
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	4606      	mov	r6, r0
 800641a:	460f      	mov	r7, r1
 800641c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006420:	f7f9 ff46 	bl	80002b0 <__aeabi_dmul>
 8006424:	4632      	mov	r2, r6
 8006426:	463b      	mov	r3, r7
 8006428:	f7fa f870 	bl	800050c <__aeabi_dsub>
 800642c:	4606      	mov	r6, r0
 800642e:	460f      	mov	r7, r1
 8006430:	e764      	b.n	80062fc <__ieee754_rem_pio2+0x194>
 8006432:	4b1b      	ldr	r3, [pc, #108]	@ (80064a0 <__ieee754_rem_pio2+0x338>)
 8006434:	4598      	cmp	r8, r3
 8006436:	d935      	bls.n	80064a4 <__ieee754_rem_pio2+0x33c>
 8006438:	4632      	mov	r2, r6
 800643a:	463b      	mov	r3, r7
 800643c:	4630      	mov	r0, r6
 800643e:	4639      	mov	r1, r7
 8006440:	f7fa f864 	bl	800050c <__aeabi_dsub>
 8006444:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006448:	e9c4 0100 	strd	r0, r1, [r4]
 800644c:	e69e      	b.n	800618c <__ieee754_rem_pio2+0x24>
 800644e:	bf00      	nop
 8006450:	54400000 	.word	0x54400000
 8006454:	3ff921fb 	.word	0x3ff921fb
 8006458:	1a626331 	.word	0x1a626331
 800645c:	3dd0b461 	.word	0x3dd0b461
 8006460:	1a600000 	.word	0x1a600000
 8006464:	3dd0b461 	.word	0x3dd0b461
 8006468:	2e037073 	.word	0x2e037073
 800646c:	3ba3198a 	.word	0x3ba3198a
 8006470:	6dc9c883 	.word	0x6dc9c883
 8006474:	3fe45f30 	.word	0x3fe45f30
 8006478:	2e000000 	.word	0x2e000000
 800647c:	3ba3198a 	.word	0x3ba3198a
 8006480:	252049c1 	.word	0x252049c1
 8006484:	397b839a 	.word	0x397b839a
 8006488:	3fe921fb 	.word	0x3fe921fb
 800648c:	4002d97b 	.word	0x4002d97b
 8006490:	3ff921fb 	.word	0x3ff921fb
 8006494:	413921fb 	.word	0x413921fb
 8006498:	3fe00000 	.word	0x3fe00000
 800649c:	080073f8 	.word	0x080073f8
 80064a0:	7fefffff 	.word	0x7fefffff
 80064a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80064a8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80064ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80064b0:	4630      	mov	r0, r6
 80064b2:	460f      	mov	r7, r1
 80064b4:	f7fa fa6a 	bl	800098c <__aeabi_d2iz>
 80064b8:	f7fa f976 	bl	80007a8 <__aeabi_i2d>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4630      	mov	r0, r6
 80064c2:	4639      	mov	r1, r7
 80064c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064c8:	f7fa f820 	bl	800050c <__aeabi_dsub>
 80064cc:	4b22      	ldr	r3, [pc, #136]	@ (8006558 <__ieee754_rem_pio2+0x3f0>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	f7f9 feee 	bl	80002b0 <__aeabi_dmul>
 80064d4:	460f      	mov	r7, r1
 80064d6:	4606      	mov	r6, r0
 80064d8:	f7fa fa58 	bl	800098c <__aeabi_d2iz>
 80064dc:	f7fa f964 	bl	80007a8 <__aeabi_i2d>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4630      	mov	r0, r6
 80064e6:	4639      	mov	r1, r7
 80064e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80064ec:	f7fa f80e 	bl	800050c <__aeabi_dsub>
 80064f0:	4b19      	ldr	r3, [pc, #100]	@ (8006558 <__ieee754_rem_pio2+0x3f0>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	f7f9 fedc 	bl	80002b0 <__aeabi_dmul>
 80064f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80064fc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006500:	f04f 0803 	mov.w	r8, #3
 8006504:	2600      	movs	r6, #0
 8006506:	2700      	movs	r7, #0
 8006508:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800650c:	4632      	mov	r2, r6
 800650e:	463b      	mov	r3, r7
 8006510:	46c2      	mov	sl, r8
 8006512:	f108 38ff 	add.w	r8, r8, #4294967295
 8006516:	f7fa fa07 	bl	8000928 <__aeabi_dcmpeq>
 800651a:	2800      	cmp	r0, #0
 800651c:	d1f4      	bne.n	8006508 <__ieee754_rem_pio2+0x3a0>
 800651e:	4b0f      	ldr	r3, [pc, #60]	@ (800655c <__ieee754_rem_pio2+0x3f4>)
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	2302      	movs	r3, #2
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	462a      	mov	r2, r5
 8006528:	4653      	mov	r3, sl
 800652a:	4621      	mov	r1, r4
 800652c:	a806      	add	r0, sp, #24
 800652e:	f000 f81f 	bl	8006570 <__kernel_rem_pio2>
 8006532:	9b04      	ldr	r3, [sp, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	4605      	mov	r5, r0
 8006538:	f6bf ae53 	bge.w	80061e2 <__ieee754_rem_pio2+0x7a>
 800653c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006540:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006544:	e9c4 2300 	strd	r2, r3, [r4]
 8006548:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800654c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006550:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006554:	e740      	b.n	80063d8 <__ieee754_rem_pio2+0x270>
 8006556:	bf00      	nop
 8006558:	41700000 	.word	0x41700000
 800655c:	08007478 	.word	0x08007478

08006560 <fabs>:
 8006560:	ec51 0b10 	vmov	r0, r1, d0
 8006564:	4602      	mov	r2, r0
 8006566:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800656a:	ec43 2b10 	vmov	d0, r2, r3
 800656e:	4770      	bx	lr

08006570 <__kernel_rem_pio2>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	ed2d 8b02 	vpush	{d8}
 8006578:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800657c:	f112 0f14 	cmn.w	r2, #20
 8006580:	9306      	str	r3, [sp, #24]
 8006582:	9104      	str	r1, [sp, #16]
 8006584:	4bc2      	ldr	r3, [pc, #776]	@ (8006890 <__kernel_rem_pio2+0x320>)
 8006586:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006588:	9008      	str	r0, [sp, #32]
 800658a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	9b06      	ldr	r3, [sp, #24]
 8006592:	f103 33ff 	add.w	r3, r3, #4294967295
 8006596:	bfa8      	it	ge
 8006598:	1ed4      	subge	r4, r2, #3
 800659a:	9305      	str	r3, [sp, #20]
 800659c:	bfb2      	itee	lt
 800659e:	2400      	movlt	r4, #0
 80065a0:	2318      	movge	r3, #24
 80065a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80065a6:	f06f 0317 	mvn.w	r3, #23
 80065aa:	fb04 3303 	mla	r3, r4, r3, r3
 80065ae:	eb03 0b02 	add.w	fp, r3, r2
 80065b2:	9b00      	ldr	r3, [sp, #0]
 80065b4:	9a05      	ldr	r2, [sp, #20]
 80065b6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8006880 <__kernel_rem_pio2+0x310>
 80065ba:	eb03 0802 	add.w	r8, r3, r2
 80065be:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80065c0:	1aa7      	subs	r7, r4, r2
 80065c2:	ae20      	add	r6, sp, #128	@ 0x80
 80065c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80065c8:	2500      	movs	r5, #0
 80065ca:	4545      	cmp	r5, r8
 80065cc:	dd12      	ble.n	80065f4 <__kernel_rem_pio2+0x84>
 80065ce:	9b06      	ldr	r3, [sp, #24]
 80065d0:	aa20      	add	r2, sp, #128	@ 0x80
 80065d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80065d6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80065da:	2700      	movs	r7, #0
 80065dc:	9b00      	ldr	r3, [sp, #0]
 80065de:	429f      	cmp	r7, r3
 80065e0:	dc2e      	bgt.n	8006640 <__kernel_rem_pio2+0xd0>
 80065e2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8006880 <__kernel_rem_pio2+0x310>
 80065e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80065ee:	46a8      	mov	r8, r5
 80065f0:	2600      	movs	r6, #0
 80065f2:	e01b      	b.n	800662c <__kernel_rem_pio2+0xbc>
 80065f4:	42ef      	cmn	r7, r5
 80065f6:	d407      	bmi.n	8006608 <__kernel_rem_pio2+0x98>
 80065f8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80065fc:	f7fa f8d4 	bl	80007a8 <__aeabi_i2d>
 8006600:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006604:	3501      	adds	r5, #1
 8006606:	e7e0      	b.n	80065ca <__kernel_rem_pio2+0x5a>
 8006608:	ec51 0b18 	vmov	r0, r1, d8
 800660c:	e7f8      	b.n	8006600 <__kernel_rem_pio2+0x90>
 800660e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8006612:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006616:	f7f9 fe4b 	bl	80002b0 <__aeabi_dmul>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006622:	f7f9 ff75 	bl	8000510 <__adddf3>
 8006626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800662a:	3601      	adds	r6, #1
 800662c:	9b05      	ldr	r3, [sp, #20]
 800662e:	429e      	cmp	r6, r3
 8006630:	dded      	ble.n	800660e <__kernel_rem_pio2+0x9e>
 8006632:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006636:	3701      	adds	r7, #1
 8006638:	ecaa 7b02 	vstmia	sl!, {d7}
 800663c:	3508      	adds	r5, #8
 800663e:	e7cd      	b.n	80065dc <__kernel_rem_pio2+0x6c>
 8006640:	9b00      	ldr	r3, [sp, #0]
 8006642:	f8dd 8000 	ldr.w	r8, [sp]
 8006646:	aa0c      	add	r2, sp, #48	@ 0x30
 8006648:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800664c:	930a      	str	r3, [sp, #40]	@ 0x28
 800664e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006650:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006654:	9309      	str	r3, [sp, #36]	@ 0x24
 8006656:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800665a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800665c:	ab98      	add	r3, sp, #608	@ 0x260
 800665e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006662:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006666:	ed8d 7b02 	vstr	d7, [sp, #8]
 800666a:	ac0c      	add	r4, sp, #48	@ 0x30
 800666c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800666e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006672:	46a1      	mov	r9, r4
 8006674:	46c2      	mov	sl, r8
 8006676:	f1ba 0f00 	cmp.w	sl, #0
 800667a:	dc77      	bgt.n	800676c <__kernel_rem_pio2+0x1fc>
 800667c:	4658      	mov	r0, fp
 800667e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006682:	f000 fac5 	bl	8006c10 <scalbn>
 8006686:	ec57 6b10 	vmov	r6, r7, d0
 800668a:	2200      	movs	r2, #0
 800668c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006690:	4630      	mov	r0, r6
 8006692:	4639      	mov	r1, r7
 8006694:	f7f9 fe0c 	bl	80002b0 <__aeabi_dmul>
 8006698:	ec41 0b10 	vmov	d0, r0, r1
 800669c:	f000 fb34 	bl	8006d08 <floor>
 80066a0:	4b7c      	ldr	r3, [pc, #496]	@ (8006894 <__kernel_rem_pio2+0x324>)
 80066a2:	ec51 0b10 	vmov	r0, r1, d0
 80066a6:	2200      	movs	r2, #0
 80066a8:	f7f9 fe02 	bl	80002b0 <__aeabi_dmul>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4630      	mov	r0, r6
 80066b2:	4639      	mov	r1, r7
 80066b4:	f7f9 ff2a 	bl	800050c <__aeabi_dsub>
 80066b8:	460f      	mov	r7, r1
 80066ba:	4606      	mov	r6, r0
 80066bc:	f7fa f966 	bl	800098c <__aeabi_d2iz>
 80066c0:	9002      	str	r0, [sp, #8]
 80066c2:	f7fa f871 	bl	80007a8 <__aeabi_i2d>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4630      	mov	r0, r6
 80066cc:	4639      	mov	r1, r7
 80066ce:	f7f9 ff1d 	bl	800050c <__aeabi_dsub>
 80066d2:	f1bb 0f00 	cmp.w	fp, #0
 80066d6:	4606      	mov	r6, r0
 80066d8:	460f      	mov	r7, r1
 80066da:	dd6c      	ble.n	80067b6 <__kernel_rem_pio2+0x246>
 80066dc:	f108 31ff 	add.w	r1, r8, #4294967295
 80066e0:	ab0c      	add	r3, sp, #48	@ 0x30
 80066e2:	9d02      	ldr	r5, [sp, #8]
 80066e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066e8:	f1cb 0018 	rsb	r0, fp, #24
 80066ec:	fa43 f200 	asr.w	r2, r3, r0
 80066f0:	4415      	add	r5, r2
 80066f2:	4082      	lsls	r2, r0
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	aa0c      	add	r2, sp, #48	@ 0x30
 80066f8:	9502      	str	r5, [sp, #8]
 80066fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80066fe:	f1cb 0217 	rsb	r2, fp, #23
 8006702:	fa43 f902 	asr.w	r9, r3, r2
 8006706:	f1b9 0f00 	cmp.w	r9, #0
 800670a:	dd64      	ble.n	80067d6 <__kernel_rem_pio2+0x266>
 800670c:	9b02      	ldr	r3, [sp, #8]
 800670e:	2200      	movs	r2, #0
 8006710:	3301      	adds	r3, #1
 8006712:	9302      	str	r3, [sp, #8]
 8006714:	4615      	mov	r5, r2
 8006716:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800671a:	4590      	cmp	r8, r2
 800671c:	f300 80a1 	bgt.w	8006862 <__kernel_rem_pio2+0x2f2>
 8006720:	f1bb 0f00 	cmp.w	fp, #0
 8006724:	dd07      	ble.n	8006736 <__kernel_rem_pio2+0x1c6>
 8006726:	f1bb 0f01 	cmp.w	fp, #1
 800672a:	f000 80c1 	beq.w	80068b0 <__kernel_rem_pio2+0x340>
 800672e:	f1bb 0f02 	cmp.w	fp, #2
 8006732:	f000 80c8 	beq.w	80068c6 <__kernel_rem_pio2+0x356>
 8006736:	f1b9 0f02 	cmp.w	r9, #2
 800673a:	d14c      	bne.n	80067d6 <__kernel_rem_pio2+0x266>
 800673c:	4632      	mov	r2, r6
 800673e:	463b      	mov	r3, r7
 8006740:	4955      	ldr	r1, [pc, #340]	@ (8006898 <__kernel_rem_pio2+0x328>)
 8006742:	2000      	movs	r0, #0
 8006744:	f7f9 fee2 	bl	800050c <__aeabi_dsub>
 8006748:	4606      	mov	r6, r0
 800674a:	460f      	mov	r7, r1
 800674c:	2d00      	cmp	r5, #0
 800674e:	d042      	beq.n	80067d6 <__kernel_rem_pio2+0x266>
 8006750:	4658      	mov	r0, fp
 8006752:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8006888 <__kernel_rem_pio2+0x318>
 8006756:	f000 fa5b 	bl	8006c10 <scalbn>
 800675a:	4630      	mov	r0, r6
 800675c:	4639      	mov	r1, r7
 800675e:	ec53 2b10 	vmov	r2, r3, d0
 8006762:	f7f9 fed3 	bl	800050c <__aeabi_dsub>
 8006766:	4606      	mov	r6, r0
 8006768:	460f      	mov	r7, r1
 800676a:	e034      	b.n	80067d6 <__kernel_rem_pio2+0x266>
 800676c:	4b4b      	ldr	r3, [pc, #300]	@ (800689c <__kernel_rem_pio2+0x32c>)
 800676e:	2200      	movs	r2, #0
 8006770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006774:	f7f9 fd9c 	bl	80002b0 <__aeabi_dmul>
 8006778:	f7fa f908 	bl	800098c <__aeabi_d2iz>
 800677c:	f7fa f814 	bl	80007a8 <__aeabi_i2d>
 8006780:	4b47      	ldr	r3, [pc, #284]	@ (80068a0 <__kernel_rem_pio2+0x330>)
 8006782:	2200      	movs	r2, #0
 8006784:	4606      	mov	r6, r0
 8006786:	460f      	mov	r7, r1
 8006788:	f7f9 fd92 	bl	80002b0 <__aeabi_dmul>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006794:	f7f9 feba 	bl	800050c <__aeabi_dsub>
 8006798:	f7fa f8f8 	bl	800098c <__aeabi_d2iz>
 800679c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80067a0:	f849 0b04 	str.w	r0, [r9], #4
 80067a4:	4639      	mov	r1, r7
 80067a6:	4630      	mov	r0, r6
 80067a8:	f7f9 feb2 	bl	8000510 <__adddf3>
 80067ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b4:	e75f      	b.n	8006676 <__kernel_rem_pio2+0x106>
 80067b6:	d107      	bne.n	80067c8 <__kernel_rem_pio2+0x258>
 80067b8:	f108 33ff 	add.w	r3, r8, #4294967295
 80067bc:	aa0c      	add	r2, sp, #48	@ 0x30
 80067be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80067c6:	e79e      	b.n	8006706 <__kernel_rem_pio2+0x196>
 80067c8:	4b36      	ldr	r3, [pc, #216]	@ (80068a4 <__kernel_rem_pio2+0x334>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	f7fa f8ca 	bl	8000964 <__aeabi_dcmpge>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d143      	bne.n	800685c <__kernel_rem_pio2+0x2ec>
 80067d4:	4681      	mov	r9, r0
 80067d6:	2200      	movs	r2, #0
 80067d8:	2300      	movs	r3, #0
 80067da:	4630      	mov	r0, r6
 80067dc:	4639      	mov	r1, r7
 80067de:	f7fa f8a3 	bl	8000928 <__aeabi_dcmpeq>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	f000 80c1 	beq.w	800696a <__kernel_rem_pio2+0x3fa>
 80067e8:	f108 33ff 	add.w	r3, r8, #4294967295
 80067ec:	2200      	movs	r2, #0
 80067ee:	9900      	ldr	r1, [sp, #0]
 80067f0:	428b      	cmp	r3, r1
 80067f2:	da70      	bge.n	80068d6 <__kernel_rem_pio2+0x366>
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	f000 808b 	beq.w	8006910 <__kernel_rem_pio2+0x3a0>
 80067fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80067fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8006800:	f1ab 0b18 	sub.w	fp, fp, #24
 8006804:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0f6      	beq.n	80067fa <__kernel_rem_pio2+0x28a>
 800680c:	4658      	mov	r0, fp
 800680e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8006888 <__kernel_rem_pio2+0x318>
 8006812:	f000 f9fd 	bl	8006c10 <scalbn>
 8006816:	f108 0301 	add.w	r3, r8, #1
 800681a:	00da      	lsls	r2, r3, #3
 800681c:	9205      	str	r2, [sp, #20]
 800681e:	ec55 4b10 	vmov	r4, r5, d0
 8006822:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006824:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800689c <__kernel_rem_pio2+0x32c>
 8006828:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800682c:	4646      	mov	r6, r8
 800682e:	f04f 0a00 	mov.w	sl, #0
 8006832:	2e00      	cmp	r6, #0
 8006834:	f280 80d1 	bge.w	80069da <__kernel_rem_pio2+0x46a>
 8006838:	4644      	mov	r4, r8
 800683a:	2c00      	cmp	r4, #0
 800683c:	f2c0 80ff 	blt.w	8006a3e <__kernel_rem_pio2+0x4ce>
 8006840:	4b19      	ldr	r3, [pc, #100]	@ (80068a8 <__kernel_rem_pio2+0x338>)
 8006842:	461f      	mov	r7, r3
 8006844:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006846:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800684a:	9306      	str	r3, [sp, #24]
 800684c:	f04f 0a00 	mov.w	sl, #0
 8006850:	f04f 0b00 	mov.w	fp, #0
 8006854:	2600      	movs	r6, #0
 8006856:	eba8 0504 	sub.w	r5, r8, r4
 800685a:	e0e4      	b.n	8006a26 <__kernel_rem_pio2+0x4b6>
 800685c:	f04f 0902 	mov.w	r9, #2
 8006860:	e754      	b.n	800670c <__kernel_rem_pio2+0x19c>
 8006862:	f854 3b04 	ldr.w	r3, [r4], #4
 8006866:	bb0d      	cbnz	r5, 80068ac <__kernel_rem_pio2+0x33c>
 8006868:	b123      	cbz	r3, 8006874 <__kernel_rem_pio2+0x304>
 800686a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800686e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006872:	2301      	movs	r3, #1
 8006874:	3201      	adds	r2, #1
 8006876:	461d      	mov	r5, r3
 8006878:	e74f      	b.n	800671a <__kernel_rem_pio2+0x1aa>
 800687a:	bf00      	nop
 800687c:	f3af 8000 	nop.w
	...
 800688c:	3ff00000 	.word	0x3ff00000
 8006890:	080075c0 	.word	0x080075c0
 8006894:	40200000 	.word	0x40200000
 8006898:	3ff00000 	.word	0x3ff00000
 800689c:	3e700000 	.word	0x3e700000
 80068a0:	41700000 	.word	0x41700000
 80068a4:	3fe00000 	.word	0x3fe00000
 80068a8:	08007580 	.word	0x08007580
 80068ac:	1acb      	subs	r3, r1, r3
 80068ae:	e7de      	b.n	800686e <__kernel_rem_pio2+0x2fe>
 80068b0:	f108 32ff 	add.w	r2, r8, #4294967295
 80068b4:	ab0c      	add	r3, sp, #48	@ 0x30
 80068b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80068be:	a90c      	add	r1, sp, #48	@ 0x30
 80068c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80068c4:	e737      	b.n	8006736 <__kernel_rem_pio2+0x1c6>
 80068c6:	f108 32ff 	add.w	r2, r8, #4294967295
 80068ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80068cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80068d4:	e7f3      	b.n	80068be <__kernel_rem_pio2+0x34e>
 80068d6:	a90c      	add	r1, sp, #48	@ 0x30
 80068d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80068dc:	3b01      	subs	r3, #1
 80068de:	430a      	orrs	r2, r1
 80068e0:	e785      	b.n	80067ee <__kernel_rem_pio2+0x27e>
 80068e2:	3401      	adds	r4, #1
 80068e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	d0fa      	beq.n	80068e2 <__kernel_rem_pio2+0x372>
 80068ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80068f2:	eb0d 0503 	add.w	r5, sp, r3
 80068f6:	9b06      	ldr	r3, [sp, #24]
 80068f8:	aa20      	add	r2, sp, #128	@ 0x80
 80068fa:	4443      	add	r3, r8
 80068fc:	f108 0701 	add.w	r7, r8, #1
 8006900:	3d98      	subs	r5, #152	@ 0x98
 8006902:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006906:	4444      	add	r4, r8
 8006908:	42bc      	cmp	r4, r7
 800690a:	da04      	bge.n	8006916 <__kernel_rem_pio2+0x3a6>
 800690c:	46a0      	mov	r8, r4
 800690e:	e6a2      	b.n	8006656 <__kernel_rem_pio2+0xe6>
 8006910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006912:	2401      	movs	r4, #1
 8006914:	e7e6      	b.n	80068e4 <__kernel_rem_pio2+0x374>
 8006916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006918:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800691c:	f7f9 ff44 	bl	80007a8 <__aeabi_i2d>
 8006920:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8006be0 <__kernel_rem_pio2+0x670>
 8006924:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006928:	ed8d 7b02 	vstr	d7, [sp, #8]
 800692c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006930:	46b2      	mov	sl, r6
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	9b05      	ldr	r3, [sp, #20]
 8006938:	4598      	cmp	r8, r3
 800693a:	dd05      	ble.n	8006948 <__kernel_rem_pio2+0x3d8>
 800693c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006940:	3701      	adds	r7, #1
 8006942:	eca5 7b02 	vstmia	r5!, {d7}
 8006946:	e7df      	b.n	8006908 <__kernel_rem_pio2+0x398>
 8006948:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800694c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006950:	f7f9 fcae 	bl	80002b0 <__aeabi_dmul>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800695c:	f7f9 fdd8 	bl	8000510 <__adddf3>
 8006960:	f108 0801 	add.w	r8, r8, #1
 8006964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006968:	e7e5      	b.n	8006936 <__kernel_rem_pio2+0x3c6>
 800696a:	f1cb 0000 	rsb	r0, fp, #0
 800696e:	ec47 6b10 	vmov	d0, r6, r7
 8006972:	f000 f94d 	bl	8006c10 <scalbn>
 8006976:	ec55 4b10 	vmov	r4, r5, d0
 800697a:	4b9b      	ldr	r3, [pc, #620]	@ (8006be8 <__kernel_rem_pio2+0x678>)
 800697c:	2200      	movs	r2, #0
 800697e:	4620      	mov	r0, r4
 8006980:	4629      	mov	r1, r5
 8006982:	f7f9 ffef 	bl	8000964 <__aeabi_dcmpge>
 8006986:	b300      	cbz	r0, 80069ca <__kernel_rem_pio2+0x45a>
 8006988:	4b98      	ldr	r3, [pc, #608]	@ (8006bec <__kernel_rem_pio2+0x67c>)
 800698a:	2200      	movs	r2, #0
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fc8e 	bl	80002b0 <__aeabi_dmul>
 8006994:	f7f9 fffa 	bl	800098c <__aeabi_d2iz>
 8006998:	4606      	mov	r6, r0
 800699a:	f7f9 ff05 	bl	80007a8 <__aeabi_i2d>
 800699e:	4b92      	ldr	r3, [pc, #584]	@ (8006be8 <__kernel_rem_pio2+0x678>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	f7f9 fc85 	bl	80002b0 <__aeabi_dmul>
 80069a6:	460b      	mov	r3, r1
 80069a8:	4602      	mov	r2, r0
 80069aa:	4629      	mov	r1, r5
 80069ac:	4620      	mov	r0, r4
 80069ae:	f7f9 fdad 	bl	800050c <__aeabi_dsub>
 80069b2:	f7f9 ffeb 	bl	800098c <__aeabi_d2iz>
 80069b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80069b8:	f10b 0b18 	add.w	fp, fp, #24
 80069bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80069c0:	f108 0801 	add.w	r8, r8, #1
 80069c4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80069c8:	e720      	b.n	800680c <__kernel_rem_pio2+0x29c>
 80069ca:	4620      	mov	r0, r4
 80069cc:	4629      	mov	r1, r5
 80069ce:	f7f9 ffdd 	bl	800098c <__aeabi_d2iz>
 80069d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80069d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80069d8:	e718      	b.n	800680c <__kernel_rem_pio2+0x29c>
 80069da:	ab0c      	add	r3, sp, #48	@ 0x30
 80069dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80069e0:	f7f9 fee2 	bl	80007a8 <__aeabi_i2d>
 80069e4:	4622      	mov	r2, r4
 80069e6:	462b      	mov	r3, r5
 80069e8:	f7f9 fc62 	bl	80002b0 <__aeabi_dmul>
 80069ec:	4652      	mov	r2, sl
 80069ee:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80069f2:	465b      	mov	r3, fp
 80069f4:	4620      	mov	r0, r4
 80069f6:	4629      	mov	r1, r5
 80069f8:	f7f9 fc5a 	bl	80002b0 <__aeabi_dmul>
 80069fc:	3e01      	subs	r6, #1
 80069fe:	4604      	mov	r4, r0
 8006a00:	460d      	mov	r5, r1
 8006a02:	e716      	b.n	8006832 <__kernel_rem_pio2+0x2c2>
 8006a04:	9906      	ldr	r1, [sp, #24]
 8006a06:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006a0a:	9106      	str	r1, [sp, #24]
 8006a0c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006a10:	f7f9 fc4e 	bl	80002b0 <__aeabi_dmul>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4650      	mov	r0, sl
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	f7f9 fd78 	bl	8000510 <__adddf3>
 8006a20:	3601      	adds	r6, #1
 8006a22:	4682      	mov	sl, r0
 8006a24:	468b      	mov	fp, r1
 8006a26:	9b00      	ldr	r3, [sp, #0]
 8006a28:	429e      	cmp	r6, r3
 8006a2a:	dc01      	bgt.n	8006a30 <__kernel_rem_pio2+0x4c0>
 8006a2c:	42ae      	cmp	r6, r5
 8006a2e:	dde9      	ble.n	8006a04 <__kernel_rem_pio2+0x494>
 8006a30:	ab48      	add	r3, sp, #288	@ 0x120
 8006a32:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006a36:	e9c5 ab00 	strd	sl, fp, [r5]
 8006a3a:	3c01      	subs	r4, #1
 8006a3c:	e6fd      	b.n	800683a <__kernel_rem_pio2+0x2ca>
 8006a3e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	dc0b      	bgt.n	8006a5c <__kernel_rem_pio2+0x4ec>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	dc35      	bgt.n	8006ab4 <__kernel_rem_pio2+0x544>
 8006a48:	d059      	beq.n	8006afe <__kernel_rem_pio2+0x58e>
 8006a4a:	9b02      	ldr	r3, [sp, #8]
 8006a4c:	f003 0007 	and.w	r0, r3, #7
 8006a50:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006a54:	ecbd 8b02 	vpop	{d8}
 8006a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d1f3      	bne.n	8006a4a <__kernel_rem_pio2+0x4da>
 8006a62:	9b05      	ldr	r3, [sp, #20]
 8006a64:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006a68:	eb0d 0403 	add.w	r4, sp, r3
 8006a6c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006a70:	4625      	mov	r5, r4
 8006a72:	46c2      	mov	sl, r8
 8006a74:	f1ba 0f00 	cmp.w	sl, #0
 8006a78:	dc69      	bgt.n	8006b4e <__kernel_rem_pio2+0x5de>
 8006a7a:	4645      	mov	r5, r8
 8006a7c:	2d01      	cmp	r5, #1
 8006a7e:	f300 8087 	bgt.w	8006b90 <__kernel_rem_pio2+0x620>
 8006a82:	9c05      	ldr	r4, [sp, #20]
 8006a84:	ab48      	add	r3, sp, #288	@ 0x120
 8006a86:	441c      	add	r4, r3
 8006a88:	2000      	movs	r0, #0
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	f1b8 0f01 	cmp.w	r8, #1
 8006a90:	f300 809c 	bgt.w	8006bcc <__kernel_rem_pio2+0x65c>
 8006a94:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8006a98:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8006a9c:	f1b9 0f00 	cmp.w	r9, #0
 8006aa0:	f040 80a6 	bne.w	8006bf0 <__kernel_rem_pio2+0x680>
 8006aa4:	9b04      	ldr	r3, [sp, #16]
 8006aa6:	e9c3 5600 	strd	r5, r6, [r3]
 8006aaa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006aae:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006ab2:	e7ca      	b.n	8006a4a <__kernel_rem_pio2+0x4da>
 8006ab4:	9d05      	ldr	r5, [sp, #20]
 8006ab6:	ab48      	add	r3, sp, #288	@ 0x120
 8006ab8:	441d      	add	r5, r3
 8006aba:	4644      	mov	r4, r8
 8006abc:	2000      	movs	r0, #0
 8006abe:	2100      	movs	r1, #0
 8006ac0:	2c00      	cmp	r4, #0
 8006ac2:	da35      	bge.n	8006b30 <__kernel_rem_pio2+0x5c0>
 8006ac4:	f1b9 0f00 	cmp.w	r9, #0
 8006ac8:	d038      	beq.n	8006b3c <__kernel_rem_pio2+0x5cc>
 8006aca:	4602      	mov	r2, r0
 8006acc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ad0:	9c04      	ldr	r4, [sp, #16]
 8006ad2:	e9c4 2300 	strd	r2, r3, [r4]
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006ade:	f7f9 fd15 	bl	800050c <__aeabi_dsub>
 8006ae2:	ad4a      	add	r5, sp, #296	@ 0x128
 8006ae4:	2401      	movs	r4, #1
 8006ae6:	45a0      	cmp	r8, r4
 8006ae8:	da2b      	bge.n	8006b42 <__kernel_rem_pio2+0x5d2>
 8006aea:	f1b9 0f00 	cmp.w	r9, #0
 8006aee:	d002      	beq.n	8006af6 <__kernel_rem_pio2+0x586>
 8006af0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006af4:	4619      	mov	r1, r3
 8006af6:	9b04      	ldr	r3, [sp, #16]
 8006af8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006afc:	e7a5      	b.n	8006a4a <__kernel_rem_pio2+0x4da>
 8006afe:	9c05      	ldr	r4, [sp, #20]
 8006b00:	ab48      	add	r3, sp, #288	@ 0x120
 8006b02:	441c      	add	r4, r3
 8006b04:	2000      	movs	r0, #0
 8006b06:	2100      	movs	r1, #0
 8006b08:	f1b8 0f00 	cmp.w	r8, #0
 8006b0c:	da09      	bge.n	8006b22 <__kernel_rem_pio2+0x5b2>
 8006b0e:	f1b9 0f00 	cmp.w	r9, #0
 8006b12:	d002      	beq.n	8006b1a <__kernel_rem_pio2+0x5aa>
 8006b14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b18:	4619      	mov	r1, r3
 8006b1a:	9b04      	ldr	r3, [sp, #16]
 8006b1c:	e9c3 0100 	strd	r0, r1, [r3]
 8006b20:	e793      	b.n	8006a4a <__kernel_rem_pio2+0x4da>
 8006b22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006b26:	f7f9 fcf3 	bl	8000510 <__adddf3>
 8006b2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b2e:	e7eb      	b.n	8006b08 <__kernel_rem_pio2+0x598>
 8006b30:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006b34:	f7f9 fcec 	bl	8000510 <__adddf3>
 8006b38:	3c01      	subs	r4, #1
 8006b3a:	e7c1      	b.n	8006ac0 <__kernel_rem_pio2+0x550>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	e7c6      	b.n	8006ad0 <__kernel_rem_pio2+0x560>
 8006b42:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006b46:	f7f9 fce3 	bl	8000510 <__adddf3>
 8006b4a:	3401      	adds	r4, #1
 8006b4c:	e7cb      	b.n	8006ae6 <__kernel_rem_pio2+0x576>
 8006b4e:	ed35 7b02 	vldmdb	r5!, {d7}
 8006b52:	ed8d 7b00 	vstr	d7, [sp]
 8006b56:	ed95 7b02 	vldr	d7, [r5, #8]
 8006b5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b5e:	ec53 2b17 	vmov	r2, r3, d7
 8006b62:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006b66:	f7f9 fcd3 	bl	8000510 <__adddf3>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4606      	mov	r6, r0
 8006b70:	460f      	mov	r7, r1
 8006b72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b76:	f7f9 fcc9 	bl	800050c <__aeabi_dsub>
 8006b7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b7e:	f7f9 fcc7 	bl	8000510 <__adddf3>
 8006b82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b86:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006b8a:	e9c5 6700 	strd	r6, r7, [r5]
 8006b8e:	e771      	b.n	8006a74 <__kernel_rem_pio2+0x504>
 8006b90:	ed34 7b02 	vldmdb	r4!, {d7}
 8006b94:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006b98:	ec51 0b17 	vmov	r0, r1, d7
 8006b9c:	4652      	mov	r2, sl
 8006b9e:	465b      	mov	r3, fp
 8006ba0:	ed8d 7b00 	vstr	d7, [sp]
 8006ba4:	f7f9 fcb4 	bl	8000510 <__adddf3>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4606      	mov	r6, r0
 8006bae:	460f      	mov	r7, r1
 8006bb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bb4:	f7f9 fcaa 	bl	800050c <__aeabi_dsub>
 8006bb8:	4652      	mov	r2, sl
 8006bba:	465b      	mov	r3, fp
 8006bbc:	f7f9 fca8 	bl	8000510 <__adddf3>
 8006bc0:	3d01      	subs	r5, #1
 8006bc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006bc6:	e9c4 6700 	strd	r6, r7, [r4]
 8006bca:	e757      	b.n	8006a7c <__kernel_rem_pio2+0x50c>
 8006bcc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006bd0:	f7f9 fc9e 	bl	8000510 <__adddf3>
 8006bd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bd8:	e758      	b.n	8006a8c <__kernel_rem_pio2+0x51c>
 8006bda:	bf00      	nop
 8006bdc:	f3af 8000 	nop.w
	...
 8006be8:	41700000 	.word	0x41700000
 8006bec:	3e700000 	.word	0x3e700000
 8006bf0:	9b04      	ldr	r3, [sp, #16]
 8006bf2:	9a04      	ldr	r2, [sp, #16]
 8006bf4:	601d      	str	r5, [r3, #0]
 8006bf6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8006bfa:	605c      	str	r4, [r3, #4]
 8006bfc:	609f      	str	r7, [r3, #8]
 8006bfe:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8006c02:	60d3      	str	r3, [r2, #12]
 8006c04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c08:	6110      	str	r0, [r2, #16]
 8006c0a:	6153      	str	r3, [r2, #20]
 8006c0c:	e71d      	b.n	8006a4a <__kernel_rem_pio2+0x4da>
 8006c0e:	bf00      	nop

08006c10 <scalbn>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	ec55 4b10 	vmov	r4, r5, d0
 8006c16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	b991      	cbnz	r1, 8006c46 <scalbn+0x36>
 8006c20:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006c24:	4323      	orrs	r3, r4
 8006c26:	d03b      	beq.n	8006ca0 <scalbn+0x90>
 8006c28:	4b33      	ldr	r3, [pc, #204]	@ (8006cf8 <scalbn+0xe8>)
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f7f9 fb3e 	bl	80002b0 <__aeabi_dmul>
 8006c34:	4b31      	ldr	r3, [pc, #196]	@ (8006cfc <scalbn+0xec>)
 8006c36:	429e      	cmp	r6, r3
 8006c38:	4604      	mov	r4, r0
 8006c3a:	460d      	mov	r5, r1
 8006c3c:	da0f      	bge.n	8006c5e <scalbn+0x4e>
 8006c3e:	a326      	add	r3, pc, #152	@ (adr r3, 8006cd8 <scalbn+0xc8>)
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	e01e      	b.n	8006c84 <scalbn+0x74>
 8006c46:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006c4a:	4291      	cmp	r1, r2
 8006c4c:	d10b      	bne.n	8006c66 <scalbn+0x56>
 8006c4e:	4622      	mov	r2, r4
 8006c50:	4620      	mov	r0, r4
 8006c52:	4629      	mov	r1, r5
 8006c54:	f7f9 fc5c 	bl	8000510 <__adddf3>
 8006c58:	4604      	mov	r4, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	e020      	b.n	8006ca0 <scalbn+0x90>
 8006c5e:	460b      	mov	r3, r1
 8006c60:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006c64:	3936      	subs	r1, #54	@ 0x36
 8006c66:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006c6a:	4296      	cmp	r6, r2
 8006c6c:	dd0d      	ble.n	8006c8a <scalbn+0x7a>
 8006c6e:	2d00      	cmp	r5, #0
 8006c70:	a11b      	add	r1, pc, #108	@ (adr r1, 8006ce0 <scalbn+0xd0>)
 8006c72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c76:	da02      	bge.n	8006c7e <scalbn+0x6e>
 8006c78:	a11b      	add	r1, pc, #108	@ (adr r1, 8006ce8 <scalbn+0xd8>)
 8006c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c7e:	a318      	add	r3, pc, #96	@ (adr r3, 8006ce0 <scalbn+0xd0>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 fb14 	bl	80002b0 <__aeabi_dmul>
 8006c88:	e7e6      	b.n	8006c58 <scalbn+0x48>
 8006c8a:	1872      	adds	r2, r6, r1
 8006c8c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006c90:	428a      	cmp	r2, r1
 8006c92:	dcec      	bgt.n	8006c6e <scalbn+0x5e>
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	dd06      	ble.n	8006ca6 <scalbn+0x96>
 8006c98:	f36f 531e 	bfc	r3, #20, #11
 8006c9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ca0:	ec45 4b10 	vmov	d0, r4, r5
 8006ca4:	bd70      	pop	{r4, r5, r6, pc}
 8006ca6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006caa:	da08      	bge.n	8006cbe <scalbn+0xae>
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	a10a      	add	r1, pc, #40	@ (adr r1, 8006cd8 <scalbn+0xc8>)
 8006cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb4:	dac3      	bge.n	8006c3e <scalbn+0x2e>
 8006cb6:	a10e      	add	r1, pc, #56	@ (adr r1, 8006cf0 <scalbn+0xe0>)
 8006cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cbc:	e7bf      	b.n	8006c3e <scalbn+0x2e>
 8006cbe:	3236      	adds	r2, #54	@ 0x36
 8006cc0:	f36f 531e 	bfc	r3, #20, #11
 8006cc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cc8:	4620      	mov	r0, r4
 8006cca:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <scalbn+0xf0>)
 8006ccc:	4629      	mov	r1, r5
 8006cce:	2200      	movs	r2, #0
 8006cd0:	e7d8      	b.n	8006c84 <scalbn+0x74>
 8006cd2:	bf00      	nop
 8006cd4:	f3af 8000 	nop.w
 8006cd8:	c2f8f359 	.word	0xc2f8f359
 8006cdc:	01a56e1f 	.word	0x01a56e1f
 8006ce0:	8800759c 	.word	0x8800759c
 8006ce4:	7e37e43c 	.word	0x7e37e43c
 8006ce8:	8800759c 	.word	0x8800759c
 8006cec:	fe37e43c 	.word	0xfe37e43c
 8006cf0:	c2f8f359 	.word	0xc2f8f359
 8006cf4:	81a56e1f 	.word	0x81a56e1f
 8006cf8:	43500000 	.word	0x43500000
 8006cfc:	ffff3cb0 	.word	0xffff3cb0
 8006d00:	3c900000 	.word	0x3c900000
 8006d04:	00000000 	.word	0x00000000

08006d08 <floor>:
 8006d08:	ec51 0b10 	vmov	r0, r1, d0
 8006d0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d14:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006d18:	2e13      	cmp	r6, #19
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	4680      	mov	r8, r0
 8006d20:	dc34      	bgt.n	8006d8c <floor+0x84>
 8006d22:	2e00      	cmp	r6, #0
 8006d24:	da17      	bge.n	8006d56 <floor+0x4e>
 8006d26:	a332      	add	r3, pc, #200	@ (adr r3, 8006df0 <floor+0xe8>)
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	f7f9 fbf0 	bl	8000510 <__adddf3>
 8006d30:	2200      	movs	r2, #0
 8006d32:	2300      	movs	r3, #0
 8006d34:	f7f9 fe20 	bl	8000978 <__aeabi_dcmpgt>
 8006d38:	b150      	cbz	r0, 8006d50 <floor+0x48>
 8006d3a:	2c00      	cmp	r4, #0
 8006d3c:	da55      	bge.n	8006dea <floor+0xe2>
 8006d3e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006d42:	432c      	orrs	r4, r5
 8006d44:	2500      	movs	r5, #0
 8006d46:	42ac      	cmp	r4, r5
 8006d48:	4c2b      	ldr	r4, [pc, #172]	@ (8006df8 <floor+0xf0>)
 8006d4a:	bf08      	it	eq
 8006d4c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006d50:	4621      	mov	r1, r4
 8006d52:	4628      	mov	r0, r5
 8006d54:	e023      	b.n	8006d9e <floor+0x96>
 8006d56:	4f29      	ldr	r7, [pc, #164]	@ (8006dfc <floor+0xf4>)
 8006d58:	4137      	asrs	r7, r6
 8006d5a:	ea01 0307 	and.w	r3, r1, r7
 8006d5e:	4303      	orrs	r3, r0
 8006d60:	d01d      	beq.n	8006d9e <floor+0x96>
 8006d62:	a323      	add	r3, pc, #140	@ (adr r3, 8006df0 <floor+0xe8>)
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f7f9 fbd2 	bl	8000510 <__adddf3>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f7f9 fe02 	bl	8000978 <__aeabi_dcmpgt>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d0eb      	beq.n	8006d50 <floor+0x48>
 8006d78:	2c00      	cmp	r4, #0
 8006d7a:	bfbe      	ittt	lt
 8006d7c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006d80:	4133      	asrlt	r3, r6
 8006d82:	18e4      	addlt	r4, r4, r3
 8006d84:	ea24 0407 	bic.w	r4, r4, r7
 8006d88:	2500      	movs	r5, #0
 8006d8a:	e7e1      	b.n	8006d50 <floor+0x48>
 8006d8c:	2e33      	cmp	r6, #51	@ 0x33
 8006d8e:	dd0a      	ble.n	8006da6 <floor+0x9e>
 8006d90:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006d94:	d103      	bne.n	8006d9e <floor+0x96>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	f7f9 fbb9 	bl	8000510 <__adddf3>
 8006d9e:	ec41 0b10 	vmov	d0, r0, r1
 8006da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006daa:	f04f 37ff 	mov.w	r7, #4294967295
 8006dae:	40df      	lsrs	r7, r3
 8006db0:	4207      	tst	r7, r0
 8006db2:	d0f4      	beq.n	8006d9e <floor+0x96>
 8006db4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006df0 <floor+0xe8>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	f7f9 fba9 	bl	8000510 <__adddf3>
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f7f9 fdd9 	bl	8000978 <__aeabi_dcmpgt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d0c2      	beq.n	8006d50 <floor+0x48>
 8006dca:	2c00      	cmp	r4, #0
 8006dcc:	da0a      	bge.n	8006de4 <floor+0xdc>
 8006dce:	2e14      	cmp	r6, #20
 8006dd0:	d101      	bne.n	8006dd6 <floor+0xce>
 8006dd2:	3401      	adds	r4, #1
 8006dd4:	e006      	b.n	8006de4 <floor+0xdc>
 8006dd6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006dda:	2301      	movs	r3, #1
 8006ddc:	40b3      	lsls	r3, r6
 8006dde:	441d      	add	r5, r3
 8006de0:	4545      	cmp	r5, r8
 8006de2:	d3f6      	bcc.n	8006dd2 <floor+0xca>
 8006de4:	ea25 0507 	bic.w	r5, r5, r7
 8006de8:	e7b2      	b.n	8006d50 <floor+0x48>
 8006dea:	2500      	movs	r5, #0
 8006dec:	462c      	mov	r4, r5
 8006dee:	e7af      	b.n	8006d50 <floor+0x48>
 8006df0:	8800759c 	.word	0x8800759c
 8006df4:	7e37e43c 	.word	0x7e37e43c
 8006df8:	bff00000 	.word	0xbff00000
 8006dfc:	000fffff 	.word	0x000fffff

08006e00 <_init>:
 8006e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e02:	bf00      	nop
 8006e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e06:	bc08      	pop	{r3}
 8006e08:	469e      	mov	lr, r3
 8006e0a:	4770      	bx	lr

08006e0c <_fini>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr
